

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Tue Dec 11 01:11:35 2018

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    32                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    33  0000                     
    34                           ; Version 1.42
    35                           ; Generated 13/04/2017 GMT
    36                           ; 
    37                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    38                           ; All rights reserved.
    39                           ; 
    40                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    41                           ; 
    42                           ; Redistribution and use in source and binary forms, with or without modification, are
    43                           ; permitted provided that the following conditions are met:
    44                           ; 
    45                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    46                           ;        conditions and the following disclaimer.
    47                           ; 
    48                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    49                           ;        of conditions and the following disclaimer in the documentation and/or other
    50                           ;        materials provided with the distribution.
    51                           ; 
    52                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    53                           ;        software without specific prior written permission.
    54                           ; 
    55                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    56                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    57                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    58                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    59                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    60                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    61                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    62                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    63                           ; 
    64                           ; 
    65                           ; Code-generator required, PIC18F4620 Definitions
    66                           ; 
    67                           ; SFR Addresses
    68  0000                     
    69                           	psect	smallconst
    70  001000                     __psmallconst:
    71                           	opt stack 0
    72  001000  00                 	db	0
    73  001001                     _GREY:
    74                           	opt stack 0
    75  001001  8080               	dw	32896
    76  001003  0080               	dw	128
    77  001005                     __end_of_GREY:
    78                           	opt stack 0
    79  001005                     _BLACK:
    80                           	opt stack 0
    81  001005  0000               	dw	0
    82  001007  0000               	dw	0
    83  001009                     __end_of_BLACK:
    84                           	opt stack 0
    85  001009                     _WHITE:
    86                           	opt stack 0
    87  001009  FFFF               	dw	65535
    88  00100B  00FF               	dw	255
    89  00100D                     __end_of_WHITE:
    90                           	opt stack 0
    91  00100D                     _VIOLET:
    92                           	opt stack 0
    93  00100D  00D3               	dw	211
    94  00100F  0094               	dw	148
    95  001011                     __end_of_VIOLET:
    96                           	opt stack 0
    97  001011                     _INDIGO:
    98                           	opt stack 0
    99  001011  0082               	dw	130
   100  001013  004B               	dw	75
   101  001015                     __end_of_INDIGO:
   102                           	opt stack 0
   103  001015                     _BLUE:
   104                           	opt stack 0
   105  001015  00FF               	dw	255
   106  001017  0000               	dw	0
   107  001019                     __end_of_BLUE:
   108                           	opt stack 0
   109  001019                     _GREEN:
   110                           	opt stack 0
   111  001019  FF00               	dw	65280
   112  00101B  0000               	dw	0
   113  00101D                     __end_of_GREEN:
   114                           	opt stack 0
   115  00101D                     _YELLOW:
   116                           	opt stack 0
   117  00101D  FF00               	dw	65280
   118  00101F  00FF               	dw	255
   119  001021                     __end_of_YELLOW:
   120                           	opt stack 0
   121  001021                     _ORANGE:
   122                           	opt stack 0
   123  001021  8C00               	dw	35840
   124  001023  00FF               	dw	255
   125  001025                     __end_of_ORANGE:
   126                           	opt stack 0
   127  001025                     _RED:
   128                           	opt stack 0
   129  001025  0000               	dw	0
   130  001027  00FF               	dw	255
   131  001029                     __end_of_RED:
   132                           	opt stack 0
   133  001029  C7                 	db	199
   134  00102A                     __end_of_INST_VMOFCTR2:
   135                           	opt stack 0
   136  00102A                     _INST_VMCTR1:
   137                           	opt stack 0
   138  00102A  C5                 	db	197
   139  00102B                     __end_of_INST_VMCTR1:
   140                           	opt stack 0
   141  00102B                     _INST_PWCTR5:
   142                           	opt stack 0
   143  00102B  C4                 	db	196
   144  00102C                     __end_of_INST_PWCTR5:
   145                           	opt stack 0
   146  00102C                     _INST_PWCTR4:
   147                           	opt stack 0
   148  00102C  C3                 	db	195
   149  00102D                     __end_of_INST_PWCTR4:
   150                           	opt stack 0
   151  00102D                     _INST_PWCTR3:
   152                           	opt stack 0
   153  00102D  C2                 	db	194
   154  00102E                     __end_of_INST_PWCTR3:
   155                           	opt stack 0
   156  00102E                     _INST_PWCTR2:
   157                           	opt stack 0
   158  00102E  C1                 	db	193
   159  00102F                     __end_of_INST_PWCTR2:
   160                           	opt stack 0
   161  00102F                     _INST_PWCTR1:
   162                           	opt stack 0
   163  00102F  C0                 	db	192
   164  001030                     __end_of_INST_PWCTR1:
   165                           	opt stack 0
   166  001030                     _INST_INVCTR:
   167                           	opt stack 0
   168  001030  B4                 	db	180
   169  001031                     __end_of_INST_INVCTR:
   170                           	opt stack 0
   171  001031                     _INST_FRMCTR3:
   172                           	opt stack 0
   173  001031  B3                 	db	179
   174  001032                     __end_of_INST_FRMCTR3:
   175                           	opt stack 0
   176  001032                     _INST_FRMCTR2:
   177                           	opt stack 0
   178  001032  B2                 	db	178
   179  001033                     __end_of_INST_FRMCTR2:
   180                           	opt stack 0
   181  001033                     _INST_FRMCTR1:
   182                           	opt stack 0
   183  001033  B1                 	db	177
   184  001034                     __end_of_INST_FRMCTR1:
   185                           	opt stack 0
   186  001034                     _INST_COLMOD:
   187                           	opt stack 0
   188  001034  3A                 	db	58
   189  001035                     __end_of_INST_COLMOD:
   190                           	opt stack 0
   191  001035                     _INST_IDMON:
   192                           	opt stack 0
   193  001035  39                 	db	57
   194  001036                     __end_of_INST_IDMON:
   195                           	opt stack 0
   196  001036                     _INST_IDMOFF:
   197                           	opt stack 0
   198  001036  38                 	db	56
   199  001037                     __end_of_INST_IDMOFF:
   200                           	opt stack 0
   201  001037                     _INST_MADCTL:
   202                           	opt stack 0
   203  001037  36                 	db	54
   204  001038                     __end_of_INST_MADCTL:
   205                           	opt stack 0
   206  001038  35                 	db	53
   207  001039                     __end_of_INST_TEON:
   208                           	opt stack 0
   209  001039                     _INST_TEOFF:
   210                           	opt stack 0
   211  001039  34                 	db	52
   212  00103A                     __end_of_INST_TEOFF:
   213                           	opt stack 0
   214  00103A  30                 	db	48
   215  00103B                     __end_of_INST_PTLAR:
   216                           	opt stack 0
   217  00103B                     _INST_RAMWR:
   218                           	opt stack 0
   219  00103B  2C                 	db	44
   220  00103C                     __end_of_INST_RAMWR:
   221                           	opt stack 0
   222  00103C                     _INST_RASET:
   223                           	opt stack 0
   224  00103C  2B                 	db	43
   225  00103D                     __end_of_INST_RASET:
   226                           	opt stack 0
   227  00103D                     _INST_CASET:
   228                           	opt stack 0
   229  00103D  2A                 	db	42
   230  00103E                     __end_of_INST_CASET:
   231                           	opt stack 0
   232  00103E                     _INST_DISPON:
   233                           	opt stack 0
   234  00103E  29                 	db	41
   235  00103F                     __end_of_INST_DISPON:
   236                           	opt stack 0
   237  00103F                     _INST_DISPOFF:
   238                           	opt stack 0
   239  00103F  28                 	db	40
   240  001040                     __end_of_INST_DISPOFF:
   241                           	opt stack 0
   242  001040                     _INST_GAMSET:
   243                           	opt stack 0
   244  001040  26                 	db	38
   245  001041                     __end_of_INST_GAMSET:
   246                           	opt stack 0
   247  001041                     _INST_INVON:
   248                           	opt stack 0
   249  001041  21                 	db	33
   250  001042                     __end_of_INST_INVON:
   251                           	opt stack 0
   252  001042                     _INST_INVOFF:
   253                           	opt stack 0
   254  001042  20                 	db	32
   255  001043                     __end_of_INST_INVOFF:
   256                           	opt stack 0
   257  001043                     _INST_NORON:
   258                           	opt stack 0
   259  001043  13                 	db	19
   260  001044                     __end_of_INST_NORON:
   261                           	opt stack 0
   262  001044                     _INST_PTLON:
   263                           	opt stack 0
   264  001044  12                 	db	18
   265  001045                     __end_of_INST_PTLON:
   266                           	opt stack 0
   267  001045                     _INST_SLPOUT:
   268                           	opt stack 0
   269  001045  11                 	db	17
   270  001046                     __end_of_INST_SLPOUT:
   271                           	opt stack 0
   272  001046                     _INST_SLPIN:
   273                           	opt stack 0
   274  001046  10                 	db	16
   275  001047                     __end_of_INST_SLPIN:
   276                           	opt stack 0
   277  001047                     _INST_SWRESET:
   278                           	opt stack 0
   279  001047  01                 	db	1
   280  001048                     __end_of_INST_SWRESET:
   281                           	opt stack 0
   282  001048  00                 	db	0
   283  001049                     __end_of_INST_NOP:
   284                           	opt stack 0
   285  001049                     _GLCD_ADDRESSABLE_SIZE_VERT:
   286                           	opt stack 0
   287  001049  A0                 	db	160
   288  00104A                     __end_of_GLCD_ADDRESSABLE_SIZE_VERT:
   289                           	opt stack 0
   290  00104A                     _GLCD_ADDRESSABLE_SIZE_HORZ:
   291                           	opt stack 0
   292  00104A  80                 	db	128
   293  00104B                     __end_of_GLCD_ADDRESSABLE_SIZE_HORZ:
   294                           	opt stack 0
   295  00104B                     _GLCD_SIZE_VERT:
   296                           	opt stack 0
   297  00104B  80                 	db	128
   298  00104C                     __end_of_GLCD_SIZE_VERT:
   299                           	opt stack 0
   300  00104C                     _GLCD_SIZE_HORZ:
   301                           	opt stack 0
   302  00104C  80                 	db	128
   303  00104D                     __end_of_GLCD_SIZE_HORZ:
   304                           	opt stack 0
   305  0000                     _TRISCbits	set	3988
   306  0000                     _SSPCON1	set	4038
   307  0000                     _SSPSTAT	set	4039
   308  0000                     _SSPCON1bits	set	4038
   309  0000                     _SSPSTATbits	set	4039
   310  0000                     _SSPBUF	set	4041
   311  0000                     _TRISDbits	set	3989
   312  0000                     _LATDbits	set	3980
   313  0000                     _SSPIF	set	31987
   314                           
   315                           ; #config settings
   316  00104D  00                 	db	0	; dummy byte at the end
   317  0000                     
   318                           	psect	cinit
   319  001E98                     __pcinit:
   320                           	opt stack 0
   321  001E98                     start_initialization:
   322                           	opt stack 0
   323  001E98                     __initialization:
   324                           	opt stack 0
   325                           
   326                           ; Clear objects allocated to COMRAM (1 bytes)
   327  001E98  6A2A               	clrf	__pbssCOMRAM& (0+255),c
   328  001E9A                     end_of_initialization:
   329                           	opt stack 0
   330  001E9A                     __end_of__initialization:
   331                           	opt stack 0
   332  001E9A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   333  001E9C  6EF8               	movwf	tblptru,c
   334  001E9E  0100               	movlb	0
   335  001EA0  EF27  F008         	goto	_main	;jump to C main() function
   336                           tblptru	equ	0xFF8
   337                           
   338                           	psect	bssCOMRAM
   339  00002A                     __pbssCOMRAM:
   340                           	opt stack 0
   341  00002A                     _MADCTLbits:
   342                           	opt stack 0
   343  00002A                     	ds	1
   344                           tblptru	equ	0xFF8
   345                           
   346                           	psect	cstackCOMRAM
   347  000001                     __pcstackCOMRAM:
   348                           	opt stack 0
   349  000001                     ??_spiTransfer:
   350  000001                     ?___wmul:
   351                           	opt stack 0
   352  000001                     ?___awdiv:
   353                           	opt stack 0
   354  000001                     spiInit@divider:
   355                           	opt stack 0
   356  000001                     ___wmul@multiplier:
   357                           	opt stack 0
   358  000001                     ___awdiv@dividend:
   359                           	opt stack 0
   360                           
   361                           ; 2 bytes @ 0x0
   362  000001                     	ds	1
   363  000002                     spiTransfer@byteToTransfer:
   364                           	opt stack 0
   365                           
   366                           ; 1 bytes @ 0x1
   367  000002                     	ds	1
   368  000003                     spiSend@val:
   369                           	opt stack 0
   370  000003                     ___wmul@multiplicand:
   371                           	opt stack 0
   372  000003                     ___awdiv@divisor:
   373                           	opt stack 0
   374                           
   375                           ; 2 bytes @ 0x2
   376  000003                     	ds	1
   377  000004                     glcdTransfer@cmd:
   378                           	opt stack 0
   379                           
   380                           ; 1 bytes @ 0x3
   381  000004                     	ds	1
   382  000005                     ??_glcdTransfer:
   383  000005                     ___awdiv@counter:
   384                           	opt stack 0
   385  000005                     ___wmul@product:
   386                           	opt stack 0
   387                           
   388                           ; 2 bytes @ 0x4
   389  000005                     	ds	1
   390  000006                     glcdTransfer@byte:
   391                           	opt stack 0
   392  000006                     ___awdiv@sign:
   393                           	opt stack 0
   394                           
   395                           ; 1 bytes @ 0x5
   396  000006                     	ds	1
   397  000007                     ??_glcd_swreset:
   398  000007                     ??_glcd_slpout:
   399  000007                     glcdDrawRectangle@XE:
   400                           	opt stack 0
   401  000007                     glcdSetCOLMOD@numBitsPerPixel:
   402                           	opt stack 0
   403  000007                     glcdSetOrigin@corner:
   404                           	opt stack 0
   405  000007                     ___awdiv@quotient:
   406                           	opt stack 0
   407                           
   408                           ; 2 bytes @ 0x6
   409  000007                     	ds	1
   410  000008                     glcdDrawRectangle@YS:
   411                           	opt stack 0
   412  000008                     glcdSetCOLMOD@rawData:
   413                           	opt stack 0
   414                           
   415                           ; 2 bytes @ 0x7
   416  000008                     	ds	1
   417  000009                     ?___awmod:
   418                           	opt stack 0
   419  000009                     glcdDrawRectangle@YE:
   420                           	opt stack 0
   421  000009                     ___awmod@dividend:
   422                           	opt stack 0
   423                           
   424                           ; 2 bytes @ 0x8
   425  000009                     	ds	1
   426  00000A                     glcdDrawRectangle@color:
   427                           	opt stack 0
   428                           
   429                           ; 4 bytes @ 0x9
   430  00000A                     	ds	1
   431  00000B                     ___awmod@divisor:
   432                           	opt stack 0
   433                           
   434                           ; 2 bytes @ 0xA
   435  00000B                     	ds	2
   436  00000D                     ___awmod@counter:
   437                           	opt stack 0
   438                           
   439                           ; 1 bytes @ 0xC
   440  00000D                     	ds	1
   441  00000E                     ??_glcdDrawRectangle:
   442  00000E                     ___awmod@sign:
   443                           	opt stack 0
   444                           
   445                           ; 1 bytes @ 0xD
   446  00000E                     	ds	4
   447  000012                     glcdDrawRectangle@numLoops:
   448                           	opt stack 0
   449                           
   450                           ; 2 bytes @ 0x11
   451  000012                     	ds	2
   452  000014                     glcdDrawRectangle@i:
   453                           	opt stack 0
   454                           
   455                           ; 2 bytes @ 0x13
   456  000014                     	ds	2
   457  000016                     glcdDrawRectangle@colorData:
   458                           	opt stack 0
   459                           
   460                           ; 3 bytes @ 0x15
   461  000016                     	ds	3
   462  000019                     glcdDrawRectangle@XS:
   463                           	opt stack 0
   464                           
   465                           ; 1 bytes @ 0x18
   466  000019                     	ds	1
   467  00001A                     ??_initGLCD:
   468  00001A                     glcdDrawPixel@YS:
   469                           	opt stack 0
   470                           
   471                           ; 1 bytes @ 0x19
   472  00001A                     	ds	1
   473  00001B                     glcdDrawPixel@color:
   474                           	opt stack 0
   475                           
   476                           ; 4 bytes @ 0x1A
   477  00001B                     	ds	4
   478  00001F                     ??_glcdDrawPixel:
   479                           
   480                           ; 1 bytes @ 0x1E
   481  00001F                     	ds	1
   482  000020                     glcdDrawPixel@XS:
   483                           	opt stack 0
   484                           
   485                           ; 1 bytes @ 0x1F
   486  000020                     	ds	1
   487  000021                     ??_main:
   488                           
   489                           ; 1 bytes @ 0x20
   490  000021                     	ds	2
   491  000023                     main@iteration:
   492                           	opt stack 0
   493                           
   494                           ; 1 bytes @ 0x22
   495  000023                     	ds	1
   496  000024                     _main$1162:
   497                           	opt stack 0
   498                           
   499                           ; 4 bytes @ 0x23
   500  000024                     	ds	4
   501  000028                     main@y:
   502                           	opt stack 0
   503                           
   504                           ; 1 bytes @ 0x27
   505  000028                     	ds	1
   506  000029                     main@x:
   507                           	opt stack 0
   508                           
   509                           ; 1 bytes @ 0x28
   510  000029                     	ds	1
   511                           tblptru	equ	0xFF8
   512                           
   513 ;;
   514 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   515 ;;
   516 ;; *************** function _main *****************
   517 ;; Defined at:
   518 ;;		line 20 in file "main.c"
   519 ;; Parameters:    Size  Location     Type
   520 ;;		None
   521 ;; Auto vars:     Size  Location     Type
   522 ;;  x               1   40[COMRAM] unsigned char 
   523 ;;  y               1   39[COMRAM] unsigned char 
   524 ;;  iteration       1   34[COMRAM] unsigned char 
   525 ;; Return value:  Size  Location     Type
   526 ;;                  1    wreg      void 
   527 ;; Registers used:
   528 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   529 ;; Tracked objects:
   530 ;;		On entry : 0/0
   531 ;;		On exit  : 0/0
   532 ;;		Unchanged: 0/0
   533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   535 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   536 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   537 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   538 ;;Total ram usage:        9 bytes
   539 ;; Hardware stack levels required when called:    6
   540 ;; This function calls:
   541 ;;		___awdiv
   542 ;;		___awmod
   543 ;;		___wmul
   544 ;;		_glcdDrawPixel
   545 ;;		_glcdDrawRectangle
   546 ;;		_glcdSetOrigin
   547 ;;		_glcd_invoff
   548 ;;		_glcd_invon
   549 ;;		_initGLCD
   550 ;; This function is called by:
   551 ;;		Startup code after reset
   552 ;; This function uses a non-reentrant model
   553 ;;
   554                           
   555                           	psect	text0
   556  00104E                     __ptext0:
   557                           	opt stack 0
   558  00104E                     _main:
   559                           	opt stack 25
   560                           
   561                           ;main.c: 23: LATDbits.LATD0 = 1;
   562                           
   563                           ;incstack = 0
   564  00104E  808C               	bsf	3980,0,c	;volatile
   565                           
   566                           ;main.c: 24: LATDbits.LATD1 = 1;
   567  001050  828C               	bsf	3980,1,c	;volatile
   568                           
   569                           ;main.c: 25: TRISDbits.TRISD0 = 0;
   570  001052  9095               	bcf	3989,0,c	;volatile
   571                           
   572                           ;main.c: 26: TRISDbits.TRISD1 = 0;
   573  001054  9295               	bcf	3989,1,c	;volatile
   574                           
   575                           ;main.c: 29: initGLCD();
   576  001056  EC97  F00B         	call	_initGLCD	;wreg free
   577                           
   578                           ;main.c: 32: unsigned char iteration = 0, x = 0, y = 0;
   579  00105A  0E00               	movlw	0
   580  00105C  6E23               	movwf	main@iteration,c
   581  00105E  0E00               	movlw	0
   582  001060  6E29               	movwf	main@x,c
   583  001062  0E00               	movlw	0
   584  001064  6E28               	movwf	main@y,c
   585  001066                     l1833:
   586                           
   587                           ;main.c: 35: glcdDrawRectangle(0, GLCD_SIZE_HORZ, 0, GLCD_SIZE_VERT, RED);
   588  001066  0E4C               	movlw	low _GLCD_SIZE_HORZ
   589  001068  6EF6               	movwf	tblptrl,c
   590  00106A                     	if	1	;There is more than 1 active tblptr byte
   591  00106A  0E10               	movlw	high _GLCD_SIZE_HORZ
   592  00106C  6EF7               	movwf	tblptrh,c
   593  00106E                     	endif
   594  00106E                     	if	0	;There are less than 3 active tblptr bytes
   595  00106E                     	endif
   596  00106E  0008               	tblrd		*
   597  001070  CFF5 F007          	movff	tablat,glcdDrawRectangle@XE
   598  001074  0E00               	movlw	0
   599  001076  6E08               	movwf	glcdDrawRectangle@YS,c
   600  001078  0E4B               	movlw	low _GLCD_SIZE_VERT
   601  00107A  6EF6               	movwf	tblptrl,c
   602  00107C                     	if	1	;There is more than 1 active tblptr byte
   603  00107C  0E10               	movlw	high _GLCD_SIZE_VERT
   604  00107E  6EF7               	movwf	tblptrh,c
   605  001080                     	endif
   606  001080                     	if	0	;There are less than 3 active tblptr bytes
   607  001080                     	endif
   608  001080  0008               	tblrd		*
   609  001082  CFF5 F009          	movff	tablat,glcdDrawRectangle@YE
   610  001086  0E25               	movlw	low _RED
   611  001088  6EF6               	movwf	tblptrl,c
   612  00108A                     	if	1	;There is more than 1 active tblptr byte
   613  00108A  0E10               	movlw	high _RED
   614  00108C  6EF7               	movwf	tblptrh,c
   615  00108E                     	endif
   616  00108E                     	if	0	;There are less than 3 active tblptr bytes
   617  00108E                     	endif
   618  00108E  0009               	tblrd		*+
   619  001090  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
   620  001094  0009               	tblrd		*+
   621  001096  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
   622  00109A  0009               	tblrd		*+
   623  00109C  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
   624  0010A0  000A               	tblrd		*-
   625  0010A2  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
   626  0010A6  0E00               	movlw	0
   627  0010A8  ECC5  F00C         	call	_glcdDrawRectangle
   628                           
   629                           ;main.c: 36: _delay((unsigned long)((1000)*(10000000/4000.0)));
   630  0010AC  0E0D               	movlw	13
   631  0010AE  6E22               	movwf	(??_main+1)& (0+255),c
   632  0010B0  0EAF               	movlw	175
   633  0010B2  6E21               	movwf	??_main& (0+255),c
   634  0010B4  0EB6               	movlw	182
   635  0010B6                     u897:
   636  0010B6  2EE8               	decfsz	wreg,f,c
   637  0010B8  D7FE               	bra	u897
   638  0010BA  2E21               	decfsz	??_main& (0+255),f,c
   639  0010BC  D7FC               	bra	u897
   640  0010BE  2E22               	decfsz	(??_main+1)& (0+255),f,c
   641  0010C0  D7FA               	bra	u897
   642  0010C2  D000               	nop2	
   643                           
   644                           ;main.c: 39: glcdDrawRectangle(0, 18, 0, GLCD_SIZE_VERT, RED);
   645  0010C4  0E12               	movlw	18
   646  0010C6  6E07               	movwf	glcdDrawRectangle@XE,c
   647  0010C8  0E00               	movlw	0
   648  0010CA  6E08               	movwf	glcdDrawRectangle@YS,c
   649  0010CC  0E4B               	movlw	low _GLCD_SIZE_VERT
   650  0010CE  6EF6               	movwf	tblptrl,c
   651  0010D0                     	if	1	;There is more than 1 active tblptr byte
   652  0010D0  0E10               	movlw	high _GLCD_SIZE_VERT
   653  0010D2  6EF7               	movwf	tblptrh,c
   654  0010D4                     	endif
   655  0010D4                     	if	0	;There are less than 3 active tblptr bytes
   656  0010D4                     	endif
   657  0010D4  0008               	tblrd		*
   658  0010D6  CFF5 F009          	movff	tablat,glcdDrawRectangle@YE
   659  0010DA  0E25               	movlw	low _RED
   660  0010DC  6EF6               	movwf	tblptrl,c
   661  0010DE                     	if	1	;There is more than 1 active tblptr byte
   662  0010DE  0E10               	movlw	high _RED
   663  0010E0  6EF7               	movwf	tblptrh,c
   664  0010E2                     	endif
   665  0010E2                     	if	0	;There are less than 3 active tblptr bytes
   666  0010E2                     	endif
   667  0010E2  0009               	tblrd		*+
   668  0010E4  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
   669  0010E8  0009               	tblrd		*+
   670  0010EA  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
   671  0010EE  0009               	tblrd		*+
   672  0010F0  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
   673  0010F4  000A               	tblrd		*-
   674  0010F6  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
   675  0010FA  0E00               	movlw	0
   676  0010FC  ECC5  F00C         	call	_glcdDrawRectangle
   677                           
   678                           ;main.c: 40: glcdDrawRectangle(18, 36, 0, GLCD_SIZE_VERT, ORANGE);
   679  001100  0E24               	movlw	36
   680  001102  6E07               	movwf	glcdDrawRectangle@XE,c
   681  001104  0E00               	movlw	0
   682  001106  6E08               	movwf	glcdDrawRectangle@YS,c
   683  001108  0E4B               	movlw	low _GLCD_SIZE_VERT
   684  00110A  6EF6               	movwf	tblptrl,c
   685  00110C                     	if	1	;There is more than 1 active tblptr byte
   686  00110C  0E10               	movlw	high _GLCD_SIZE_VERT
   687  00110E  6EF7               	movwf	tblptrh,c
   688  001110                     	endif
   689  001110                     	if	0	;There are less than 3 active tblptr bytes
   690  001110                     	endif
   691  001110  0008               	tblrd		*
   692  001112  CFF5 F009          	movff	tablat,glcdDrawRectangle@YE
   693  001116  0E21               	movlw	low _ORANGE
   694  001118  6EF6               	movwf	tblptrl,c
   695  00111A                     	if	1	;There is more than 1 active tblptr byte
   696  00111A  0E10               	movlw	high _ORANGE
   697  00111C  6EF7               	movwf	tblptrh,c
   698  00111E                     	endif
   699  00111E                     	if	0	;There are less than 3 active tblptr bytes
   700  00111E                     	endif
   701  00111E  0009               	tblrd		*+
   702  001120  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
   703  001124  0009               	tblrd		*+
   704  001126  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
   705  00112A  0009               	tblrd		*+
   706  00112C  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
   707  001130  000A               	tblrd		*-
   708  001132  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
   709  001136  0E12               	movlw	18
   710  001138  ECC5  F00C         	call	_glcdDrawRectangle
   711                           
   712                           ;main.c: 41: glcdDrawRectangle(36, 54, 0, GLCD_SIZE_VERT, YELLOW);
   713  00113C  0E36               	movlw	54
   714  00113E  6E07               	movwf	glcdDrawRectangle@XE,c
   715  001140  0E00               	movlw	0
   716  001142  6E08               	movwf	glcdDrawRectangle@YS,c
   717  001144  0E4B               	movlw	low _GLCD_SIZE_VERT
   718  001146  6EF6               	movwf	tblptrl,c
   719  001148                     	if	1	;There is more than 1 active tblptr byte
   720  001148  0E10               	movlw	high _GLCD_SIZE_VERT
   721  00114A  6EF7               	movwf	tblptrh,c
   722  00114C                     	endif
   723  00114C                     	if	0	;There are less than 3 active tblptr bytes
   724  00114C                     	endif
   725  00114C  0008               	tblrd		*
   726  00114E  CFF5 F009          	movff	tablat,glcdDrawRectangle@YE
   727  001152  0E1D               	movlw	low _YELLOW
   728  001154  6EF6               	movwf	tblptrl,c
   729  001156                     	if	1	;There is more than 1 active tblptr byte
   730  001156  0E10               	movlw	high _YELLOW
   731  001158  6EF7               	movwf	tblptrh,c
   732  00115A                     	endif
   733  00115A                     	if	0	;There are less than 3 active tblptr bytes
   734  00115A                     	endif
   735  00115A  0009               	tblrd		*+
   736  00115C  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
   737  001160  0009               	tblrd		*+
   738  001162  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
   739  001166  0009               	tblrd		*+
   740  001168  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
   741  00116C  000A               	tblrd		*-
   742  00116E  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
   743  001172  0E24               	movlw	36
   744  001174  ECC5  F00C         	call	_glcdDrawRectangle
   745                           
   746                           ;main.c: 42: glcdDrawRectangle(54, 72, 0, GLCD_SIZE_VERT, GREEN);
   747  001178  0E48               	movlw	72
   748  00117A  6E07               	movwf	glcdDrawRectangle@XE,c
   749  00117C  0E00               	movlw	0
   750  00117E  6E08               	movwf	glcdDrawRectangle@YS,c
   751  001180  0E4B               	movlw	low _GLCD_SIZE_VERT
   752  001182  6EF6               	movwf	tblptrl,c
   753  001184                     	if	1	;There is more than 1 active tblptr byte
   754  001184  0E10               	movlw	high _GLCD_SIZE_VERT
   755  001186  6EF7               	movwf	tblptrh,c
   756  001188                     	endif
   757  001188                     	if	0	;There are less than 3 active tblptr bytes
   758  001188                     	endif
   759  001188  0008               	tblrd		*
   760  00118A  CFF5 F009          	movff	tablat,glcdDrawRectangle@YE
   761  00118E  0E19               	movlw	low _GREEN
   762  001190  6EF6               	movwf	tblptrl,c
   763  001192                     	if	1	;There is more than 1 active tblptr byte
   764  001192  0E10               	movlw	high _GREEN
   765  001194  6EF7               	movwf	tblptrh,c
   766  001196                     	endif
   767  001196                     	if	0	;There are less than 3 active tblptr bytes
   768  001196                     	endif
   769  001196  0009               	tblrd		*+
   770  001198  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
   771  00119C  0009               	tblrd		*+
   772  00119E  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
   773  0011A2  0009               	tblrd		*+
   774  0011A4  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
   775  0011A8  000A               	tblrd		*-
   776  0011AA  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
   777  0011AE  0E36               	movlw	54
   778  0011B0  ECC5  F00C         	call	_glcdDrawRectangle
   779                           
   780                           ;main.c: 43: glcdDrawRectangle(72, 90, 0, GLCD_SIZE_VERT, BLUE);
   781  0011B4  0E5A               	movlw	90
   782  0011B6  6E07               	movwf	glcdDrawRectangle@XE,c
   783  0011B8  0E00               	movlw	0
   784  0011BA  6E08               	movwf	glcdDrawRectangle@YS,c
   785  0011BC  0E4B               	movlw	low _GLCD_SIZE_VERT
   786  0011BE  6EF6               	movwf	tblptrl,c
   787  0011C0                     	if	1	;There is more than 1 active tblptr byte
   788  0011C0  0E10               	movlw	high _GLCD_SIZE_VERT
   789  0011C2  6EF7               	movwf	tblptrh,c
   790  0011C4                     	endif
   791  0011C4                     	if	0	;There are less than 3 active tblptr bytes
   792  0011C4                     	endif
   793  0011C4  0008               	tblrd		*
   794  0011C6  CFF5 F009          	movff	tablat,glcdDrawRectangle@YE
   795  0011CA  0E15               	movlw	low _BLUE
   796  0011CC  6EF6               	movwf	tblptrl,c
   797  0011CE                     	if	1	;There is more than 1 active tblptr byte
   798  0011CE  0E10               	movlw	high _BLUE
   799  0011D0  6EF7               	movwf	tblptrh,c
   800  0011D2                     	endif
   801  0011D2                     	if	0	;There are less than 3 active tblptr bytes
   802  0011D2                     	endif
   803  0011D2  0009               	tblrd		*+
   804  0011D4  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
   805  0011D8  0009               	tblrd		*+
   806  0011DA  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
   807  0011DE  0009               	tblrd		*+
   808  0011E0  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
   809  0011E4  000A               	tblrd		*-
   810  0011E6  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
   811  0011EA  0E48               	movlw	72
   812  0011EC  ECC5  F00C         	call	_glcdDrawRectangle
   813                           
   814                           ;main.c: 44: glcdDrawRectangle(90, 108, 0, GLCD_SIZE_VERT, INDIGO);
   815  0011F0  0E6C               	movlw	108
   816  0011F2  6E07               	movwf	glcdDrawRectangle@XE,c
   817  0011F4  0E00               	movlw	0
   818  0011F6  6E08               	movwf	glcdDrawRectangle@YS,c
   819  0011F8  0E4B               	movlw	low _GLCD_SIZE_VERT
   820  0011FA  6EF6               	movwf	tblptrl,c
   821  0011FC                     	if	1	;There is more than 1 active tblptr byte
   822  0011FC  0E10               	movlw	high _GLCD_SIZE_VERT
   823  0011FE  6EF7               	movwf	tblptrh,c
   824  001200                     	endif
   825  001200                     	if	0	;There are less than 3 active tblptr bytes
   826  001200                     	endif
   827  001200  0008               	tblrd		*
   828  001202  CFF5 F009          	movff	tablat,glcdDrawRectangle@YE
   829  001206  0E11               	movlw	low _INDIGO
   830  001208  6EF6               	movwf	tblptrl,c
   831  00120A                     	if	1	;There is more than 1 active tblptr byte
   832  00120A  0E10               	movlw	high _INDIGO
   833  00120C  6EF7               	movwf	tblptrh,c
   834  00120E                     	endif
   835  00120E                     	if	0	;There are less than 3 active tblptr bytes
   836  00120E                     	endif
   837  00120E  0009               	tblrd		*+
   838  001210  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
   839  001214  0009               	tblrd		*+
   840  001216  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
   841  00121A  0009               	tblrd		*+
   842  00121C  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
   843  001220  000A               	tblrd		*-
   844  001222  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
   845  001226  0E5A               	movlw	90
   846  001228  ECC5  F00C         	call	_glcdDrawRectangle
   847                           
   848                           ;main.c: 45: glcdDrawRectangle(108, 128, 0, GLCD_SIZE_VERT, VIOLET);
   849  00122C  0E80               	movlw	128
   850  00122E  6E07               	movwf	glcdDrawRectangle@XE,c
   851  001230  0E00               	movlw	0
   852  001232  6E08               	movwf	glcdDrawRectangle@YS,c
   853  001234  0E4B               	movlw	low _GLCD_SIZE_VERT
   854  001236  6EF6               	movwf	tblptrl,c
   855  001238                     	if	1	;There is more than 1 active tblptr byte
   856  001238  0E10               	movlw	high _GLCD_SIZE_VERT
   857  00123A  6EF7               	movwf	tblptrh,c
   858  00123C                     	endif
   859  00123C                     	if	0	;There are less than 3 active tblptr bytes
   860  00123C                     	endif
   861  00123C  0008               	tblrd		*
   862  00123E  CFF5 F009          	movff	tablat,glcdDrawRectangle@YE
   863  001242  0E0D               	movlw	low _VIOLET
   864  001244  6EF6               	movwf	tblptrl,c
   865  001246                     	if	1	;There is more than 1 active tblptr byte
   866  001246  0E10               	movlw	high _VIOLET
   867  001248  6EF7               	movwf	tblptrh,c
   868  00124A                     	endif
   869  00124A                     	if	0	;There are less than 3 active tblptr bytes
   870  00124A                     	endif
   871  00124A  0009               	tblrd		*+
   872  00124C  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
   873  001250  0009               	tblrd		*+
   874  001252  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
   875  001256  0009               	tblrd		*+
   876  001258  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
   877  00125C  000A               	tblrd		*-
   878  00125E  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
   879  001262  0E6C               	movlw	108
   880  001264  ECC5  F00C         	call	_glcdDrawRectangle
   881                           
   882                           ;main.c: 48: _delay((unsigned long)((500)*(10000000/4000.0)));
   883  001268  0E07               	movlw	7
   884  00126A  6E22               	movwf	(??_main+1)& (0+255),c
   885  00126C  0E58               	movlw	88
   886  00126E  6E21               	movwf	??_main& (0+255),c
   887  001270  0E5A               	movlw	90
   888  001272                     u907:
   889  001272  2EE8               	decfsz	wreg,f,c
   890  001274  D7FE               	bra	u907
   891  001276  2E21               	decfsz	??_main& (0+255),f,c
   892  001278  D7FC               	bra	u907
   893  00127A  2E22               	decfsz	(??_main+1)& (0+255),f,c
   894  00127C  D7FA               	bra	u907
   895                           
   896                           ;main.c: 49: glcd_invon();
   897  00127E  EC36  F00F         	call	_glcd_invon	;wreg free
   898                           
   899                           ;main.c: 50: _delay((unsigned long)((500)*(10000000/4000.0)));
   900  001282  0E07               	movlw	7
   901  001284  6E22               	movwf	(??_main+1)& (0+255),c
   902  001286  0E58               	movlw	88
   903  001288  6E21               	movwf	??_main& (0+255),c
   904  00128A  0E5A               	movlw	90
   905  00128C                     u917:
   906  00128C  2EE8               	decfsz	wreg,f,c
   907  00128E  D7FE               	bra	u917
   908  001290  2E21               	decfsz	??_main& (0+255),f,c
   909  001292  D7FC               	bra	u917
   910  001294  2E22               	decfsz	(??_main+1)& (0+255),f,c
   911  001296  D7FA               	bra	u917
   912                           
   913                           ;main.c: 51: glcd_invoff();
   914  001298  EC15  F00F         	call	_glcd_invoff	;wreg free
   915                           
   916                           ;main.c: 52: _delay((unsigned long)((500)*(10000000/4000.0)));
   917  00129C  0E07               	movlw	7
   918  00129E  6E22               	movwf	(??_main+1)& (0+255),c
   919  0012A0  0E58               	movlw	88
   920  0012A2  6E21               	movwf	??_main& (0+255),c
   921  0012A4  0E5A               	movlw	90
   922  0012A6                     u927:
   923  0012A6  2EE8               	decfsz	wreg,f,c
   924  0012A8  D7FE               	bra	u927
   925  0012AA  2E21               	decfsz	??_main& (0+255),f,c
   926  0012AC  D7FC               	bra	u927
   927  0012AE  2E22               	decfsz	(??_main+1)& (0+255),f,c
   928  0012B0  D7FA               	bra	u927
   929                           
   930                           ;main.c: 55: glcdDrawPixel(0, 0, WHITE);
   931  0012B2  0E00               	movlw	0
   932  0012B4  6E1A               	movwf	glcdDrawPixel@YS,c
   933  0012B6  0E09               	movlw	low _WHITE
   934  0012B8  6EF6               	movwf	tblptrl,c
   935  0012BA                     	if	1	;There is more than 1 active tblptr byte
   936  0012BA  0E10               	movlw	high _WHITE
   937  0012BC  6EF7               	movwf	tblptrh,c
   938  0012BE                     	endif
   939  0012BE                     	if	0	;There are less than 3 active tblptr bytes
   940  0012BE                     	endif
   941  0012BE  0009               	tblrd		*+
   942  0012C0  CFF5 F01B          	movff	tablat,glcdDrawPixel@color
   943  0012C4  0009               	tblrd		*+
   944  0012C6  CFF5 F01C          	movff	tablat,glcdDrawPixel@color+1
   945  0012CA  0009               	tblrd		*+
   946  0012CC  CFF5 F01D          	movff	tablat,glcdDrawPixel@color+2
   947  0012D0  000A               	tblrd		*-
   948  0012D2  CFF5 F01E          	movff	tablat,glcdDrawPixel@color+3
   949  0012D6  0E00               	movlw	0
   950  0012D8  ECF7  F00D         	call	_glcdDrawPixel
   951                           
   952                           ;main.c: 56: _delay((unsigned long)((500)*(10000000/4000.0)));
   953  0012DC  0E07               	movlw	7
   954  0012DE  6E22               	movwf	(??_main+1)& (0+255),c
   955  0012E0  0E58               	movlw	88
   956  0012E2  6E21               	movwf	??_main& (0+255),c
   957  0012E4  0E5A               	movlw	90
   958  0012E6                     u937:
   959  0012E6  2EE8               	decfsz	wreg,f,c
   960  0012E8  D7FE               	bra	u937
   961  0012EA  2E21               	decfsz	??_main& (0+255),f,c
   962  0012EC  D7FC               	bra	u937
   963  0012EE  2E22               	decfsz	(??_main+1)& (0+255),f,c
   964  0012F0  D7FA               	bra	u937
   965                           
   966                           ;main.c: 57: glcdDrawPixel(GLCD_SIZE_HORZ, 0, WHITE);
   967  0012F2  0E00               	movlw	0
   968  0012F4  6E1A               	movwf	glcdDrawPixel@YS,c
   969  0012F6  0E09               	movlw	low _WHITE
   970  0012F8  6EF6               	movwf	tblptrl,c
   971  0012FA                     	if	1	;There is more than 1 active tblptr byte
   972  0012FA  0E10               	movlw	high _WHITE
   973  0012FC  6EF7               	movwf	tblptrh,c
   974  0012FE                     	endif
   975  0012FE                     	if	0	;There are less than 3 active tblptr bytes
   976  0012FE                     	endif
   977  0012FE  0009               	tblrd		*+
   978  001300  CFF5 F01B          	movff	tablat,glcdDrawPixel@color
   979  001304  0009               	tblrd		*+
   980  001306  CFF5 F01C          	movff	tablat,glcdDrawPixel@color+1
   981  00130A  0009               	tblrd		*+
   982  00130C  CFF5 F01D          	movff	tablat,glcdDrawPixel@color+2
   983  001310  000A               	tblrd		*-
   984  001312  CFF5 F01E          	movff	tablat,glcdDrawPixel@color+3
   985  001316  0E4C               	movlw	low _GLCD_SIZE_HORZ
   986  001318  6EF6               	movwf	tblptrl,c
   987  00131A                     	if	1	;There is more than 1 active tblptr byte
   988  00131A  0E10               	movlw	high _GLCD_SIZE_HORZ
   989  00131C  6EF7               	movwf	tblptrh,c
   990  00131E                     	endif
   991  00131E                     	if	0	;There are less than 3 active tblptr bytes
   992  00131E                     	endif
   993  00131E  0008               	tblrd		*
   994  001320  50F5               	movf	tablat,w,c
   995  001322  ECF7  F00D         	call	_glcdDrawPixel
   996                           
   997                           ;main.c: 58: _delay((unsigned long)((500)*(10000000/4000.0)));
   998  001326  0E07               	movlw	7
   999  001328  6E22               	movwf	(??_main+1)& (0+255),c
  1000  00132A  0E58               	movlw	88
  1001  00132C  6E21               	movwf	??_main& (0+255),c
  1002  00132E  0E5A               	movlw	90
  1003  001330                     u947:
  1004  001330  2EE8               	decfsz	wreg,f,c
  1005  001332  D7FE               	bra	u947
  1006  001334  2E21               	decfsz	??_main& (0+255),f,c
  1007  001336  D7FC               	bra	u947
  1008  001338  2E22               	decfsz	(??_main+1)& (0+255),f,c
  1009  00133A  D7FA               	bra	u947
  1010                           
  1011                           ;main.c: 59: glcdDrawPixel(GLCD_SIZE_HORZ, GLCD_SIZE_VERT, WHITE);
  1012  00133C  0E4B               	movlw	low _GLCD_SIZE_VERT
  1013  00133E  6EF6               	movwf	tblptrl,c
  1014  001340                     	if	1	;There is more than 1 active tblptr byte
  1015  001340  0E10               	movlw	high _GLCD_SIZE_VERT
  1016  001342  6EF7               	movwf	tblptrh,c
  1017  001344                     	endif
  1018  001344                     	if	0	;There are less than 3 active tblptr bytes
  1019  001344                     	endif
  1020  001344  0008               	tblrd		*
  1021  001346  CFF5 F01A          	movff	tablat,glcdDrawPixel@YS
  1022  00134A  0E09               	movlw	low _WHITE
  1023  00134C  6EF6               	movwf	tblptrl,c
  1024  00134E                     	if	1	;There is more than 1 active tblptr byte
  1025  00134E  0E10               	movlw	high _WHITE
  1026  001350  6EF7               	movwf	tblptrh,c
  1027  001352                     	endif
  1028  001352                     	if	0	;There are less than 3 active tblptr bytes
  1029  001352                     	endif
  1030  001352  0009               	tblrd		*+
  1031  001354  CFF5 F01B          	movff	tablat,glcdDrawPixel@color
  1032  001358  0009               	tblrd		*+
  1033  00135A  CFF5 F01C          	movff	tablat,glcdDrawPixel@color+1
  1034  00135E  0009               	tblrd		*+
  1035  001360  CFF5 F01D          	movff	tablat,glcdDrawPixel@color+2
  1036  001364  000A               	tblrd		*-
  1037  001366  CFF5 F01E          	movff	tablat,glcdDrawPixel@color+3
  1038  00136A  0E4C               	movlw	low _GLCD_SIZE_HORZ
  1039  00136C  6EF6               	movwf	tblptrl,c
  1040  00136E                     	if	1	;There is more than 1 active tblptr byte
  1041  00136E  0E10               	movlw	high _GLCD_SIZE_HORZ
  1042  001370  6EF7               	movwf	tblptrh,c
  1043  001372                     	endif
  1044  001372                     	if	0	;There are less than 3 active tblptr bytes
  1045  001372                     	endif
  1046  001372  0008               	tblrd		*
  1047  001374  50F5               	movf	tablat,w,c
  1048  001376  ECF7  F00D         	call	_glcdDrawPixel
  1049                           
  1050                           ;main.c: 60: _delay((unsigned long)((500)*(10000000/4000.0)));
  1051  00137A  0E07               	movlw	7
  1052  00137C  6E22               	movwf	(??_main+1)& (0+255),c
  1053  00137E  0E58               	movlw	88
  1054  001380  6E21               	movwf	??_main& (0+255),c
  1055  001382  0E5A               	movlw	90
  1056  001384                     u957:
  1057  001384  2EE8               	decfsz	wreg,f,c
  1058  001386  D7FE               	bra	u957
  1059  001388  2E21               	decfsz	??_main& (0+255),f,c
  1060  00138A  D7FC               	bra	u957
  1061  00138C  2E22               	decfsz	(??_main+1)& (0+255),f,c
  1062  00138E  D7FA               	bra	u957
  1063                           
  1064                           ;main.c: 61: glcdDrawPixel(0, GLCD_SIZE_VERT, WHITE);
  1065  001390  0E4B               	movlw	low _GLCD_SIZE_VERT
  1066  001392  6EF6               	movwf	tblptrl,c
  1067  001394                     	if	1	;There is more than 1 active tblptr byte
  1068  001394  0E10               	movlw	high _GLCD_SIZE_VERT
  1069  001396  6EF7               	movwf	tblptrh,c
  1070  001398                     	endif
  1071  001398                     	if	0	;There are less than 3 active tblptr bytes
  1072  001398                     	endif
  1073  001398  0008               	tblrd		*
  1074  00139A  CFF5 F01A          	movff	tablat,glcdDrawPixel@YS
  1075  00139E  0E09               	movlw	low _WHITE
  1076  0013A0  6EF6               	movwf	tblptrl,c
  1077  0013A2                     	if	1	;There is more than 1 active tblptr byte
  1078  0013A2  0E10               	movlw	high _WHITE
  1079  0013A4  6EF7               	movwf	tblptrh,c
  1080  0013A6                     	endif
  1081  0013A6                     	if	0	;There are less than 3 active tblptr bytes
  1082  0013A6                     	endif
  1083  0013A6  0009               	tblrd		*+
  1084  0013A8  CFF5 F01B          	movff	tablat,glcdDrawPixel@color
  1085  0013AC  0009               	tblrd		*+
  1086  0013AE  CFF5 F01C          	movff	tablat,glcdDrawPixel@color+1
  1087  0013B2  0009               	tblrd		*+
  1088  0013B4  CFF5 F01D          	movff	tablat,glcdDrawPixel@color+2
  1089  0013B8  000A               	tblrd		*-
  1090  0013BA  CFF5 F01E          	movff	tablat,glcdDrawPixel@color+3
  1091  0013BE  0E00               	movlw	0
  1092  0013C0  ECF7  F00D         	call	_glcdDrawPixel
  1093                           
  1094                           ;main.c: 62: _delay((unsigned long)((500)*(10000000/4000.0)));
  1095  0013C4  0E07               	movlw	7
  1096  0013C6  6E22               	movwf	(??_main+1)& (0+255),c
  1097  0013C8  0E58               	movlw	88
  1098  0013CA  6E21               	movwf	??_main& (0+255),c
  1099  0013CC  0E5A               	movlw	90
  1100  0013CE                     u967:
  1101  0013CE  2EE8               	decfsz	wreg,f,c
  1102  0013D0  D7FE               	bra	u967
  1103  0013D2  2E21               	decfsz	??_main& (0+255),f,c
  1104  0013D4  D7FC               	bra	u967
  1105  0013D6  2E22               	decfsz	(??_main+1)& (0+255),f,c
  1106  0013D8  D7FA               	bra	u967
  1107                           
  1108                           ;main.c: 65: for(x = 0; x < GLCD_SIZE_HORZ; x++){
  1109  0013DA  0E00               	movlw	0
  1110  0013DC  6E29               	movwf	main@x,c
  1111  0013DE                     l1879:
  1112  0013DE  0E4C               	movlw	low _GLCD_SIZE_HORZ
  1113  0013E0  6EF6               	movwf	tblptrl,c
  1114  0013E2                     	if	1	;There is more than 1 active tblptr byte
  1115  0013E2  0E10               	movlw	high _GLCD_SIZE_HORZ
  1116  0013E4  6EF7               	movwf	tblptrh,c
  1117  0013E6                     	endif
  1118  0013E6                     	if	0	;There are less than 3 active tblptr bytes
  1119  0013E6                     	endif
  1120  0013E6  0009               	tblrd		*+
  1121  0013E8  50F5               	movf	tablat,w,c
  1122  0013EA  5C29               	subwf	main@x,w,c
  1123  0013EC  B0D8               	btfsc	status,0,c
  1124  0013EE  D083               	goto	l1897
  1125                           
  1126                           ;main.c: 66: if(x % (GLCD_SIZE_VERT/16) == 0){
  1127  0013F0  C029  F009         	movff	main@x,___awmod@dividend
  1128  0013F4  6A0A               	clrf	___awmod@dividend+1,c
  1129  0013F6  0E00               	movlw	0
  1130  0013F8  6E04               	movwf	___awdiv@divisor+1,c
  1131  0013FA  0E10               	movlw	16
  1132  0013FC  6E03               	movwf	___awdiv@divisor,c
  1133  0013FE  0E4B               	movlw	low _GLCD_SIZE_VERT
  1134  001400  6EF6               	movwf	tblptrl,c
  1135  001402                     	if	1	;There is more than 1 active tblptr byte
  1136  001402  0E10               	movlw	high _GLCD_SIZE_VERT
  1137  001404  6EF7               	movwf	tblptrh,c
  1138  001406                     	endif
  1139  001406                     	if	0	;There are less than 3 active tblptr bytes
  1140  001406                     	endif
  1141  001406  0008               	tblrd		*
  1142  001408  50F5               	movf	tablat,w,c
  1143  00140A  6E01               	movwf	___awdiv@dividend,c
  1144  00140C  6A02               	clrf	___awdiv@dividend+1,c
  1145  00140E  EC7D  F00D         	call	___awdiv	;wreg free
  1146  001412  C001  F00B         	movff	?___awdiv,___awmod@divisor
  1147  001416  C002  F00C         	movff	?___awdiv+1,___awmod@divisor+1
  1148  00141A  ECBF  F00D         	call	___awmod	;wreg free
  1149  00141E  5009               	movf	?___awmod,w,c
  1150  001420  100A               	iorwf	?___awmod+1,w,c
  1151  001422  A4D8               	btfss	status,2,c
  1152  001424  D036               	goto	l1889
  1153                           
  1154                           ;main.c: 67: glcdDrawPixel(GLCD_SIZE_VERT - (x * 8), (x % 3) * 33, x * 2048);
  1155  001426  C029  F001         	movff	main@x,___wmul@multiplier
  1156  00142A  6A02               	clrf	___wmul@multiplier+1,c
  1157  00142C  0E08               	movlw	8
  1158  00142E  6E04               	movwf	___wmul@multiplicand+1,c
  1159  001430  0E00               	movlw	0
  1160  001432  6E03               	movwf	___wmul@multiplicand,c
  1161  001434  ECD5  F00E         	call	___wmul	;wreg free
  1162  001438  C001  F024         	movff	?___wmul,_main$1162
  1163  00143C  C002  F025         	movff	?___wmul+1,_main$1162+1
  1164  001440  0E00               	movlw	0
  1165  001442  BE25               	btfsc	_main$1162+1,7,c
  1166  001444  0EFF               	movlw	-1
  1167  001446  6E26               	movwf	_main$1162+2,c
  1168  001448  6E27               	movwf	_main$1162+3,c
  1169                           
  1170                           ;main.c: 67: glcdDrawPixel(GLCD_SIZE_VERT - (x * 8), (x % 3) * 33, x * 2048);
  1171  00144A  C029  F009         	movff	main@x,___awmod@dividend
  1172  00144E  6A0A               	clrf	___awmod@dividend+1,c
  1173  001450  0E00               	movlw	0
  1174  001452  6E0C               	movwf	___awmod@divisor+1,c
  1175  001454  0E03               	movlw	3
  1176  001456  6E0B               	movwf	___awmod@divisor,c
  1177  001458  ECBF  F00D         	call	___awmod	;wreg free
  1178  00145C  5009               	movf	?___awmod,w,c
  1179  00145E  0D21               	mullw	33
  1180  001460  CFF3 F01A          	movff	prodl,glcdDrawPixel@YS
  1181  001464  C024  F01B         	movff	_main$1162,glcdDrawPixel@color
  1182  001468  C025  F01C         	movff	_main$1162+1,glcdDrawPixel@color+1
  1183  00146C  C026  F01D         	movff	_main$1162+2,glcdDrawPixel@color+2
  1184  001470  C027  F01E         	movff	_main$1162+3,glcdDrawPixel@color+3
  1185  001474  0E4B               	movlw	low _GLCD_SIZE_VERT
  1186  001476  6EF6               	movwf	tblptrl,c
  1187  001478                     	if	1	;There is more than 1 active tblptr byte
  1188  001478  0E10               	movlw	high _GLCD_SIZE_VERT
  1189  00147A  6EF7               	movwf	tblptrh,c
  1190  00147C                     	endif
  1191  00147C                     	if	0	;There are less than 3 active tblptr bytes
  1192  00147C                     	endif
  1193  00147C  0008               	tblrd		*
  1194  00147E  CFF5 F021          	movff	tablat,??_main
  1195  001482  5029               	movf	main@x,w,c
  1196  001484  0D08               	mullw	8
  1197  001486  50F3               	movf	prodl,w,c
  1198  001488  0800               	sublw	0
  1199  00148A  2421               	addwf	??_main,w,c
  1200  00148C  ECF7  F00D         	call	_glcdDrawPixel
  1201                           
  1202                           ;main.c: 68: }
  1203  001490  D028               	goto	l1893
  1204  001492                     l1889:
  1205                           
  1206                           ;main.c: 69: else{
  1207                           ;main.c: 70: glcdDrawPixel(x, GLCD_SIZE_VERT - x, x * 2048);
  1208  001492  C029  F001         	movff	main@x,___wmul@multiplier
  1209  001496  6A02               	clrf	___wmul@multiplier+1,c
  1210  001498  0E08               	movlw	8
  1211  00149A  6E04               	movwf	___wmul@multiplicand+1,c
  1212  00149C  0E00               	movlw	0
  1213  00149E  6E03               	movwf	___wmul@multiplicand,c
  1214  0014A0  ECD5  F00E         	call	___wmul	;wreg free
  1215  0014A4  C001  F024         	movff	?___wmul,_main$1162
  1216  0014A8  C002  F025         	movff	?___wmul+1,_main$1162+1
  1217  0014AC  0E00               	movlw	0
  1218  0014AE  BE25               	btfsc	_main$1162+1,7,c
  1219  0014B0  0EFF               	movlw	-1
  1220  0014B2  6E26               	movwf	_main$1162+2,c
  1221  0014B4  6E27               	movwf	_main$1162+3,c
  1222                           
  1223                           ;main.c: 69: else{
  1224                           ;main.c: 70: glcdDrawPixel(x, GLCD_SIZE_VERT - x, x * 2048);
  1225  0014B6  0E4B               	movlw	low _GLCD_SIZE_VERT
  1226  0014B8  6EF6               	movwf	tblptrl,c
  1227  0014BA                     	if	1	;There is more than 1 active tblptr byte
  1228  0014BA  0E10               	movlw	high _GLCD_SIZE_VERT
  1229  0014BC  6EF7               	movwf	tblptrh,c
  1230  0014BE                     	endif
  1231  0014BE                     	if	0	;There are less than 3 active tblptr bytes
  1232  0014BE                     	endif
  1233  0014BE  0008               	tblrd		*
  1234  0014C0  CFF5 F021          	movff	tablat,??_main
  1235  0014C4  5029               	movf	main@x,w,c
  1236  0014C6  0800               	sublw	0
  1237  0014C8  2421               	addwf	??_main,w,c
  1238  0014CA  6E1A               	movwf	glcdDrawPixel@YS,c
  1239  0014CC  C024  F01B         	movff	_main$1162,glcdDrawPixel@color
  1240  0014D0  C025  F01C         	movff	_main$1162+1,glcdDrawPixel@color+1
  1241  0014D4  C026  F01D         	movff	_main$1162+2,glcdDrawPixel@color+2
  1242  0014D8  C027  F01E         	movff	_main$1162+3,glcdDrawPixel@color+3
  1243  0014DC  5029               	movf	main@x,w,c
  1244  0014DE  ECF7  F00D         	call	_glcdDrawPixel
  1245  0014E2                     l1893:
  1246                           
  1247                           ;main.c: 71: }
  1248                           ;main.c: 72: _delay((unsigned long)((10)*(10000000/4000.0)));
  1249  0014E2  0E21               	movlw	33
  1250  0014E4  6E21               	movwf	??_main& (0+255),c
  1251  0014E6  0E76               	movlw	118
  1252  0014E8                     u977:
  1253  0014E8  2EE8               	decfsz	wreg,f,c
  1254  0014EA  D7FE               	bra	u977
  1255  0014EC  2E21               	decfsz	??_main& (0+255),f,c
  1256  0014EE  D7FC               	bra	u977
  1257  0014F0  D000               	nop2	
  1258  0014F2  2A29               	incf	main@x,f,c
  1259  0014F4  D774               	goto	l1879
  1260  0014F6                     l1897:
  1261                           
  1262                           ;main.c: 73: }
  1263                           ;main.c: 76: for(y = 0; y < GLCD_SIZE_VERT; y++){
  1264  0014F6  0E00               	movlw	0
  1265  0014F8  6E28               	movwf	main@y,c
  1266  0014FA                     l1899:
  1267  0014FA  0E4B               	movlw	low _GLCD_SIZE_VERT
  1268  0014FC  6EF6               	movwf	tblptrl,c
  1269  0014FE                     	if	1	;There is more than 1 active tblptr byte
  1270  0014FE  0E10               	movlw	high _GLCD_SIZE_VERT
  1271  001500  6EF7               	movwf	tblptrh,c
  1272  001502                     	endif
  1273  001502                     	if	0	;There are less than 3 active tblptr bytes
  1274  001502                     	endif
  1275  001502  0009               	tblrd		*+
  1276  001504  50F5               	movf	tablat,w,c
  1277  001506  5C28               	subwf	main@y,w,c
  1278  001508  B0D8               	btfsc	status,0,c
  1279  00150A  D028               	goto	l1919
  1280                           
  1281                           ;main.c: 77: for(x = 0; x < GLCD_SIZE_HORZ; x++){
  1282  00150C  0E00               	movlw	0
  1283  00150E  6E29               	movwf	main@x,c
  1284  001510                     l1905:
  1285  001510  0E4C               	movlw	low _GLCD_SIZE_HORZ
  1286  001512  6EF6               	movwf	tblptrl,c
  1287  001514                     	if	1	;There is more than 1 active tblptr byte
  1288  001514  0E10               	movlw	high _GLCD_SIZE_HORZ
  1289  001516  6EF7               	movwf	tblptrh,c
  1290  001518                     	endif
  1291  001518                     	if	0	;There are less than 3 active tblptr bytes
  1292  001518                     	endif
  1293  001518  0009               	tblrd		*+
  1294  00151A  50F5               	movf	tablat,w,c
  1295  00151C  5C29               	subwf	main@x,w,c
  1296  00151E  B0D8               	btfsc	status,0,c
  1297  001520  D01B               	goto	l1915
  1298                           
  1299                           ;main.c: 78: glcdDrawPixel(x, y, x*y*16);
  1300  001522  C028  F01A         	movff	main@y,glcdDrawPixel@YS
  1301  001526  5029               	movf	main@x,w,c
  1302  001528  0228               	mulwf	main@y,c
  1303  00152A  3AF3               	swapf	prodl,f,c
  1304  00152C  3AF4               	swapf	prodh,f,c
  1305  00152E  0EF0               	movlw	240
  1306  001530  16F4               	andwf	prodh,f,c
  1307  001532  50F3               	movf	prodl,w,c
  1308  001534  0B0F               	andlw	15
  1309  001536  12F4               	iorwf	prodh,f,c
  1310  001538  0EF0               	movlw	240
  1311  00153A  16F3               	andwf	prodl,f,c
  1312  00153C  CFF3 F01B          	movff	prodl,glcdDrawPixel@color
  1313  001540  CFF4 F01C          	movff	prodh,glcdDrawPixel@color+1
  1314  001544  0E00               	movlw	0
  1315  001546  BE1C               	btfsc	glcdDrawPixel@color+1,7,c
  1316  001548  0EFF               	movlw	-1
  1317  00154A  6E1D               	movwf	glcdDrawPixel@color+2,c
  1318  00154C  6E1E               	movwf	glcdDrawPixel@color+3,c
  1319  00154E  5029               	movf	main@x,w,c
  1320  001550  ECF7  F00D         	call	_glcdDrawPixel
  1321  001554  2A29               	incf	main@x,f,c
  1322  001556  D7DC               	goto	l1905
  1323  001558                     l1915:
  1324  001558  2A28               	incf	main@y,f,c
  1325  00155A  D7CF               	goto	l1899
  1326  00155C                     l1919:
  1327                           
  1328                           ;main.c: 79: }
  1329                           ;main.c: 80: }
  1330                           ;main.c: 83: for(y = 0; y < GLCD_SIZE_VERT; y++){
  1331  00155C  0E00               	movlw	0
  1332  00155E  6E28               	movwf	main@y,c
  1333  001560                     l1921:
  1334  001560  0E4B               	movlw	low _GLCD_SIZE_VERT
  1335  001562  6EF6               	movwf	tblptrl,c
  1336  001564                     	if	1	;There is more than 1 active tblptr byte
  1337  001564  0E10               	movlw	high _GLCD_SIZE_VERT
  1338  001566  6EF7               	movwf	tblptrh,c
  1339  001568                     	endif
  1340  001568                     	if	0	;There are less than 3 active tblptr bytes
  1341  001568                     	endif
  1342  001568  0009               	tblrd		*+
  1343  00156A  50F5               	movf	tablat,w,c
  1344  00156C  5C28               	subwf	main@y,w,c
  1345  00156E  B0D8               	btfsc	status,0,c
  1346  001570  D033               	goto	l1943
  1347                           
  1348                           ;main.c: 84: for(x = 0; x < GLCD_SIZE_HORZ; x++){
  1349  001572  0E00               	movlw	0
  1350  001574  6E29               	movwf	main@x,c
  1351  001576                     l1927:
  1352  001576  0E4C               	movlw	low _GLCD_SIZE_HORZ
  1353  001578  6EF6               	movwf	tblptrl,c
  1354  00157A                     	if	1	;There is more than 1 active tblptr byte
  1355  00157A  0E10               	movlw	high _GLCD_SIZE_HORZ
  1356  00157C  6EF7               	movwf	tblptrh,c
  1357  00157E                     	endif
  1358  00157E                     	if	0	;There are less than 3 active tblptr bytes
  1359  00157E                     	endif
  1360  00157E  0009               	tblrd		*+
  1361  001580  50F5               	movf	tablat,w,c
  1362  001582  5C29               	subwf	main@x,w,c
  1363  001584  B0D8               	btfsc	status,0,c
  1364  001586  D026               	goto	l1939
  1365                           
  1366                           ;main.c: 85: glcdDrawPixel(x, y, (x+8)*(y+8));
  1367  001588  0E08               	movlw	8
  1368  00158A  2429               	addwf	main@x,w,c
  1369  00158C  6E01               	movwf	___wmul@multiplier,c
  1370  00158E  6A02               	clrf	___wmul@multiplier+1,c
  1371  001590  0E00               	movlw	0
  1372  001592  2202               	addwfc	___wmul@multiplier+1,f,c
  1373  001594  0E08               	movlw	8
  1374  001596  2428               	addwf	main@y,w,c
  1375  001598  6E03               	movwf	___wmul@multiplicand,c
  1376  00159A  6A04               	clrf	___wmul@multiplicand+1,c
  1377  00159C  0E00               	movlw	0
  1378  00159E  2204               	addwfc	___wmul@multiplicand+1,f,c
  1379  0015A0  ECD5  F00E         	call	___wmul	;wreg free
  1380  0015A4  C001  F024         	movff	?___wmul,_main$1162
  1381  0015A8  C002  F025         	movff	?___wmul+1,_main$1162+1
  1382  0015AC  0E00               	movlw	0
  1383  0015AE  BE25               	btfsc	_main$1162+1,7,c
  1384  0015B0  0EFF               	movlw	-1
  1385  0015B2  6E26               	movwf	_main$1162+2,c
  1386  0015B4  6E27               	movwf	_main$1162+3,c
  1387                           
  1388                           ;main.c: 85: glcdDrawPixel(x, y, (x+8)*(y+8));
  1389  0015B6  C028  F01A         	movff	main@y,glcdDrawPixel@YS
  1390  0015BA  C024  F01B         	movff	_main$1162,glcdDrawPixel@color
  1391  0015BE  C025  F01C         	movff	_main$1162+1,glcdDrawPixel@color+1
  1392  0015C2  C026  F01D         	movff	_main$1162+2,glcdDrawPixel@color+2
  1393  0015C6  C027  F01E         	movff	_main$1162+3,glcdDrawPixel@color+3
  1394  0015CA  5029               	movf	main@x,w,c
  1395  0015CC  ECF7  F00D         	call	_glcdDrawPixel
  1396  0015D0  2A29               	incf	main@x,f,c
  1397  0015D2  D7D1               	goto	l1927
  1398  0015D4                     l1939:
  1399  0015D4  2A28               	incf	main@y,f,c
  1400  0015D6  D7C4               	goto	l1921
  1401  0015D8                     l1943:
  1402                           
  1403                           ;main.c: 86: }
  1404                           ;main.c: 87: }
  1405                           ;main.c: 95: for(y = 0; y < GLCD_SIZE_VERT; y++){
  1406  0015D8  0E00               	movlw	0
  1407  0015DA  6E28               	movwf	main@y,c
  1408  0015DC                     l1945:
  1409  0015DC  0E4B               	movlw	low _GLCD_SIZE_VERT
  1410  0015DE  6EF6               	movwf	tblptrl,c
  1411  0015E0                     	if	1	;There is more than 1 active tblptr byte
  1412  0015E0  0E10               	movlw	high _GLCD_SIZE_VERT
  1413  0015E2  6EF7               	movwf	tblptrh,c
  1414  0015E4                     	endif
  1415  0015E4                     	if	0	;There are less than 3 active tblptr bytes
  1416  0015E4                     	endif
  1417  0015E4  0009               	tblrd		*+
  1418  0015E6  50F5               	movf	tablat,w,c
  1419  0015E8  5C28               	subwf	main@y,w,c
  1420  0015EA  B0D8               	btfsc	status,0,c
  1421  0015EC  D024               	goto	l1965
  1422                           
  1423                           ;main.c: 96: for(x = 0; x < GLCD_SIZE_HORZ; x++){
  1424  0015EE  0E00               	movlw	0
  1425  0015F0  6E29               	movwf	main@x,c
  1426  0015F2                     l1951:
  1427  0015F2  0E4C               	movlw	low _GLCD_SIZE_HORZ
  1428  0015F4  6EF6               	movwf	tblptrl,c
  1429  0015F6                     	if	1	;There is more than 1 active tblptr byte
  1430  0015F6  0E10               	movlw	high _GLCD_SIZE_HORZ
  1431  0015F8  6EF7               	movwf	tblptrh,c
  1432  0015FA                     	endif
  1433  0015FA                     	if	0	;There are less than 3 active tblptr bytes
  1434  0015FA                     	endif
  1435  0015FA  0009               	tblrd		*+
  1436  0015FC  50F5               	movf	tablat,w,c
  1437  0015FE  5C29               	subwf	main@x,w,c
  1438  001600  B0D8               	btfsc	status,0,c
  1439  001602  D017               	goto	l1961
  1440                           
  1441                           ;main.c: 97: glcdDrawPixel(x, y, GREEN);
  1442  001604  C028  F01A         	movff	main@y,glcdDrawPixel@YS
  1443  001608  0E19               	movlw	low _GREEN
  1444  00160A  6EF6               	movwf	tblptrl,c
  1445  00160C                     	if	1	;There is more than 1 active tblptr byte
  1446  00160C  0E10               	movlw	high _GREEN
  1447  00160E  6EF7               	movwf	tblptrh,c
  1448  001610                     	endif
  1449  001610                     	if	0	;There are less than 3 active tblptr bytes
  1450  001610                     	endif
  1451  001610  0009               	tblrd		*+
  1452  001612  CFF5 F01B          	movff	tablat,glcdDrawPixel@color
  1453  001616  0009               	tblrd		*+
  1454  001618  CFF5 F01C          	movff	tablat,glcdDrawPixel@color+1
  1455  00161C  0009               	tblrd		*+
  1456  00161E  CFF5 F01D          	movff	tablat,glcdDrawPixel@color+2
  1457  001622  000A               	tblrd		*-
  1458  001624  CFF5 F01E          	movff	tablat,glcdDrawPixel@color+3
  1459  001628  5029               	movf	main@x,w,c
  1460  00162A  ECF7  F00D         	call	_glcdDrawPixel
  1461  00162E  2A29               	incf	main@x,f,c
  1462  001630  D7E0               	goto	l1951
  1463  001632                     l1961:
  1464  001632  2A28               	incf	main@y,f,c
  1465  001634  D7D3               	goto	l1945
  1466  001636                     l1965:
  1467                           
  1468                           ;main.c: 98: }
  1469                           ;main.c: 99: }
  1470                           ;main.c: 105: glcdDrawRectangle(0, GLCD_SIZE_HORZ, 0, GLCD_SIZE_VERT, BLACK);
  1471  001636  0E4C               	movlw	low _GLCD_SIZE_HORZ
  1472  001638  6EF6               	movwf	tblptrl,c
  1473  00163A                     	if	1	;There is more than 1 active tblptr byte
  1474  00163A  0E10               	movlw	high _GLCD_SIZE_HORZ
  1475  00163C  6EF7               	movwf	tblptrh,c
  1476  00163E                     	endif
  1477  00163E                     	if	0	;There are less than 3 active tblptr bytes
  1478  00163E                     	endif
  1479  00163E  0008               	tblrd		*
  1480  001640  CFF5 F007          	movff	tablat,glcdDrawRectangle@XE
  1481  001644  0E00               	movlw	0
  1482  001646  6E08               	movwf	glcdDrawRectangle@YS,c
  1483  001648  0E4B               	movlw	low _GLCD_SIZE_VERT
  1484  00164A  6EF6               	movwf	tblptrl,c
  1485  00164C                     	if	1	;There is more than 1 active tblptr byte
  1486  00164C  0E10               	movlw	high _GLCD_SIZE_VERT
  1487  00164E  6EF7               	movwf	tblptrh,c
  1488  001650                     	endif
  1489  001650                     	if	0	;There are less than 3 active tblptr bytes
  1490  001650                     	endif
  1491  001650  0008               	tblrd		*
  1492  001652  CFF5 F009          	movff	tablat,glcdDrawRectangle@YE
  1493  001656  0E05               	movlw	low _BLACK
  1494  001658  6EF6               	movwf	tblptrl,c
  1495  00165A                     	if	1	;There is more than 1 active tblptr byte
  1496  00165A  0E10               	movlw	high _BLACK
  1497  00165C  6EF7               	movwf	tblptrh,c
  1498  00165E                     	endif
  1499  00165E                     	if	0	;There are less than 3 active tblptr bytes
  1500  00165E                     	endif
  1501  00165E  0009               	tblrd		*+
  1502  001660  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
  1503  001664  0009               	tblrd		*+
  1504  001666  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
  1505  00166A  0009               	tblrd		*+
  1506  00166C  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
  1507  001670  000A               	tblrd		*-
  1508  001672  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
  1509  001676  0E00               	movlw	0
  1510  001678  ECC5  F00C         	call	_glcdDrawRectangle
  1511                           
  1512                           ;main.c: 106: for(y = 0; y < 5; y++){
  1513  00167C  0E00               	movlw	0
  1514  00167E  6E28               	movwf	main@y,c
  1515  001680                     l1969:
  1516  001680  0E04               	movlw	4
  1517  001682  6428               	cpfsgt	main@y,c
  1518  001684  D001               	goto	l1973
  1519  001686  D03C               	goto	l2001
  1520  001688                     l1973:
  1521                           
  1522                           ;main.c: 107: for(x = 0; x < GLCD_SIZE_HORZ; x++){
  1523  001688  0E00               	movlw	0
  1524  00168A  6E29               	movwf	main@x,c
  1525  00168C                     l1975:
  1526  00168C  0E4C               	movlw	low _GLCD_SIZE_HORZ
  1527  00168E  6EF6               	movwf	tblptrl,c
  1528  001690                     	if	1	;There is more than 1 active tblptr byte
  1529  001690  0E10               	movlw	high _GLCD_SIZE_HORZ
  1530  001692  6EF7               	movwf	tblptrh,c
  1531  001694                     	endif
  1532  001694                     	if	0	;There are less than 3 active tblptr bytes
  1533  001694                     	endif
  1534  001694  0009               	tblrd		*+
  1535  001696  50F5               	movf	tablat,w,c
  1536  001698  5C29               	subwf	main@x,w,c
  1537  00169A  B0D8               	btfsc	status,0,c
  1538  00169C  D01F               	goto	l1987
  1539                           
  1540                           ;main.c: 108: glcdDrawPixel(x, y, WHITE);
  1541  00169E  C028  F01A         	movff	main@y,glcdDrawPixel@YS
  1542  0016A2  0E09               	movlw	low _WHITE
  1543  0016A4  6EF6               	movwf	tblptrl,c
  1544  0016A6                     	if	1	;There is more than 1 active tblptr byte
  1545  0016A6  0E10               	movlw	high _WHITE
  1546  0016A8  6EF7               	movwf	tblptrh,c
  1547  0016AA                     	endif
  1548  0016AA                     	if	0	;There are less than 3 active tblptr bytes
  1549  0016AA                     	endif
  1550  0016AA  0009               	tblrd		*+
  1551  0016AC  CFF5 F01B          	movff	tablat,glcdDrawPixel@color
  1552  0016B0  0009               	tblrd		*+
  1553  0016B2  CFF5 F01C          	movff	tablat,glcdDrawPixel@color+1
  1554  0016B6  0009               	tblrd		*+
  1555  0016B8  CFF5 F01D          	movff	tablat,glcdDrawPixel@color+2
  1556  0016BC  000A               	tblrd		*-
  1557  0016BE  CFF5 F01E          	movff	tablat,glcdDrawPixel@color+3
  1558  0016C2  5029               	movf	main@x,w,c
  1559  0016C4  ECF7  F00D         	call	_glcdDrawPixel
  1560                           
  1561                           ;main.c: 109: _delay((unsigned long)((5)*(10000000/4000.0)));
  1562  0016C8  0E11               	movlw	17
  1563  0016CA  6E21               	movwf	??_main& (0+255),c
  1564  0016CC  0E3A               	movlw	58
  1565  0016CE                     u987:
  1566  0016CE  2EE8               	decfsz	wreg,f,c
  1567  0016D0  D7FE               	bra	u987
  1568  0016D2  2E21               	decfsz	??_main& (0+255),f,c
  1569  0016D4  D7FC               	bra	u987
  1570  0016D6  D000               	nop2	
  1571  0016D8  2A29               	incf	main@x,f,c
  1572  0016DA  D7D8               	goto	l1975
  1573  0016DC                     l1987:
  1574  0016DC  2A28               	incf	main@y,f,c
  1575  0016DE  D7D0               	goto	l1969
  1576  0016E0                     l1991:
  1577                           
  1578                           ;main.c: 116: glcdSetOrigin(ORIGIN_TOP_RIGHT);
  1579  0016E0  0E01               	movlw	1
  1580  0016E2  EC56  F00E         	call	_glcdSetOrigin
  1581                           
  1582                           ;main.c: 117: break;
  1583  0016E6  D021               	goto	l2003
  1584  0016E8                     l1993:
  1585                           
  1586                           ;main.c: 119: glcdSetOrigin(ORIGIN_BOTTOM_RIGHT);
  1587  0016E8  0E03               	movlw	3
  1588  0016EA  EC56  F00E         	call	_glcdSetOrigin
  1589                           
  1590                           ;main.c: 120: break;
  1591  0016EE  D01D               	goto	l2003
  1592  0016F0                     l1995:
  1593                           
  1594                           ;main.c: 122: glcdSetOrigin(ORIGIN_BOTTOM_LEFT);
  1595  0016F0  0E02               	movlw	2
  1596  0016F2  EC56  F00E         	call	_glcdSetOrigin
  1597                           
  1598                           ;main.c: 123: break;
  1599  0016F6  D019               	goto	l2003
  1600  0016F8                     l1997:
  1601                           
  1602                           ;main.c: 125: glcdSetOrigin(ORIGIN_TOP_LEFT);
  1603  0016F8  0E00               	movlw	0
  1604  0016FA  EC56  F00E         	call	_glcdSetOrigin
  1605                           
  1606                           ;main.c: 127: }
  1607                           
  1608                           ;main.c: 126: break;
  1609  0016FE  D015               	goto	l2003
  1610  001700                     l2001:
  1611  001700  5023               	movf	main@iteration,w,c
  1612  001702  0B03               	andlw	3
  1613  001704  6E21               	movwf	??_main& (0+255),c
  1614  001706  6A22               	clrf	(??_main+1)& (0+255),c
  1615                           
  1616                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1617                           ; Switch size 1, requested type "space"
  1618                           ; Number of cases is 1, Range of values is 0 to 0
  1619                           ; switch strategies available:
  1620                           ; Name         Instructions Cycles
  1621                           ; simple_byte            4     3 (average)
  1622                           ;	Chosen strategy is simple_byte
  1623  001708  5022               	movf	??_main+1,w,c
  1624  00170A  0A00               	xorlw	0	; case 0
  1625  00170C  A4D8               	btfss	status,2,c
  1626  00170E  D00D               	goto	l2003
  1627                           
  1628                           ; Switch size 1, requested type "space"
  1629                           ; Number of cases is 4, Range of values is 0 to 3
  1630                           ; switch strategies available:
  1631                           ; Name         Instructions Cycles
  1632                           ; simple_byte           13     7 (average)
  1633                           ;	Chosen strategy is simple_byte
  1634  001710  5021               	movf	??_main,w,c
  1635  001712  0A00               	xorlw	0	; case 0
  1636  001714  B4D8               	btfsc	status,2,c
  1637  001716  D7E4               	goto	l1991
  1638  001718  0A01               	xorlw	1	; case 1
  1639  00171A  B4D8               	btfsc	status,2,c
  1640  00171C  D7E5               	goto	l1993
  1641  00171E  0A03               	xorlw	3	; case 2
  1642  001720  B4D8               	btfsc	status,2,c
  1643  001722  D7E6               	goto	l1995
  1644  001724  0A01               	xorlw	1	; case 3
  1645  001726  B4D8               	btfsc	status,2,c
  1646  001728  D7E7               	goto	l1997
  1647  00172A                     l2003:
  1648                           
  1649                           ;main.c: 128: iteration++;
  1650  00172A  2A23               	incf	main@iteration,f,c
  1651  00172C  D49C               	goto	l1833
  1652  00172E                     __end_of_main:
  1653                           	opt stack 0
  1654                           tblptru	equ	0xFF8
  1655                           tblptrh	equ	0xFF7
  1656                           tblptrl	equ	0xFF6
  1657                           tablat	equ	0xFF5
  1658                           prodh	equ	0xFF4
  1659                           prodl	equ	0xFF3
  1660                           wreg	equ	0xFE8
  1661                           status	equ	0xFD8
  1662                           
  1663 ;; *************** function _initGLCD *****************
  1664 ;; Defined at:
  1665 ;;		line 358 in file "GLCD_PIC.c"
  1666 ;; Parameters:    Size  Location     Type
  1667 ;;		None
  1668 ;; Auto vars:     Size  Location     Type
  1669 ;;		None
  1670 ;; Return value:  Size  Location     Type
  1671 ;;                  1    wreg      void 
  1672 ;; Registers used:
  1673 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1674 ;; Tracked objects:
  1675 ;;		On entry : 0/0
  1676 ;;		On exit  : 0/0
  1677 ;;		Unchanged: 0/0
  1678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1680 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1681 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1682 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1683 ;;Total ram usage:        1 bytes
  1684 ;; Hardware stack levels used:    1
  1685 ;; Hardware stack levels required when called:    5
  1686 ;; This function calls:
  1687 ;;		_glcdDrawRectangle
  1688 ;;		_glcdSetCOLMOD
  1689 ;;		_glcdTransfer
  1690 ;;		_glcd_dispon
  1691 ;;		_glcd_idmoff
  1692 ;;		_glcd_invoff
  1693 ;;		_glcd_noron
  1694 ;;		_glcd_setmadctl
  1695 ;;		_glcd_slpout
  1696 ;;		_glcd_swreset
  1697 ;;		_spiInit
  1698 ;; This function is called by:
  1699 ;;		_main
  1700 ;; This function uses a non-reentrant model
  1701 ;;
  1702                           
  1703                           	psect	text1
  1704  00172E                     __ptext1:
  1705                           	opt stack 0
  1706  00172E                     _initGLCD:
  1707                           	opt stack 25
  1708                           
  1709                           ;GLCD_PIC.c: 360: LATDbits.LATD0 = 1;
  1710                           
  1711                           ;incstack = 0
  1712  00172E  808C               	bsf	3980,0,c	;volatile
  1713                           
  1714                           ;GLCD_PIC.c: 361: LATDbits.LATD1 = 1;
  1715  001730  828C               	bsf	3980,1,c	;volatile
  1716                           
  1717                           ;GLCD_PIC.c: 362: TRISDbits.TRISD0 = 0;
  1718  001732  9095               	bcf	3989,0,c	;volatile
  1719                           
  1720                           ;GLCD_PIC.c: 363: TRISDbits.TRISD1 = 0;
  1721  001734  9295               	bcf	3989,1,c	;volatile
  1722                           
  1723                           ;GLCD_PIC.c: 366: spiInit(4);
  1724  001736  0E04               	movlw	4
  1725  001738  EC77  F00E         	call	_spiInit
  1726                           
  1727                           ;GLCD_PIC.c: 370: _delay((unsigned long)((20)*(10000000/4000.0)));
  1728  00173C  0E41               	movlw	65
  1729  00173E  6E1A               	movwf	??_initGLCD& (0+255),c
  1730  001740  0EEE               	movlw	238
  1731  001742                     u997:
  1732  001742  2EE8               	decfsz	wreg,f,c
  1733  001744  D7FE               	bra	u997
  1734  001746  2E1A               	decfsz	??_initGLCD& (0+255),f,c
  1735  001748  D7FC               	bra	u997
  1736  00174A  D000               	nop2	
  1737                           
  1738                           ;GLCD_PIC.c: 373: glcd_swreset();
  1739  00174C  EC93  F00E         	call	_glcd_swreset	;wreg free
  1740                           
  1741                           ;GLCD_PIC.c: 375: glcd_slpout();
  1742  001750  ECAA  F00E         	call	_glcd_slpout	;wreg free
  1743                           
  1744                           ;GLCD_PIC.c: 378: glcdTransfer(INST_FRMCTR1, CMD);
  1745  001754  0E01               	movlw	1
  1746  001756  6E04               	movwf	glcdTransfer@cmd,c
  1747  001758  0E33               	movlw	low _INST_FRMCTR1
  1748  00175A  6EF6               	movwf	tblptrl,c
  1749  00175C                     	if	1	;There is more than 1 active tblptr byte
  1750  00175C  0E10               	movlw	high _INST_FRMCTR1
  1751  00175E  6EF7               	movwf	tblptrh,c
  1752  001760                     	endif
  1753  001760                     	if	0	;There are less than 3 active tblptr bytes
  1754  001760                     	endif
  1755  001760  0008               	tblrd		*
  1756  001762  50F5               	movf	tablat,w,c
  1757  001764  ECC1  F00E         	call	_glcdTransfer
  1758                           
  1759                           ;GLCD_PIC.c: 379: glcdTransfer(0x00, MEMWRITE);
  1760  001768  0E00               	movlw	0
  1761  00176A  6E04               	movwf	glcdTransfer@cmd,c
  1762  00176C  0E00               	movlw	0
  1763  00176E  ECC1  F00E         	call	_glcdTransfer
  1764                           
  1765                           ;GLCD_PIC.c: 380: glcdTransfer(0x06, MEMWRITE);
  1766  001772  0E00               	movlw	0
  1767  001774  6E04               	movwf	glcdTransfer@cmd,c
  1768  001776  0E06               	movlw	6
  1769  001778  ECC1  F00E         	call	_glcdTransfer
  1770                           
  1771                           ;GLCD_PIC.c: 381: glcdTransfer(0x03, MEMWRITE);
  1772  00177C  0E00               	movlw	0
  1773  00177E  6E04               	movwf	glcdTransfer@cmd,c
  1774  001780  0E03               	movlw	3
  1775  001782  ECC1  F00E         	call	_glcdTransfer
  1776                           
  1777                           ;GLCD_PIC.c: 383: glcdTransfer(INST_FRMCTR2, CMD);
  1778  001786  0E01               	movlw	1
  1779  001788  6E04               	movwf	glcdTransfer@cmd,c
  1780  00178A  0E32               	movlw	low _INST_FRMCTR2
  1781  00178C  6EF6               	movwf	tblptrl,c
  1782  00178E                     	if	1	;There is more than 1 active tblptr byte
  1783  00178E  0E10               	movlw	high _INST_FRMCTR2
  1784  001790  6EF7               	movwf	tblptrh,c
  1785  001792                     	endif
  1786  001792                     	if	0	;There are less than 3 active tblptr bytes
  1787  001792                     	endif
  1788  001792  0008               	tblrd		*
  1789  001794  50F5               	movf	tablat,w,c
  1790  001796  ECC1  F00E         	call	_glcdTransfer
  1791                           
  1792                           ;GLCD_PIC.c: 384: glcdTransfer(0x01, MEMWRITE);
  1793  00179A  0E00               	movlw	0
  1794  00179C  6E04               	movwf	glcdTransfer@cmd,c
  1795  00179E  0E01               	movlw	1
  1796  0017A0  ECC1  F00E         	call	_glcdTransfer
  1797                           
  1798                           ;GLCD_PIC.c: 385: glcdTransfer(0x2C, MEMWRITE);
  1799  0017A4  0E00               	movlw	0
  1800  0017A6  6E04               	movwf	glcdTransfer@cmd,c
  1801  0017A8  0E2C               	movlw	44
  1802  0017AA  ECC1  F00E         	call	_glcdTransfer
  1803                           
  1804                           ;GLCD_PIC.c: 386: glcdTransfer(0x2D, MEMWRITE);
  1805  0017AE  0E00               	movlw	0
  1806  0017B0  6E04               	movwf	glcdTransfer@cmd,c
  1807  0017B2  0E2D               	movlw	45
  1808  0017B4  ECC1  F00E         	call	_glcdTransfer
  1809                           
  1810                           ;GLCD_PIC.c: 388: glcdTransfer(INST_FRMCTR3, CMD);
  1811  0017B8  0E01               	movlw	1
  1812  0017BA  6E04               	movwf	glcdTransfer@cmd,c
  1813  0017BC  0E31               	movlw	low _INST_FRMCTR3
  1814  0017BE  6EF6               	movwf	tblptrl,c
  1815  0017C0                     	if	1	;There is more than 1 active tblptr byte
  1816  0017C0  0E10               	movlw	high _INST_FRMCTR3
  1817  0017C2  6EF7               	movwf	tblptrh,c
  1818  0017C4                     	endif
  1819  0017C4                     	if	0	;There are less than 3 active tblptr bytes
  1820  0017C4                     	endif
  1821  0017C4  0008               	tblrd		*
  1822  0017C6  50F5               	movf	tablat,w,c
  1823  0017C8  ECC1  F00E         	call	_glcdTransfer
  1824                           
  1825                           ;GLCD_PIC.c: 389: glcdTransfer(0x01, MEMWRITE);
  1826  0017CC  0E00               	movlw	0
  1827  0017CE  6E04               	movwf	glcdTransfer@cmd,c
  1828  0017D0  0E01               	movlw	1
  1829  0017D2  ECC1  F00E         	call	_glcdTransfer
  1830                           
  1831                           ;GLCD_PIC.c: 390: glcdTransfer(0x2C, MEMWRITE);
  1832  0017D6  0E00               	movlw	0
  1833  0017D8  6E04               	movwf	glcdTransfer@cmd,c
  1834  0017DA  0E2C               	movlw	44
  1835  0017DC  ECC1  F00E         	call	_glcdTransfer
  1836                           
  1837                           ;GLCD_PIC.c: 391: glcdTransfer(0x2D, MEMWRITE);
  1838  0017E0  0E00               	movlw	0
  1839  0017E2  6E04               	movwf	glcdTransfer@cmd,c
  1840  0017E4  0E2D               	movlw	45
  1841  0017E6  ECC1  F00E         	call	_glcdTransfer
  1842                           
  1843                           ;GLCD_PIC.c: 393: glcdTransfer(INST_INVCTR, CMD);
  1844  0017EA  0E01               	movlw	1
  1845  0017EC  6E04               	movwf	glcdTransfer@cmd,c
  1846  0017EE  0E30               	movlw	low _INST_INVCTR
  1847  0017F0  6EF6               	movwf	tblptrl,c
  1848  0017F2                     	if	1	;There is more than 1 active tblptr byte
  1849  0017F2  0E10               	movlw	high _INST_INVCTR
  1850  0017F4  6EF7               	movwf	tblptrh,c
  1851  0017F6                     	endif
  1852  0017F6                     	if	0	;There are less than 3 active tblptr bytes
  1853  0017F6                     	endif
  1854  0017F6  0008               	tblrd		*
  1855  0017F8  50F5               	movf	tablat,w,c
  1856  0017FA  ECC1  F00E         	call	_glcdTransfer
  1857                           
  1858                           ;GLCD_PIC.c: 394: glcdTransfer(0x00, MEMWRITE);
  1859  0017FE  0E00               	movlw	0
  1860  001800  6E04               	movwf	glcdTransfer@cmd,c
  1861  001802  0E00               	movlw	0
  1862  001804  ECC1  F00E         	call	_glcdTransfer
  1863                           
  1864                           ;GLCD_PIC.c: 397: glcdTransfer(INST_PWCTR1, CMD);
  1865  001808  0E01               	movlw	1
  1866  00180A  6E04               	movwf	glcdTransfer@cmd,c
  1867  00180C  0E2F               	movlw	low _INST_PWCTR1
  1868  00180E  6EF6               	movwf	tblptrl,c
  1869  001810                     	if	1	;There is more than 1 active tblptr byte
  1870  001810  0E10               	movlw	high _INST_PWCTR1
  1871  001812  6EF7               	movwf	tblptrh,c
  1872  001814                     	endif
  1873  001814                     	if	0	;There are less than 3 active tblptr bytes
  1874  001814                     	endif
  1875  001814  0008               	tblrd		*
  1876  001816  50F5               	movf	tablat,w,c
  1877  001818  ECC1  F00E         	call	_glcdTransfer
  1878                           
  1879                           ;GLCD_PIC.c: 398: glcdTransfer(0xA2, MEMWRITE);
  1880  00181C  0E00               	movlw	0
  1881  00181E  6E04               	movwf	glcdTransfer@cmd,c
  1882  001820  0EA2               	movlw	162
  1883  001822  ECC1  F00E         	call	_glcdTransfer
  1884                           
  1885                           ;GLCD_PIC.c: 399: glcdTransfer(0x02, MEMWRITE);
  1886  001826  0E00               	movlw	0
  1887  001828  6E04               	movwf	glcdTransfer@cmd,c
  1888  00182A  0E02               	movlw	2
  1889  00182C  ECC1  F00E         	call	_glcdTransfer
  1890                           
  1891                           ;GLCD_PIC.c: 400: glcdTransfer(0x84, MEMWRITE);
  1892  001830  0E00               	movlw	0
  1893  001832  6E04               	movwf	glcdTransfer@cmd,c
  1894  001834  0E84               	movlw	132
  1895  001836  ECC1  F00E         	call	_glcdTransfer
  1896                           
  1897                           ;GLCD_PIC.c: 402: glcdTransfer(INST_PWCTR2, CMD);
  1898  00183A  0E01               	movlw	1
  1899  00183C  6E04               	movwf	glcdTransfer@cmd,c
  1900  00183E  0E2E               	movlw	low _INST_PWCTR2
  1901  001840  6EF6               	movwf	tblptrl,c
  1902  001842                     	if	1	;There is more than 1 active tblptr byte
  1903  001842  0E10               	movlw	high _INST_PWCTR2
  1904  001844  6EF7               	movwf	tblptrh,c
  1905  001846                     	endif
  1906  001846                     	if	0	;There are less than 3 active tblptr bytes
  1907  001846                     	endif
  1908  001846  0008               	tblrd		*
  1909  001848  50F5               	movf	tablat,w,c
  1910  00184A  ECC1  F00E         	call	_glcdTransfer
  1911                           
  1912                           ;GLCD_PIC.c: 403: glcdTransfer(0xC5, MEMWRITE);
  1913  00184E  0E00               	movlw	0
  1914  001850  6E04               	movwf	glcdTransfer@cmd,c
  1915  001852  0EC5               	movlw	197
  1916  001854  ECC1  F00E         	call	_glcdTransfer
  1917                           
  1918                           ;GLCD_PIC.c: 405: glcdTransfer(INST_PWCTR3, CMD);
  1919  001858  0E01               	movlw	1
  1920  00185A  6E04               	movwf	glcdTransfer@cmd,c
  1921  00185C  0E2D               	movlw	low _INST_PWCTR3
  1922  00185E  6EF6               	movwf	tblptrl,c
  1923  001860                     	if	1	;There is more than 1 active tblptr byte
  1924  001860  0E10               	movlw	high _INST_PWCTR3
  1925  001862  6EF7               	movwf	tblptrh,c
  1926  001864                     	endif
  1927  001864                     	if	0	;There are less than 3 active tblptr bytes
  1928  001864                     	endif
  1929  001864  0008               	tblrd		*
  1930  001866  50F5               	movf	tablat,w,c
  1931  001868  ECC1  F00E         	call	_glcdTransfer
  1932                           
  1933                           ;GLCD_PIC.c: 406: glcdTransfer(0x0A, MEMWRITE);
  1934  00186C  0E00               	movlw	0
  1935  00186E  6E04               	movwf	glcdTransfer@cmd,c
  1936  001870  0E0A               	movlw	10
  1937  001872  ECC1  F00E         	call	_glcdTransfer
  1938                           
  1939                           ;GLCD_PIC.c: 407: glcdTransfer(0x00, MEMWRITE);
  1940  001876  0E00               	movlw	0
  1941  001878  6E04               	movwf	glcdTransfer@cmd,c
  1942  00187A  0E00               	movlw	0
  1943  00187C  ECC1  F00E         	call	_glcdTransfer
  1944                           
  1945                           ;GLCD_PIC.c: 409: glcdTransfer(INST_PWCTR4, CMD);
  1946  001880  0E01               	movlw	1
  1947  001882  6E04               	movwf	glcdTransfer@cmd,c
  1948  001884  0E2C               	movlw	low _INST_PWCTR4
  1949  001886  6EF6               	movwf	tblptrl,c
  1950  001888                     	if	1	;There is more than 1 active tblptr byte
  1951  001888  0E10               	movlw	high _INST_PWCTR4
  1952  00188A  6EF7               	movwf	tblptrh,c
  1953  00188C                     	endif
  1954  00188C                     	if	0	;There are less than 3 active tblptr bytes
  1955  00188C                     	endif
  1956  00188C  0008               	tblrd		*
  1957  00188E  50F5               	movf	tablat,w,c
  1958  001890  ECC1  F00E         	call	_glcdTransfer
  1959                           
  1960                           ;GLCD_PIC.c: 410: glcdTransfer(0x8A, MEMWRITE);
  1961  001894  0E00               	movlw	0
  1962  001896  6E04               	movwf	glcdTransfer@cmd,c
  1963  001898  0E8A               	movlw	138
  1964  00189A  ECC1  F00E         	call	_glcdTransfer
  1965                           
  1966                           ;GLCD_PIC.c: 411: glcdTransfer(0x2A, MEMWRITE);
  1967  00189E  0E00               	movlw	0
  1968  0018A0  6E04               	movwf	glcdTransfer@cmd,c
  1969  0018A2  0E2A               	movlw	42
  1970  0018A4  ECC1  F00E         	call	_glcdTransfer
  1971                           
  1972                           ;GLCD_PIC.c: 413: glcdTransfer(INST_PWCTR5, CMD);
  1973  0018A8  0E01               	movlw	1
  1974  0018AA  6E04               	movwf	glcdTransfer@cmd,c
  1975  0018AC  0E2B               	movlw	low _INST_PWCTR5
  1976  0018AE  6EF6               	movwf	tblptrl,c
  1977  0018B0                     	if	1	;There is more than 1 active tblptr byte
  1978  0018B0  0E10               	movlw	high _INST_PWCTR5
  1979  0018B2  6EF7               	movwf	tblptrh,c
  1980  0018B4                     	endif
  1981  0018B4                     	if	0	;There are less than 3 active tblptr bytes
  1982  0018B4                     	endif
  1983  0018B4  0008               	tblrd		*
  1984  0018B6  50F5               	movf	tablat,w,c
  1985  0018B8  ECC1  F00E         	call	_glcdTransfer
  1986                           
  1987                           ;GLCD_PIC.c: 414: glcdTransfer(0x8A, MEMWRITE);
  1988  0018BC  0E00               	movlw	0
  1989  0018BE  6E04               	movwf	glcdTransfer@cmd,c
  1990  0018C0  0E8A               	movlw	138
  1991  0018C2  ECC1  F00E         	call	_glcdTransfer
  1992                           
  1993                           ;GLCD_PIC.c: 415: glcdTransfer(0x2A, MEMWRITE);
  1994  0018C6  0E00               	movlw	0
  1995  0018C8  6E04               	movwf	glcdTransfer@cmd,c
  1996  0018CA  0E2A               	movlw	42
  1997  0018CC  ECC1  F00E         	call	_glcdTransfer
  1998                           
  1999                           ;GLCD_PIC.c: 418: glcdTransfer(INST_VMCTR1, CMD);
  2000  0018D0  0E01               	movlw	1
  2001  0018D2  6E04               	movwf	glcdTransfer@cmd,c
  2002  0018D4  0E2A               	movlw	low _INST_VMCTR1
  2003  0018D6  6EF6               	movwf	tblptrl,c
  2004  0018D8                     	if	1	;There is more than 1 active tblptr byte
  2005  0018D8  0E10               	movlw	high _INST_VMCTR1
  2006  0018DA  6EF7               	movwf	tblptrh,c
  2007  0018DC                     	endif
  2008  0018DC                     	if	0	;There are less than 3 active tblptr bytes
  2009  0018DC                     	endif
  2010  0018DC  0008               	tblrd		*
  2011  0018DE  50F5               	movf	tablat,w,c
  2012  0018E0  ECC1  F00E         	call	_glcdTransfer
  2013                           
  2014                           ;GLCD_PIC.c: 419: glcdTransfer(0x3C, MEMWRITE);
  2015  0018E4  0E00               	movlw	0
  2016  0018E6  6E04               	movwf	glcdTransfer@cmd,c
  2017  0018E8  0E3C               	movlw	60
  2018  0018EA  ECC1  F00E         	call	_glcdTransfer
  2019                           
  2020                           ;GLCD_PIC.c: 421: glcd_invoff();
  2021  0018EE  EC15  F00F         	call	_glcd_invoff	;wreg free
  2022                           
  2023                           ;GLCD_PIC.c: 429: glcdSetCOLMOD(18);
  2024  0018F2  0E12               	movlw	18
  2025  0018F4  EC2E  F00E         	call	_glcdSetCOLMOD
  2026                           
  2027                           ;GLCD_PIC.c: 432: glcdTransfer(INST_GAMSET, CMD);
  2028  0018F8  0E01               	movlw	1
  2029  0018FA  6E04               	movwf	glcdTransfer@cmd,c
  2030  0018FC  0E40               	movlw	low _INST_GAMSET
  2031  0018FE  6EF6               	movwf	tblptrl,c
  2032  001900                     	if	1	;There is more than 1 active tblptr byte
  2033  001900  0E10               	movlw	high _INST_GAMSET
  2034  001902  6EF7               	movwf	tblptrh,c
  2035  001904                     	endif
  2036  001904                     	if	0	;There are less than 3 active tblptr bytes
  2037  001904                     	endif
  2038  001904  0008               	tblrd		*
  2039  001906  50F5               	movf	tablat,w,c
  2040  001908  ECC1  F00E         	call	_glcdTransfer
  2041                           
  2042                           ;GLCD_PIC.c: 433: glcdTransfer(0x01, MEMWRITE);
  2043  00190C  0E00               	movlw	0
  2044  00190E  6E04               	movwf	glcdTransfer@cmd,c
  2045  001910  0E01               	movlw	1
  2046  001912  ECC1  F00E         	call	_glcdTransfer
  2047                           
  2048                           ;GLCD_PIC.c: 435: glcd_idmoff();
  2049  001916  EC20  F00F         	call	_glcd_idmoff	;wreg free
  2050                           
  2051                           ;GLCD_PIC.c: 437: glcd_noron();
  2052  00191A  EC0A  F00F         	call	_glcd_noron	;wreg free
  2053                           
  2054                           ;GLCD_PIC.c: 440: MADCTLbits.MX = 1;
  2055  00191E  8C2A               	bsf	_MADCTLbits,6,c
  2056                           
  2057                           ;GLCD_PIC.c: 441: MADCTLbits.MY = 1;
  2058  001920  8E2A               	bsf	_MADCTLbits,7,c
  2059                           
  2060                           ;GLCD_PIC.c: 442: MADCTLbits.MV = 1;
  2061  001922  8A2A               	bsf	_MADCTLbits,5,c
  2062                           
  2063                           ;GLCD_PIC.c: 443: MADCTLbits.ML = 0;
  2064  001924  982A               	bcf	_MADCTLbits,4,c
  2065                           
  2066                           ;GLCD_PIC.c: 444: MADCTLbits.RGB = 0;
  2067  001926  962A               	bcf	_MADCTLbits,3,c
  2068                           
  2069                           ;GLCD_PIC.c: 445: MADCTLbits.MH = 0;
  2070  001928  942A               	bcf	_MADCTLbits,2,c
  2071                           
  2072                           ;GLCD_PIC.c: 446: glcd_setmadctl();
  2073  00192A  ECFA  F00E         	call	_glcd_setmadctl	;wreg free
  2074                           
  2075                           ;GLCD_PIC.c: 450: glcdDrawRectangle(0, GLCD_SIZE_HORZ, 0, GLCD_SIZE_VERT, BLACK);
  2076  00192E  0E4C               	movlw	low _GLCD_SIZE_HORZ
  2077  001930  6EF6               	movwf	tblptrl,c
  2078  001932                     	if	1	;There is more than 1 active tblptr byte
  2079  001932  0E10               	movlw	high _GLCD_SIZE_HORZ
  2080  001934  6EF7               	movwf	tblptrh,c
  2081  001936                     	endif
  2082  001936                     	if	0	;There are less than 3 active tblptr bytes
  2083  001936                     	endif
  2084  001936  0008               	tblrd		*
  2085  001938  CFF5 F007          	movff	tablat,glcdDrawRectangle@XE
  2086  00193C  0E00               	movlw	0
  2087  00193E  6E08               	movwf	glcdDrawRectangle@YS,c
  2088  001940  0E4B               	movlw	low _GLCD_SIZE_VERT
  2089  001942  6EF6               	movwf	tblptrl,c
  2090  001944                     	if	1	;There is more than 1 active tblptr byte
  2091  001944  0E10               	movlw	high _GLCD_SIZE_VERT
  2092  001946  6EF7               	movwf	tblptrh,c
  2093  001948                     	endif
  2094  001948                     	if	0	;There are less than 3 active tblptr bytes
  2095  001948                     	endif
  2096  001948  0008               	tblrd		*
  2097  00194A  CFF5 F009          	movff	tablat,glcdDrawRectangle@YE
  2098  00194E  0E05               	movlw	low _BLACK
  2099  001950  6EF6               	movwf	tblptrl,c
  2100  001952                     	if	1	;There is more than 1 active tblptr byte
  2101  001952  0E10               	movlw	high _BLACK
  2102  001954  6EF7               	movwf	tblptrh,c
  2103  001956                     	endif
  2104  001956                     	if	0	;There are less than 3 active tblptr bytes
  2105  001956                     	endif
  2106  001956  0009               	tblrd		*+
  2107  001958  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
  2108  00195C  0009               	tblrd		*+
  2109  00195E  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
  2110  001962  0009               	tblrd		*+
  2111  001964  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
  2112  001968  000A               	tblrd		*-
  2113  00196A  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
  2114  00196E  0E00               	movlw	0
  2115  001970  ECC5  F00C         	call	_glcdDrawRectangle
  2116                           
  2117                           ;GLCD_PIC.c: 452: glcd_dispon();
  2118  001974  EC2B  F00F         	call	_glcd_dispon	;wreg free
  2119                           
  2120                           ;GLCD_PIC.c: 453: _delay((unsigned long)((10)*(10000000/4000.0)));
  2121  001978  0E21               	movlw	33
  2122  00197A  6E1A               	movwf	??_initGLCD& (0+255),c
  2123  00197C  0E76               	movlw	118
  2124  00197E                     u1007:
  2125  00197E  2EE8               	decfsz	wreg,f,c
  2126  001980  D7FE               	bra	u1007
  2127  001982  2E1A               	decfsz	??_initGLCD& (0+255),f,c
  2128  001984  D7FC               	bra	u1007
  2129  001986  D000               	nop2	
  2130  001988  0012               	return		;funcret
  2131  00198A                     __end_of_initGLCD:
  2132                           	opt stack 0
  2133                           tblptru	equ	0xFF8
  2134                           tblptrh	equ	0xFF7
  2135                           tblptrl	equ	0xFF6
  2136                           tablat	equ	0xFF5
  2137                           prodh	equ	0xFF4
  2138                           prodl	equ	0xFF3
  2139                           wreg	equ	0xFE8
  2140                           status	equ	0xFD8
  2141                           
  2142 ;; *************** function _spiInit *****************
  2143 ;; Defined at:
  2144 ;;		line 37 in file "SPI_PIC.c"
  2145 ;; Parameters:    Size  Location     Type
  2146 ;;  divider         1    wreg     unsigned char 
  2147 ;; Auto vars:     Size  Location     Type
  2148 ;;  divider         1    0[COMRAM] unsigned char 
  2149 ;; Return value:  Size  Location     Type
  2150 ;;                  1    wreg      void 
  2151 ;; Registers used:
  2152 ;;		wreg, status,2, status,0
  2153 ;; Tracked objects:
  2154 ;;		On entry : 0/0
  2155 ;;		On exit  : 0/0
  2156 ;;		Unchanged: 0/0
  2157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2159 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2161 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2162 ;;Total ram usage:        1 bytes
  2163 ;; Hardware stack levels used:    1
  2164 ;; This function calls:
  2165 ;;		Nothing
  2166 ;; This function is called by:
  2167 ;;		_initGLCD
  2168 ;; This function uses a non-reentrant model
  2169 ;;
  2170                           
  2171                           	psect	text2
  2172  001CEE                     __ptext2:
  2173                           	opt stack 0
  2174  001CEE                     _spiInit:
  2175                           	opt stack 29
  2176                           
  2177                           ;incstack = 0
  2178                           ;spiInit@divider stored from wreg
  2179  001CEE  6E01               	movwf	spiInit@divider,c
  2180                           
  2181                           ;SPI_PIC.c: 38: SSPCON1bits.SSPEN = 0;
  2182  001CF0  9AC6               	bcf	4038,5,c	;volatile
  2183                           
  2184                           ;SPI_PIC.c: 39: SSPSTAT = 0x00;
  2185  001CF2  0E00               	movlw	0
  2186  001CF4  6EC7               	movwf	4039,c	;volatile
  2187                           
  2188                           ;SPI_PIC.c: 44: switch(divider){
  2189  001CF6  D007               	goto	l1619
  2190  001CF8                     l1611:
  2191                           
  2192                           ;SPI_PIC.c: 46: SSPCON1 = 0b00010000;
  2193  001CF8  0E10               	movlw	16
  2194  001CFA  D003               	goto	L3
  2195  001CFC                     l1615:
  2196                           
  2197                           ;SPI_PIC.c: 52: SSPCON1 = 0b00010010;
  2198  001CFC  0E12               	movlw	18
  2199  001CFE  D001               	goto	L3
  2200  001D00                     l1617:
  2201                           
  2202                           ;SPI_PIC.c: 55: SSPCON1 = 0b00010001;
  2203  001D00  0E11               	movlw	17
  2204  001D02                     L3:
  2205  001D02  6EC6               	movwf	4038,c	;volatile
  2206                           
  2207                           ;SPI_PIC.c: 56: }
  2208  001D04  D00B               	goto	l295
  2209  001D06                     l1619:
  2210  001D06  5001               	movf	spiInit@divider,w,c
  2211                           
  2212                           ; Switch size 1, requested type "space"
  2213                           ; Number of cases is 3, Range of values is 4 to 64
  2214                           ; switch strategies available:
  2215                           ; Name         Instructions Cycles
  2216                           ; simple_byte           10     6 (average)
  2217                           ;	Chosen strategy is simple_byte
  2218  001D08  0A04               	xorlw	4	; case 4
  2219  001D0A  B4D8               	btfsc	status,2,c
  2220  001D0C  D7F5               	goto	l1611
  2221  001D0E  0A14               	xorlw	20	; case 16
  2222  001D10  B4D8               	btfsc	status,2,c
  2223  001D12  D7F6               	goto	l1617
  2224  001D14  0A50               	xorlw	80	; case 64
  2225  001D16  B4D8               	btfsc	status,2,c
  2226  001D18  D7F1               	goto	l1615
  2227  001D1A  D7F2               	goto	l1617
  2228  001D1C                     l295:
  2229                           
  2230                           ;SPI_PIC.c: 59: TRISCbits.TRISC5 = 0;
  2231  001D1C  9A94               	bcf	3988,5,c	;volatile
  2232                           
  2233                           ;SPI_PIC.c: 60: TRISCbits.TRISC4 = 1;
  2234  001D1E  8894               	bsf	3988,4,c	;volatile
  2235                           
  2236                           ;SPI_PIC.c: 61: TRISCbits.TRISC3 = 0;
  2237  001D20  9694               	bcf	3988,3,c	;volatile
  2238                           
  2239                           ;SPI_PIC.c: 63: SSPCON1bits.SSPEN = 1;
  2240  001D22  8AC6               	bsf	4038,5,c	;volatile
  2241  001D24  0012               	return		;funcret
  2242  001D26                     __end_of_spiInit:
  2243                           	opt stack 0
  2244                           tblptru	equ	0xFF8
  2245                           tblptrh	equ	0xFF7
  2246                           tblptrl	equ	0xFF6
  2247                           tablat	equ	0xFF5
  2248                           prodh	equ	0xFF4
  2249                           prodl	equ	0xFF3
  2250                           wreg	equ	0xFE8
  2251                           status	equ	0xFD8
  2252                           
  2253 ;; *************** function _glcd_swreset *****************
  2254 ;; Defined at:
  2255 ;;		line 109 in file "GLCD_PIC.c"
  2256 ;; Parameters:    Size  Location     Type
  2257 ;;		None
  2258 ;; Auto vars:     Size  Location     Type
  2259 ;;		None
  2260 ;; Return value:  Size  Location     Type
  2261 ;;                  1    wreg      void 
  2262 ;; Registers used:
  2263 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2264 ;; Tracked objects:
  2265 ;;		On entry : 0/0
  2266 ;;		On exit  : 0/0
  2267 ;;		Unchanged: 0/0
  2268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2270 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2271 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2272 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2273 ;;Total ram usage:        2 bytes
  2274 ;; Hardware stack levels used:    1
  2275 ;; Hardware stack levels required when called:    3
  2276 ;; This function calls:
  2277 ;;		_glcdTransfer
  2278 ;; This function is called by:
  2279 ;;		_initGLCD
  2280 ;; This function uses a non-reentrant model
  2281 ;;
  2282                           
  2283                           	psect	text3
  2284  001D26                     __ptext3:
  2285                           	opt stack 0
  2286  001D26                     _glcd_swreset:
  2287                           	opt stack 26
  2288                           
  2289                           ;GLCD_PIC.c: 110: glcdTransfer(INST_SWRESET, CMD);
  2290                           
  2291                           ;incstack = 0
  2292  001D26  0E01               	movlw	1
  2293  001D28  6E04               	movwf	glcdTransfer@cmd,c
  2294  001D2A  0E47               	movlw	low _INST_SWRESET
  2295  001D2C  6EF6               	movwf	tblptrl,c
  2296  001D2E                     	if	1	;There is more than 1 active tblptr byte
  2297  001D2E  0E10               	movlw	high _INST_SWRESET
  2298  001D30  6EF7               	movwf	tblptrh,c
  2299  001D32                     	endif
  2300  001D32                     	if	0	;There are less than 3 active tblptr bytes
  2301  001D32                     	endif
  2302  001D32  0008               	tblrd		*
  2303  001D34  50F5               	movf	tablat,w,c
  2304  001D36  ECC1  F00E         	call	_glcdTransfer
  2305                           
  2306                           ;GLCD_PIC.c: 111: _delay((unsigned long)((130)*(10000000/4000.0)));
  2307  001D3A  0E02               	movlw	2
  2308  001D3C  6E08               	movwf	(??_glcd_swreset+1)& (0+255),c
  2309  001D3E  0EA7               	movlw	167
  2310  001D40  6E07               	movwf	??_glcd_swreset& (0+255),c
  2311  001D42  0E10               	movlw	16
  2312  001D44                     u1017:
  2313  001D44  2EE8               	decfsz	wreg,f,c
  2314  001D46  D7FE               	bra	u1017
  2315  001D48  2E07               	decfsz	??_glcd_swreset& (0+255),f,c
  2316  001D4A  D7FC               	bra	u1017
  2317  001D4C  2E08               	decfsz	(??_glcd_swreset+1)& (0+255),f,c
  2318  001D4E  D7FA               	bra	u1017
  2319  001D50  D000               	nop2	
  2320  001D52  0012               	return		;funcret
  2321  001D54                     __end_of_glcd_swreset:
  2322                           	opt stack 0
  2323                           tblptru	equ	0xFF8
  2324                           tblptrh	equ	0xFF7
  2325                           tblptrl	equ	0xFF6
  2326                           tablat	equ	0xFF5
  2327                           prodh	equ	0xFF4
  2328                           prodl	equ	0xFF3
  2329                           wreg	equ	0xFE8
  2330                           status	equ	0xFD8
  2331                           
  2332 ;; *************** function _glcd_slpout *****************
  2333 ;; Defined at:
  2334 ;;		line 120 in file "GLCD_PIC.c"
  2335 ;; Parameters:    Size  Location     Type
  2336 ;;		None
  2337 ;; Auto vars:     Size  Location     Type
  2338 ;;		None
  2339 ;; Return value:  Size  Location     Type
  2340 ;;                  1    wreg      void 
  2341 ;; Registers used:
  2342 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2343 ;; Tracked objects:
  2344 ;;		On entry : 0/0
  2345 ;;		On exit  : 0/0
  2346 ;;		Unchanged: 0/0
  2347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2349 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2350 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2351 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2352 ;;Total ram usage:        2 bytes
  2353 ;; Hardware stack levels used:    1
  2354 ;; Hardware stack levels required when called:    3
  2355 ;; This function calls:
  2356 ;;		_glcdTransfer
  2357 ;; This function is called by:
  2358 ;;		_initGLCD
  2359 ;; This function uses a non-reentrant model
  2360 ;;
  2361                           
  2362                           	psect	text4
  2363  001D54                     __ptext4:
  2364                           	opt stack 0
  2365  001D54                     _glcd_slpout:
  2366                           	opt stack 26
  2367                           
  2368                           ;GLCD_PIC.c: 121: glcdTransfer(INST_SLPOUT, CMD);
  2369                           
  2370                           ;incstack = 0
  2371  001D54  0E01               	movlw	1
  2372  001D56  6E04               	movwf	glcdTransfer@cmd,c
  2373  001D58  0E45               	movlw	low _INST_SLPOUT
  2374  001D5A  6EF6               	movwf	tblptrl,c
  2375  001D5C                     	if	1	;There is more than 1 active tblptr byte
  2376  001D5C  0E10               	movlw	high _INST_SLPOUT
  2377  001D5E  6EF7               	movwf	tblptrh,c
  2378  001D60                     	endif
  2379  001D60                     	if	0	;There are less than 3 active tblptr bytes
  2380  001D60                     	endif
  2381  001D60  0008               	tblrd		*
  2382  001D62  50F5               	movf	tablat,w,c
  2383  001D64  ECC1  F00E         	call	_glcdTransfer
  2384                           
  2385                           ;GLCD_PIC.c: 124: _delay((unsigned long)((130)*(10000000/4000.0)));
  2386  001D68  0E02               	movlw	2
  2387  001D6A  6E08               	movwf	(??_glcd_slpout+1)& (0+255),c
  2388  001D6C  0EA7               	movlw	167
  2389  001D6E  6E07               	movwf	??_glcd_slpout& (0+255),c
  2390  001D70  0E10               	movlw	16
  2391  001D72                     u1027:
  2392  001D72  2EE8               	decfsz	wreg,f,c
  2393  001D74  D7FE               	bra	u1027
  2394  001D76  2E07               	decfsz	??_glcd_slpout& (0+255),f,c
  2395  001D78  D7FC               	bra	u1027
  2396  001D7A  2E08               	decfsz	(??_glcd_slpout+1)& (0+255),f,c
  2397  001D7C  D7FA               	bra	u1027
  2398  001D7E  D000               	nop2	
  2399  001D80  0012               	return		;funcret
  2400  001D82                     __end_of_glcd_slpout:
  2401                           	opt stack 0
  2402                           tblptru	equ	0xFF8
  2403                           tblptrh	equ	0xFF7
  2404                           tblptrl	equ	0xFF6
  2405                           tablat	equ	0xFF5
  2406                           prodh	equ	0xFF4
  2407                           prodl	equ	0xFF3
  2408                           wreg	equ	0xFE8
  2409                           status	equ	0xFD8
  2410                           
  2411 ;; *************** function _glcd_noron *****************
  2412 ;; Defined at:
  2413 ;;		line 136 in file "GLCD_PIC.c"
  2414 ;; Parameters:    Size  Location     Type
  2415 ;;		None
  2416 ;; Auto vars:     Size  Location     Type
  2417 ;;		None
  2418 ;; Return value:  Size  Location     Type
  2419 ;;                  1    wreg      void 
  2420 ;; Registers used:
  2421 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2422 ;; Tracked objects:
  2423 ;;		On entry : 0/0
  2424 ;;		On exit  : 0/0
  2425 ;;		Unchanged: 0/0
  2426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2428 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2430 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2431 ;;Total ram usage:        0 bytes
  2432 ;; Hardware stack levels used:    1
  2433 ;; Hardware stack levels required when called:    3
  2434 ;; This function calls:
  2435 ;;		_glcdTransfer
  2436 ;; This function is called by:
  2437 ;;		_initGLCD
  2438 ;; This function uses a non-reentrant model
  2439 ;;
  2440                           
  2441                           	psect	text5
  2442  001E14                     __ptext5:
  2443                           	opt stack 0
  2444  001E14                     _glcd_noron:
  2445                           	opt stack 26
  2446                           
  2447                           ;GLCD_PIC.c: 137: glcdTransfer(INST_NORON, CMD);
  2448                           
  2449                           ;incstack = 0
  2450  001E14  0E01               	movlw	1
  2451  001E16  6E04               	movwf	glcdTransfer@cmd,c
  2452  001E18  0E43               	movlw	low _INST_NORON
  2453  001E1A  6EF6               	movwf	tblptrl,c
  2454  001E1C                     	if	1	;There is more than 1 active tblptr byte
  2455  001E1C  0E10               	movlw	high _INST_NORON
  2456  001E1E  6EF7               	movwf	tblptrh,c
  2457  001E20                     	endif
  2458  001E20                     	if	0	;There are less than 3 active tblptr bytes
  2459  001E20                     	endif
  2460  001E20  0008               	tblrd		*
  2461  001E22  50F5               	movf	tablat,w,c
  2462  001E24  ECC1  F00E         	call	_glcdTransfer
  2463  001E28  0012               	return		;funcret
  2464  001E2A                     __end_of_glcd_noron:
  2465                           	opt stack 0
  2466                           tblptru	equ	0xFF8
  2467                           tblptrh	equ	0xFF7
  2468                           tblptrl	equ	0xFF6
  2469                           tablat	equ	0xFF5
  2470                           prodh	equ	0xFF4
  2471                           prodl	equ	0xFF3
  2472                           wreg	equ	0xFE8
  2473                           status	equ	0xFD8
  2474                           
  2475 ;; *************** function _glcd_invoff *****************
  2476 ;; Defined at:
  2477 ;;		line 140 in file "GLCD_PIC.c"
  2478 ;; Parameters:    Size  Location     Type
  2479 ;;		None
  2480 ;; Auto vars:     Size  Location     Type
  2481 ;;		None
  2482 ;; Return value:  Size  Location     Type
  2483 ;;                  1    wreg      void 
  2484 ;; Registers used:
  2485 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2486 ;; Tracked objects:
  2487 ;;		On entry : 0/0
  2488 ;;		On exit  : 0/0
  2489 ;;		Unchanged: 0/0
  2490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2492 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2494 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2495 ;;Total ram usage:        0 bytes
  2496 ;; Hardware stack levels used:    1
  2497 ;; Hardware stack levels required when called:    3
  2498 ;; This function calls:
  2499 ;;		_glcdTransfer
  2500 ;; This function is called by:
  2501 ;;		_main
  2502 ;;		_initGLCD
  2503 ;; This function uses a non-reentrant model
  2504 ;;
  2505                           
  2506                           	psect	text6
  2507  001E2A                     __ptext6:
  2508                           	opt stack 0
  2509  001E2A                     _glcd_invoff:
  2510                           	opt stack 26
  2511                           
  2512                           ;GLCD_PIC.c: 141: glcdTransfer(INST_INVOFF, CMD);
  2513                           
  2514                           ;incstack = 0
  2515  001E2A  0E01               	movlw	1
  2516  001E2C  6E04               	movwf	glcdTransfer@cmd,c
  2517  001E2E  0E42               	movlw	low _INST_INVOFF
  2518  001E30  6EF6               	movwf	tblptrl,c
  2519  001E32                     	if	1	;There is more than 1 active tblptr byte
  2520  001E32  0E10               	movlw	high _INST_INVOFF
  2521  001E34  6EF7               	movwf	tblptrh,c
  2522  001E36                     	endif
  2523  001E36                     	if	0	;There are less than 3 active tblptr bytes
  2524  001E36                     	endif
  2525  001E36  0008               	tblrd		*
  2526  001E38  50F5               	movf	tablat,w,c
  2527  001E3A  ECC1  F00E         	call	_glcdTransfer
  2528  001E3E  0012               	return		;funcret
  2529  001E40                     __end_of_glcd_invoff:
  2530                           	opt stack 0
  2531                           tblptru	equ	0xFF8
  2532                           tblptrh	equ	0xFF7
  2533                           tblptrl	equ	0xFF6
  2534                           tablat	equ	0xFF5
  2535                           prodh	equ	0xFF4
  2536                           prodl	equ	0xFF3
  2537                           wreg	equ	0xFE8
  2538                           status	equ	0xFD8
  2539                           
  2540 ;; *************** function _glcd_idmoff *****************
  2541 ;; Defined at:
  2542 ;;		line 164 in file "GLCD_PIC.c"
  2543 ;; Parameters:    Size  Location     Type
  2544 ;;		None
  2545 ;; Auto vars:     Size  Location     Type
  2546 ;;		None
  2547 ;; Return value:  Size  Location     Type
  2548 ;;                  1    wreg      void 
  2549 ;; Registers used:
  2550 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2551 ;; Tracked objects:
  2552 ;;		On entry : 0/0
  2553 ;;		On exit  : 0/0
  2554 ;;		Unchanged: 0/0
  2555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2557 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2558 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2559 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2560 ;;Total ram usage:        0 bytes
  2561 ;; Hardware stack levels used:    1
  2562 ;; Hardware stack levels required when called:    3
  2563 ;; This function calls:
  2564 ;;		_glcdTransfer
  2565 ;; This function is called by:
  2566 ;;		_initGLCD
  2567 ;; This function uses a non-reentrant model
  2568 ;;
  2569                           
  2570                           	psect	text7
  2571  001E40                     __ptext7:
  2572                           	opt stack 0
  2573  001E40                     _glcd_idmoff:
  2574                           	opt stack 26
  2575                           
  2576                           ;GLCD_PIC.c: 165: glcdTransfer(INST_IDMOFF, CMD);
  2577                           
  2578                           ;incstack = 0
  2579  001E40  0E01               	movlw	1
  2580  001E42  6E04               	movwf	glcdTransfer@cmd,c
  2581  001E44  0E36               	movlw	low _INST_IDMOFF
  2582  001E46  6EF6               	movwf	tblptrl,c
  2583  001E48                     	if	1	;There is more than 1 active tblptr byte
  2584  001E48  0E10               	movlw	high _INST_IDMOFF
  2585  001E4A  6EF7               	movwf	tblptrh,c
  2586  001E4C                     	endif
  2587  001E4C                     	if	0	;There are less than 3 active tblptr bytes
  2588  001E4C                     	endif
  2589  001E4C  0008               	tblrd		*
  2590  001E4E  50F5               	movf	tablat,w,c
  2591  001E50  ECC1  F00E         	call	_glcdTransfer
  2592  001E54  0012               	return		;funcret
  2593  001E56                     __end_of_glcd_idmoff:
  2594                           	opt stack 0
  2595                           tblptru	equ	0xFF8
  2596                           tblptrh	equ	0xFF7
  2597                           tblptrl	equ	0xFF6
  2598                           tablat	equ	0xFF5
  2599                           prodh	equ	0xFF4
  2600                           prodl	equ	0xFF3
  2601                           wreg	equ	0xFE8
  2602                           status	equ	0xFD8
  2603                           
  2604 ;; *************** function _glcd_dispon *****************
  2605 ;; Defined at:
  2606 ;;		line 152 in file "GLCD_PIC.c"
  2607 ;; Parameters:    Size  Location     Type
  2608 ;;		None
  2609 ;; Auto vars:     Size  Location     Type
  2610 ;;		None
  2611 ;; Return value:  Size  Location     Type
  2612 ;;                  1    wreg      void 
  2613 ;; Registers used:
  2614 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2615 ;; Tracked objects:
  2616 ;;		On entry : 0/0
  2617 ;;		On exit  : 0/0
  2618 ;;		Unchanged: 0/0
  2619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2621 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2623 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2624 ;;Total ram usage:        0 bytes
  2625 ;; Hardware stack levels used:    1
  2626 ;; Hardware stack levels required when called:    3
  2627 ;; This function calls:
  2628 ;;		_glcdTransfer
  2629 ;; This function is called by:
  2630 ;;		_initGLCD
  2631 ;; This function uses a non-reentrant model
  2632 ;;
  2633                           
  2634                           	psect	text8
  2635  001E56                     __ptext8:
  2636                           	opt stack 0
  2637  001E56                     _glcd_dispon:
  2638                           	opt stack 26
  2639                           
  2640                           ;GLCD_PIC.c: 153: glcdTransfer(INST_DISPON, CMD);
  2641                           
  2642                           ;incstack = 0
  2643  001E56  0E01               	movlw	1
  2644  001E58  6E04               	movwf	glcdTransfer@cmd,c
  2645  001E5A  0E3E               	movlw	low _INST_DISPON
  2646  001E5C  6EF6               	movwf	tblptrl,c
  2647  001E5E                     	if	1	;There is more than 1 active tblptr byte
  2648  001E5E  0E10               	movlw	high _INST_DISPON
  2649  001E60  6EF7               	movwf	tblptrh,c
  2650  001E62                     	endif
  2651  001E62                     	if	0	;There are less than 3 active tblptr bytes
  2652  001E62                     	endif
  2653  001E62  0008               	tblrd		*
  2654  001E64  50F5               	movf	tablat,w,c
  2655  001E66  ECC1  F00E         	call	_glcdTransfer
  2656  001E6A  0012               	return		;funcret
  2657  001E6C                     __end_of_glcd_dispon:
  2658                           	opt stack 0
  2659                           tblptru	equ	0xFF8
  2660                           tblptrh	equ	0xFF7
  2661                           tblptrl	equ	0xFF6
  2662                           tablat	equ	0xFF5
  2663                           prodh	equ	0xFF4
  2664                           prodl	equ	0xFF3
  2665                           wreg	equ	0xFE8
  2666                           status	equ	0xFD8
  2667                           
  2668 ;; *************** function _glcdSetCOLMOD *****************
  2669 ;; Defined at:
  2670 ;;		line 305 in file "GLCD_PIC.c"
  2671 ;; Parameters:    Size  Location     Type
  2672 ;;  numBitsPerPi    1    wreg     unsigned char 
  2673 ;; Auto vars:     Size  Location     Type
  2674 ;;  numBitsPerPi    1    6[COMRAM] unsigned char 
  2675 ;;  rawData         2    7[COMRAM] unsigned short 
  2676 ;; Return value:  Size  Location     Type
  2677 ;;                  1    wreg      void 
  2678 ;; Registers used:
  2679 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2680 ;; Tracked objects:
  2681 ;;		On entry : 0/0
  2682 ;;		On exit  : 0/0
  2683 ;;		Unchanged: 0/0
  2684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2686 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2688 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2689 ;;Total ram usage:        3 bytes
  2690 ;; Hardware stack levels used:    1
  2691 ;; Hardware stack levels required when called:    3
  2692 ;; This function calls:
  2693 ;;		_glcdTransfer
  2694 ;; This function is called by:
  2695 ;;		_initGLCD
  2696 ;; This function uses a non-reentrant model
  2697 ;;
  2698                           
  2699                           	psect	text9
  2700  001C5C                     __ptext9:
  2701                           	opt stack 0
  2702  001C5C                     _glcdSetCOLMOD:
  2703                           	opt stack 26
  2704                           
  2705                           ;incstack = 0
  2706                           ;glcdSetCOLMOD@numBitsPerPixel stored from wreg
  2707  001C5C  6E07               	movwf	glcdSetCOLMOD@numBitsPerPixel,c
  2708                           
  2709                           ;GLCD_PIC.c: 306: unsigned short rawData;
  2710                           ;GLCD_PIC.c: 307: switch(numBitsPerPixel){
  2711  001C5E  D00D               	goto	l1601
  2712  001C60                     l1591:
  2713                           
  2714                           ;GLCD_PIC.c: 309: rawData = 0b00000011;
  2715  001C60  0E00               	movlw	0
  2716  001C62  6E09               	movwf	glcdSetCOLMOD@rawData+1,c
  2717  001C64  0E03               	movlw	3
  2718  001C66  D003               	goto	L5
  2719  001C68                     l1593:
  2720                           
  2721                           ;GLCD_PIC.c: 312: rawData = 0b00000101;
  2722  001C68  0E00               	movlw	0
  2723  001C6A  6E09               	movwf	glcdSetCOLMOD@rawData+1,c
  2724  001C6C  0E05               	movlw	5
  2725  001C6E                     L5:
  2726  001C6E  6E08               	movwf	glcdSetCOLMOD@rawData,c
  2727                           
  2728                           ;GLCD_PIC.c: 316: break;
  2729  001C70  D00D               	goto	l1603
  2730  001C72                     l1597:
  2731                           
  2732                           ;GLCD_PIC.c: 318: rawData = 0b00000110;
  2733  001C72  0E00               	movlw	0
  2734  001C74  6E09               	movwf	glcdSetCOLMOD@rawData+1,c
  2735  001C76  0E06               	movlw	6
  2736  001C78  D7FA               	goto	L5
  2737  001C7A                     l1601:
  2738  001C7A  5007               	movf	glcdSetCOLMOD@numBitsPerPixel,w,c
  2739                           
  2740                           ; Switch size 1, requested type "space"
  2741                           ; Number of cases is 3, Range of values is 12 to 18
  2742                           ; switch strategies available:
  2743                           ; Name         Instructions Cycles
  2744                           ; simple_byte           10     6 (average)
  2745                           ;	Chosen strategy is simple_byte
  2746  001C7C  0A0C               	xorlw	12	; case 12
  2747  001C7E  B4D8               	btfsc	status,2,c
  2748  001C80  D7EF               	goto	l1591
  2749  001C82  0A1C               	xorlw	28	; case 16
  2750  001C84  B4D8               	btfsc	status,2,c
  2751  001C86  D7F0               	goto	l1593
  2752  001C88  0A02               	xorlw	2	; case 18
  2753  001C8A  D7F3               	goto	l1597
  2754  001C8C                     l1603:
  2755                           
  2756                           ;GLCD_PIC.c: 321: glcdTransfer(INST_COLMOD, CMD);
  2757  001C8C  0E01               	movlw	1
  2758  001C8E  6E04               	movwf	glcdTransfer@cmd,c
  2759  001C90  0E34               	movlw	low _INST_COLMOD
  2760  001C92  6EF6               	movwf	tblptrl,c
  2761  001C94                     	if	1	;There is more than 1 active tblptr byte
  2762  001C94  0E10               	movlw	high _INST_COLMOD
  2763  001C96  6EF7               	movwf	tblptrh,c
  2764  001C98                     	endif
  2765  001C98                     	if	0	;There are less than 3 active tblptr bytes
  2766  001C98                     	endif
  2767  001C98  0008               	tblrd		*
  2768  001C9A  50F5               	movf	tablat,w,c
  2769  001C9C  ECC1  F00E         	call	_glcdTransfer
  2770                           
  2771                           ;GLCD_PIC.c: 322: glcdTransfer(rawData, MEMWRITE);
  2772  001CA0  0E00               	movlw	0
  2773  001CA2  6E04               	movwf	glcdTransfer@cmd,c
  2774  001CA4  5008               	movf	glcdSetCOLMOD@rawData,w,c
  2775  001CA6  ECC1  F00E         	call	_glcdTransfer
  2776  001CAA  0012               	return		;funcret
  2777  001CAC                     __end_of_glcdSetCOLMOD:
  2778                           	opt stack 0
  2779                           tblptru	equ	0xFF8
  2780                           tblptrh	equ	0xFF7
  2781                           tblptrl	equ	0xFF6
  2782                           tablat	equ	0xFF5
  2783                           prodh	equ	0xFF4
  2784                           prodl	equ	0xFF3
  2785                           wreg	equ	0xFE8
  2786                           status	equ	0xFD8
  2787                           
  2788 ;; *************** function _glcd_invon *****************
  2789 ;; Defined at:
  2790 ;;		line 144 in file "GLCD_PIC.c"
  2791 ;; Parameters:    Size  Location     Type
  2792 ;;		None
  2793 ;; Auto vars:     Size  Location     Type
  2794 ;;		None
  2795 ;; Return value:  Size  Location     Type
  2796 ;;                  1    wreg      void 
  2797 ;; Registers used:
  2798 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2799 ;; Tracked objects:
  2800 ;;		On entry : 0/0
  2801 ;;		On exit  : 0/0
  2802 ;;		Unchanged: 0/0
  2803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2805 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2807 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2808 ;;Total ram usage:        0 bytes
  2809 ;; Hardware stack levels used:    1
  2810 ;; Hardware stack levels required when called:    3
  2811 ;; This function calls:
  2812 ;;		_glcdTransfer
  2813 ;; This function is called by:
  2814 ;;		_main
  2815 ;; This function uses a non-reentrant model
  2816 ;;
  2817                           
  2818                           	psect	text10
  2819  001E6C                     __ptext10:
  2820                           	opt stack 0
  2821  001E6C                     _glcd_invon:
  2822                           	opt stack 27
  2823                           
  2824                           ;GLCD_PIC.c: 145: glcdTransfer(INST_INVON, CMD);
  2825                           
  2826                           ;incstack = 0
  2827  001E6C  0E01               	movlw	1
  2828  001E6E  6E04               	movwf	glcdTransfer@cmd,c
  2829  001E70  0E41               	movlw	low _INST_INVON
  2830  001E72  6EF6               	movwf	tblptrl,c
  2831  001E74                     	if	1	;There is more than 1 active tblptr byte
  2832  001E74  0E10               	movlw	high _INST_INVON
  2833  001E76  6EF7               	movwf	tblptrh,c
  2834  001E78                     	endif
  2835  001E78                     	if	0	;There are less than 3 active tblptr bytes
  2836  001E78                     	endif
  2837  001E78  0008               	tblrd		*
  2838  001E7A  50F5               	movf	tablat,w,c
  2839  001E7C  ECC1  F00E         	call	_glcdTransfer
  2840  001E80  0012               	return		;funcret
  2841  001E82                     __end_of_glcd_invon:
  2842                           	opt stack 0
  2843                           tblptru	equ	0xFF8
  2844                           tblptrh	equ	0xFF7
  2845                           tblptrl	equ	0xFF6
  2846                           tablat	equ	0xFF5
  2847                           prodh	equ	0xFF4
  2848                           prodl	equ	0xFF3
  2849                           wreg	equ	0xFE8
  2850                           status	equ	0xFD8
  2851                           
  2852 ;; *************** function _glcdSetOrigin *****************
  2853 ;; Defined at:
  2854 ;;		line 325 in file "GLCD_PIC.c"
  2855 ;; Parameters:    Size  Location     Type
  2856 ;;  corner          1    wreg     enum E2903
  2857 ;; Auto vars:     Size  Location     Type
  2858 ;;  corner          1    6[COMRAM] enum E2903
  2859 ;; Return value:  Size  Location     Type
  2860 ;;                  1    wreg      void 
  2861 ;; Registers used:
  2862 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2863 ;; Tracked objects:
  2864 ;;		On entry : 0/0
  2865 ;;		On exit  : 0/0
  2866 ;;		Unchanged: 0/0
  2867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2869 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2871 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2872 ;;Total ram usage:        1 bytes
  2873 ;; Hardware stack levels used:    1
  2874 ;; Hardware stack levels required when called:    4
  2875 ;; This function calls:
  2876 ;;		_glcd_setmadctl
  2877 ;; This function is called by:
  2878 ;;		_main
  2879 ;; This function uses a non-reentrant model
  2880 ;;
  2881                           
  2882                           	psect	text11
  2883  001CAC                     __ptext11:
  2884                           	opt stack 0
  2885  001CAC                     _glcdSetOrigin:
  2886                           	opt stack 26
  2887                           
  2888                           ;incstack = 0
  2889                           ;glcdSetOrigin@corner stored from wreg
  2890  001CAC  6E07               	movwf	glcdSetOrigin@corner,c
  2891                           
  2892                           ;GLCD_PIC.c: 327: switch(corner){
  2893  001CAE  D00E               	goto	l1739
  2894  001CB0                     l257:
  2895                           
  2896                           ;GLCD_PIC.c: 334: MADCTLbits.MY = 1;
  2897  001CB0  8E2A               	bsf	_MADCTLbits,7,c
  2898                           
  2899                           ;GLCD_PIC.c: 335: MADCTLbits.MX = 0;
  2900  001CB2  9C2A               	bcf	_MADCTLbits,6,c
  2901  001CB4  D005               	goto	L7
  2902  001CB6                     l258:
  2903                           
  2904                           ;GLCD_PIC.c: 339: MADCTLbits.MY = 0;
  2905  001CB6  9E2A               	bcf	_MADCTLbits,7,c
  2906                           
  2907                           ;GLCD_PIC.c: 340: MADCTLbits.MX = 0;
  2908  001CB8  9C2A               	bcf	_MADCTLbits,6,c
  2909  001CBA  D006               	goto	L8
  2910  001CBC                     l259:
  2911                           
  2912                           ;GLCD_PIC.c: 344: MADCTLbits.MY = 0;
  2913  001CBC  9E2A               	bcf	_MADCTLbits,7,c
  2914                           
  2915                           ;GLCD_PIC.c: 345: MADCTLbits.MX = 1;
  2916  001CBE  8C2A               	bsf	_MADCTLbits,6,c
  2917  001CC0                     L7:
  2918                           
  2919                           ;GLCD_PIC.c: 346: MADCTLbits.MV = 0;
  2920  001CC0  9A2A               	bcf	_MADCTLbits,5,c
  2921                           
  2922                           ;GLCD_PIC.c: 347: break;
  2923  001CC2  D012               	goto	l1741
  2924  001CC4                     l260:
  2925                           
  2926                           ;GLCD_PIC.c: 349: MADCTLbits.MY = 1;
  2927  001CC4  8E2A               	bsf	_MADCTLbits,7,c
  2928                           
  2929                           ;GLCD_PIC.c: 350: MADCTLbits.MX = 1;
  2930  001CC6  8C2A               	bsf	_MADCTLbits,6,c
  2931  001CC8                     L8:
  2932                           
  2933                           ;GLCD_PIC.c: 351: MADCTLbits.MV = 1;
  2934  001CC8  8A2A               	bsf	_MADCTLbits,5,c
  2935                           
  2936                           ;GLCD_PIC.c: 353: }
  2937                           
  2938                           ;GLCD_PIC.c: 352: break;
  2939  001CCA  D00E               	goto	l1741
  2940  001CCC                     l1739:
  2941  001CCC  5007               	movf	glcdSetOrigin@corner,w,c
  2942                           
  2943                           ; Switch size 1, requested type "space"
  2944                           ; Number of cases is 4, Range of values is 0 to 3
  2945                           ; switch strategies available:
  2946                           ; Name         Instructions Cycles
  2947                           ; simple_byte           13     7 (average)
  2948                           ;	Chosen strategy is simple_byte
  2949  001CCE  0A00               	xorlw	0	; case 0
  2950  001CD0  B4D8               	btfsc	status,2,c
  2951  001CD2  D7F8               	goto	l260
  2952  001CD4  0A01               	xorlw	1	; case 1
  2953  001CD6  B4D8               	btfsc	status,2,c
  2954  001CD8  D7EB               	goto	l257
  2955  001CDA  0A03               	xorlw	3	; case 2
  2956  001CDC  B4D8               	btfsc	status,2,c
  2957  001CDE  D7EE               	goto	l259
  2958  001CE0  0A01               	xorlw	1	; case 3
  2959  001CE2  B4D8               	btfsc	status,2,c
  2960  001CE4  D7E8               	goto	l258
  2961  001CE6  D7EE               	goto	l260
  2962  001CE8                     l1741:
  2963                           
  2964                           ;GLCD_PIC.c: 355: glcd_setmadctl();
  2965  001CE8  ECFA  F00E         	call	_glcd_setmadctl	;wreg free
  2966  001CEC  0012               	return		;funcret
  2967  001CEE                     __end_of_glcdSetOrigin:
  2968                           	opt stack 0
  2969                           tblptru	equ	0xFF8
  2970                           tblptrh	equ	0xFF7
  2971                           tblptrl	equ	0xFF6
  2972                           tablat	equ	0xFF5
  2973                           prodh	equ	0xFF4
  2974                           prodl	equ	0xFF3
  2975                           wreg	equ	0xFE8
  2976                           status	equ	0xFD8
  2977                           
  2978 ;; *************** function _glcd_setmadctl *****************
  2979 ;; Defined at:
  2980 ;;		line 127 in file "GLCD_PIC.c"
  2981 ;; Parameters:    Size  Location     Type
  2982 ;;		None
  2983 ;; Auto vars:     Size  Location     Type
  2984 ;;		None
  2985 ;; Return value:  Size  Location     Type
  2986 ;;                  1    wreg      void 
  2987 ;; Registers used:
  2988 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2989 ;; Tracked objects:
  2990 ;;		On entry : 0/0
  2991 ;;		On exit  : 0/0
  2992 ;;		Unchanged: 0/0
  2993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2995 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2997 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2998 ;;Total ram usage:        0 bytes
  2999 ;; Hardware stack levels used:    1
  3000 ;; Hardware stack levels required when called:    3
  3001 ;; This function calls:
  3002 ;;		_glcdTransfer
  3003 ;; This function is called by:
  3004 ;;		_glcdSetOrigin
  3005 ;;		_initGLCD
  3006 ;; This function uses a non-reentrant model
  3007 ;;
  3008                           
  3009                           	psect	text12
  3010  001DF4                     __ptext12:
  3011                           	opt stack 0
  3012  001DF4                     _glcd_setmadctl:
  3013                           	opt stack 26
  3014                           
  3015                           ;GLCD_PIC.c: 128: glcdTransfer(INST_MADCTL, CMD);
  3016                           
  3017                           ;incstack = 0
  3018  001DF4  0E01               	movlw	1
  3019  001DF6  6E04               	movwf	glcdTransfer@cmd,c
  3020  001DF8  0E37               	movlw	low _INST_MADCTL
  3021  001DFA  6EF6               	movwf	tblptrl,c
  3022  001DFC                     	if	1	;There is more than 1 active tblptr byte
  3023  001DFC  0E10               	movlw	high _INST_MADCTL
  3024  001DFE  6EF7               	movwf	tblptrh,c
  3025  001E00                     	endif
  3026  001E00                     	if	0	;There are less than 3 active tblptr bytes
  3027  001E00                     	endif
  3028  001E00  0008               	tblrd		*
  3029  001E02  50F5               	movf	tablat,w,c
  3030  001E04  ECC1  F00E         	call	_glcdTransfer
  3031                           
  3032                           ;GLCD_PIC.c: 129: glcdTransfer(MADCTLbits.reg, MEMWRITE);
  3033  001E08  0E00               	movlw	0
  3034  001E0A  6E04               	movwf	glcdTransfer@cmd,c
  3035  001E0C  502A               	movf	_MADCTLbits,w,c
  3036  001E0E  ECC1  F00E         	call	_glcdTransfer
  3037  001E12  0012               	return		;funcret
  3038  001E14                     __end_of_glcd_setmadctl:
  3039                           	opt stack 0
  3040                           tblptru	equ	0xFF8
  3041                           tblptrh	equ	0xFF7
  3042                           tblptrl	equ	0xFF6
  3043                           tablat	equ	0xFF5
  3044                           prodh	equ	0xFF4
  3045                           prodl	equ	0xFF3
  3046                           wreg	equ	0xFE8
  3047                           status	equ	0xFD8
  3048                           
  3049 ;; *************** function _glcdDrawPixel *****************
  3050 ;; Defined at:
  3051 ;;		line 292 in file "GLCD_PIC.c"
  3052 ;; Parameters:    Size  Location     Type
  3053 ;;  XS              1    wreg     unsigned char 
  3054 ;;  YS              1   25[COMRAM] unsigned char 
  3055 ;;  color           4   26[COMRAM] unsigned long 
  3056 ;; Auto vars:     Size  Location     Type
  3057 ;;  XS              1   31[COMRAM] unsigned char 
  3058 ;; Return value:  Size  Location     Type
  3059 ;;                  1    wreg      void 
  3060 ;; Registers used:
  3061 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3062 ;; Tracked objects:
  3063 ;;		On entry : 0/0
  3064 ;;		On exit  : 0/0
  3065 ;;		Unchanged: 0/0
  3066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3067 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3068 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3069 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3070 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3071 ;;Total ram usage:        7 bytes
  3072 ;; Hardware stack levels used:    1
  3073 ;; Hardware stack levels required when called:    5
  3074 ;; This function calls:
  3075 ;;		_glcdDrawRectangle
  3076 ;; This function is called by:
  3077 ;;		_main
  3078 ;; This function uses a non-reentrant model
  3079 ;;
  3080                           
  3081                           	psect	text13
  3082  001BEE                     __ptext13:
  3083                           	opt stack 0
  3084  001BEE                     _glcdDrawPixel:
  3085                           	opt stack 25
  3086                           
  3087                           ;incstack = 0
  3088                           ;glcdDrawPixel@XS stored from wreg
  3089  001BEE  6E20               	movwf	glcdDrawPixel@XS,c
  3090                           
  3091                           ;GLCD_PIC.c: 295: if(XS >= GLCD_SIZE_HORZ){
  3092  001BF0  0E4C               	movlw	low _GLCD_SIZE_HORZ
  3093  001BF2  6EF6               	movwf	tblptrl,c
  3094  001BF4                     	if	1	;There is more than 1 active tblptr byte
  3095  001BF4  0E10               	movlw	high _GLCD_SIZE_HORZ
  3096  001BF6  6EF7               	movwf	tblptrh,c
  3097  001BF8                     	endif
  3098  001BF8                     	if	0	;There are less than 3 active tblptr bytes
  3099  001BF8                     	endif
  3100  001BF8  0009               	tblrd		*+
  3101  001BFA  50F5               	movf	tablat,w,c
  3102  001BFC  5C20               	subwf	glcdDrawPixel@XS,w,c
  3103  001BFE  A0D8               	btfss	status,0,c
  3104  001C00  D009               	goto	l240
  3105                           
  3106                           ;GLCD_PIC.c: 296: XS = GLCD_SIZE_HORZ - 1;
  3107  001C02  0E4C               	movlw	low _GLCD_SIZE_HORZ
  3108  001C04  6EF6               	movwf	tblptrl,c
  3109  001C06                     	if	1	;There is more than 1 active tblptr byte
  3110  001C06  0E10               	movlw	high _GLCD_SIZE_HORZ
  3111  001C08  6EF7               	movwf	tblptrh,c
  3112  001C0A                     	endif
  3113  001C0A                     	if	0	;There are less than 3 active tblptr bytes
  3114  001C0A                     	endif
  3115  001C0A  0008               	tblrd		*
  3116  001C0C  CFF5 F01F          	movff	tablat,??_glcdDrawPixel
  3117  001C10  041F               	decf	??_glcdDrawPixel,w,c
  3118  001C12  6E20               	movwf	glcdDrawPixel@XS,c
  3119  001C14                     l240:
  3120                           
  3121                           ;GLCD_PIC.c: 297: }
  3122                           ;GLCD_PIC.c: 298: if(YS >= GLCD_SIZE_VERT){
  3123  001C14  0E4B               	movlw	low _GLCD_SIZE_VERT
  3124  001C16  6EF6               	movwf	tblptrl,c
  3125  001C18                     	if	1	;There is more than 1 active tblptr byte
  3126  001C18  0E10               	movlw	high _GLCD_SIZE_VERT
  3127  001C1A  6EF7               	movwf	tblptrh,c
  3128  001C1C                     	endif
  3129  001C1C                     	if	0	;There are less than 3 active tblptr bytes
  3130  001C1C                     	endif
  3131  001C1C  0009               	tblrd		*+
  3132  001C1E  50F5               	movf	tablat,w,c
  3133  001C20  5C1A               	subwf	glcdDrawPixel@YS,w,c
  3134  001C22  A0D8               	btfss	status,0,c
  3135  001C24  D009               	goto	l1733
  3136                           
  3137                           ;GLCD_PIC.c: 299: YS = GLCD_SIZE_HORZ - 1;
  3138  001C26  0E4C               	movlw	low _GLCD_SIZE_HORZ
  3139  001C28  6EF6               	movwf	tblptrl,c
  3140  001C2A                     	if	1	;There is more than 1 active tblptr byte
  3141  001C2A  0E10               	movlw	high _GLCD_SIZE_HORZ
  3142  001C2C  6EF7               	movwf	tblptrh,c
  3143  001C2E                     	endif
  3144  001C2E                     	if	0	;There are less than 3 active tblptr bytes
  3145  001C2E                     	endif
  3146  001C2E  0008               	tblrd		*
  3147  001C30  CFF5 F01F          	movff	tablat,??_glcdDrawPixel
  3148  001C34  041F               	decf	??_glcdDrawPixel,w,c
  3149  001C36  6E1A               	movwf	glcdDrawPixel@YS,c
  3150  001C38                     l1733:
  3151                           
  3152                           ;GLCD_PIC.c: 300: }
  3153                           ;GLCD_PIC.c: 302: glcdDrawRectangle(XS, XS, YS, YS, color);
  3154  001C38  C020  F007         	movff	glcdDrawPixel@XS,glcdDrawRectangle@XE
  3155  001C3C  C01A  F008         	movff	glcdDrawPixel@YS,glcdDrawRectangle@YS
  3156  001C40  C01A  F009         	movff	glcdDrawPixel@YS,glcdDrawRectangle@YE
  3157  001C44  C01B  F00A         	movff	glcdDrawPixel@color,glcdDrawRectangle@color
  3158  001C48  C01C  F00B         	movff	glcdDrawPixel@color+1,glcdDrawRectangle@color+1
  3159  001C4C  C01D  F00C         	movff	glcdDrawPixel@color+2,glcdDrawRectangle@color+2
  3160  001C50  C01E  F00D         	movff	glcdDrawPixel@color+3,glcdDrawRectangle@color+3
  3161  001C54  5020               	movf	glcdDrawPixel@XS,w,c
  3162  001C56  ECC5  F00C         	call	_glcdDrawRectangle
  3163  001C5A  0012               	return		;funcret
  3164  001C5C                     __end_of_glcdDrawPixel:
  3165                           	opt stack 0
  3166                           tblptru	equ	0xFF8
  3167                           tblptrh	equ	0xFF7
  3168                           tblptrl	equ	0xFF6
  3169                           tablat	equ	0xFF5
  3170                           prodh	equ	0xFF4
  3171                           prodl	equ	0xFF3
  3172                           wreg	equ	0xFE8
  3173                           status	equ	0xFD8
  3174                           
  3175 ;; *************** function _glcdDrawRectangle *****************
  3176 ;; Defined at:
  3177 ;;		line 172 in file "GLCD_PIC.c"
  3178 ;; Parameters:    Size  Location     Type
  3179 ;;  XS              1    wreg     unsigned char 
  3180 ;;  XE              1    6[COMRAM] unsigned char 
  3181 ;;  YS              1    7[COMRAM] unsigned char 
  3182 ;;  YE              1    8[COMRAM] unsigned char 
  3183 ;;  color           4    9[COMRAM] unsigned long 
  3184 ;; Auto vars:     Size  Location     Type
  3185 ;;  XS              1   24[COMRAM] unsigned char 
  3186 ;;  i               2   19[COMRAM] unsigned short 
  3187 ;;  colorData       3   21[COMRAM] unsigned char [3]
  3188 ;;  numLoops        2   17[COMRAM] unsigned short 
  3189 ;; Return value:  Size  Location     Type
  3190 ;;                  1    wreg      void 
  3191 ;; Registers used:
  3192 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3193 ;; Tracked objects:
  3194 ;;		On entry : 0/0
  3195 ;;		On exit  : 0/0
  3196 ;;		Unchanged: 0/0
  3197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3198 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3199 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3200 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3201 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3202 ;;Total ram usage:       19 bytes
  3203 ;; Hardware stack levels used:    1
  3204 ;; Hardware stack levels required when called:    4
  3205 ;; This function calls:
  3206 ;;		___wmul
  3207 ;;		_glcdTransfer
  3208 ;;		_glcd_ramwr
  3209 ;;		_spiSend
  3210 ;; This function is called by:
  3211 ;;		_main
  3212 ;;		_glcdDrawPixel
  3213 ;;		_initGLCD
  3214 ;; This function uses a non-reentrant model
  3215 ;;
  3216                           
  3217                           	psect	text14
  3218  00198A                     __ptext14:
  3219                           	opt stack 0
  3220  00198A                     _glcdDrawRectangle:
  3221                           	opt stack 25
  3222                           
  3223                           ;incstack = 0
  3224                           ;glcdDrawRectangle@XS stored from wreg
  3225  00198A  6E19               	movwf	glcdDrawRectangle@XS,c
  3226                           
  3227                           ;GLCD_PIC.c: 187: if(MADCTLbits.MX == 1 && MADCTLbits.MV ==1){
  3228  00198C  BC2A               	btfsc	_MADCTLbits,6,c
  3229  00198E  AA2A               	btfss	_MADCTLbits,5,c
  3230  001990  D005               	goto	l226
  3231                           
  3232                           ;GLCD_PIC.c: 189: YS += 3;
  3233  001992  0E03               	movlw	3
  3234  001994  2608               	addwf	glcdDrawRectangle@YS,f,c
  3235                           
  3236                           ;GLCD_PIC.c: 190: YE += 3;
  3237  001996  0E03               	movlw	3
  3238  001998  2609               	addwf	glcdDrawRectangle@YE,f,c
  3239  00199A  D015               	goto	l1517
  3240  00199C                     l226:
  3241                           
  3242                           ;GLCD_PIC.c: 194: else if(MADCTLbits.MY == 1){
  3243  00199C  AE2A               	btfss	_MADCTLbits,7,c
  3244  00199E  D008               	goto	l228
  3245                           
  3246                           ;GLCD_PIC.c: 196: YS += 2;
  3247  0019A0  0E02               	movlw	2
  3248  0019A2  2608               	addwf	glcdDrawRectangle@YS,f,c
  3249                           
  3250                           ;GLCD_PIC.c: 197: YE += 2;
  3251  0019A4  0E02               	movlw	2
  3252  0019A6  2609               	addwf	glcdDrawRectangle@YE,f,c
  3253                           
  3254                           ;GLCD_PIC.c: 198: XS += 3;
  3255  0019A8  0E03               	movlw	3
  3256  0019AA  2619               	addwf	glcdDrawRectangle@XS,f,c
  3257                           
  3258                           ;GLCD_PIC.c: 199: XE += 3;
  3259  0019AC  0E03               	movlw	3
  3260  0019AE  D00E               	goto	L10
  3261  0019B0                     l228:
  3262                           
  3263                           ;GLCD_PIC.c: 201: else if(MADCTLbits.MX == 1){
  3264  0019B0  AC2A               	btfss	_MADCTLbits,6,c
  3265  0019B2  D007               	goto	l1515
  3266                           
  3267                           ;GLCD_PIC.c: 203: YS += 2;
  3268  0019B4  0E02               	movlw	2
  3269  0019B6  2608               	addwf	glcdDrawRectangle@YS,f,c
  3270                           
  3271                           ;GLCD_PIC.c: 204: YE += 2;
  3272  0019B8  0E02               	movlw	2
  3273  0019BA  2609               	addwf	glcdDrawRectangle@YE,f,c
  3274                           
  3275                           ;GLCD_PIC.c: 205: XS += 1;
  3276  0019BC  2A19               	incf	glcdDrawRectangle@XS,f,c
  3277                           
  3278                           ;GLCD_PIC.c: 206: XE += 1;
  3279  0019BE  2A07               	incf	glcdDrawRectangle@XE,f,c
  3280                           
  3281                           ;GLCD_PIC.c: 207: }
  3282  0019C0  D006               	goto	l1521
  3283  0019C2                     l1515:
  3284                           
  3285                           ;GLCD_PIC.c: 208: else{
  3286                           ;GLCD_PIC.c: 210: YS += 1;
  3287  0019C2  2A08               	incf	glcdDrawRectangle@YS,f,c
  3288                           
  3289                           ;GLCD_PIC.c: 211: YE += 1;
  3290  0019C4  2A09               	incf	glcdDrawRectangle@YE,f,c
  3291  0019C6                     l1517:
  3292                           
  3293                           ;GLCD_PIC.c: 212: XS += 2;
  3294  0019C6  0E02               	movlw	2
  3295  0019C8  2619               	addwf	glcdDrawRectangle@XS,f,c
  3296                           
  3297                           ;GLCD_PIC.c: 213: XE += 2;
  3298  0019CA  0E02               	movlw	2
  3299  0019CC                     L10:
  3300  0019CC  2607               	addwf	glcdDrawRectangle@XE,f,c
  3301  0019CE                     l1521:
  3302                           
  3303                           ;GLCD_PIC.c: 214: }
  3304                           ;GLCD_PIC.c: 232: glcdTransfer(INST_RASET, CMD);
  3305  0019CE  0E01               	movlw	1
  3306  0019D0  6E04               	movwf	glcdTransfer@cmd,c
  3307  0019D2  0E3C               	movlw	low _INST_RASET
  3308  0019D4  6EF6               	movwf	tblptrl,c
  3309  0019D6                     	if	1	;There is more than 1 active tblptr byte
  3310  0019D6  0E10               	movlw	high _INST_RASET
  3311  0019D8  6EF7               	movwf	tblptrh,c
  3312  0019DA                     	endif
  3313  0019DA                     	if	0	;There are less than 3 active tblptr bytes
  3314  0019DA                     	endif
  3315  0019DA  0008               	tblrd		*
  3316  0019DC  50F5               	movf	tablat,w,c
  3317  0019DE  ECC1  F00E         	call	_glcdTransfer
  3318                           
  3319                           ;GLCD_PIC.c: 233: glcdTransfer(0x00, MEMWRITE);
  3320  0019E2  0E00               	movlw	0
  3321  0019E4  6E04               	movwf	glcdTransfer@cmd,c
  3322  0019E6  0E00               	movlw	0
  3323  0019E8  ECC1  F00E         	call	_glcdTransfer
  3324                           
  3325                           ;GLCD_PIC.c: 234: glcdTransfer(XS, MEMWRITE);
  3326  0019EC  0E00               	movlw	0
  3327  0019EE  6E04               	movwf	glcdTransfer@cmd,c
  3328  0019F0  5019               	movf	glcdDrawRectangle@XS,w,c
  3329  0019F2  ECC1  F00E         	call	_glcdTransfer
  3330                           
  3331                           ;GLCD_PIC.c: 235: glcdTransfer(0x00, MEMWRITE);
  3332  0019F6  0E00               	movlw	0
  3333  0019F8  6E04               	movwf	glcdTransfer@cmd,c
  3334  0019FA  0E00               	movlw	0
  3335  0019FC  ECC1  F00E         	call	_glcdTransfer
  3336                           
  3337                           ;GLCD_PIC.c: 236: glcdTransfer(XE - 1, MEMWRITE);
  3338  001A00  0E00               	movlw	0
  3339  001A02  6E04               	movwf	glcdTransfer@cmd,c
  3340  001A04  0407               	decf	glcdDrawRectangle@XE,w,c
  3341  001A06  ECC1  F00E         	call	_glcdTransfer
  3342                           
  3343                           ;GLCD_PIC.c: 240: glcdTransfer(INST_CASET, CMD);
  3344  001A0A  0E01               	movlw	1
  3345  001A0C  6E04               	movwf	glcdTransfer@cmd,c
  3346  001A0E  0E3D               	movlw	low _INST_CASET
  3347  001A10  6EF6               	movwf	tblptrl,c
  3348  001A12                     	if	1	;There is more than 1 active tblptr byte
  3349  001A12  0E10               	movlw	high _INST_CASET
  3350  001A14  6EF7               	movwf	tblptrh,c
  3351  001A16                     	endif
  3352  001A16                     	if	0	;There are less than 3 active tblptr bytes
  3353  001A16                     	endif
  3354  001A16  0008               	tblrd		*
  3355  001A18  50F5               	movf	tablat,w,c
  3356  001A1A  ECC1  F00E         	call	_glcdTransfer
  3357                           
  3358                           ;GLCD_PIC.c: 241: glcdTransfer(0x00, MEMWRITE);
  3359  001A1E  0E00               	movlw	0
  3360  001A20  6E04               	movwf	glcdTransfer@cmd,c
  3361  001A22  0E00               	movlw	0
  3362  001A24  ECC1  F00E         	call	_glcdTransfer
  3363                           
  3364                           ;GLCD_PIC.c: 242: glcdTransfer(YS, MEMWRITE);
  3365  001A28  0E00               	movlw	0
  3366  001A2A  6E04               	movwf	glcdTransfer@cmd,c
  3367  001A2C  5008               	movf	glcdDrawRectangle@YS,w,c
  3368  001A2E  ECC1  F00E         	call	_glcdTransfer
  3369                           
  3370                           ;GLCD_PIC.c: 243: glcdTransfer(0x00, MEMWRITE);
  3371  001A32  0E00               	movlw	0
  3372  001A34  6E04               	movwf	glcdTransfer@cmd,c
  3373  001A36  0E00               	movlw	0
  3374  001A38  ECC1  F00E         	call	_glcdTransfer
  3375                           
  3376                           ;GLCD_PIC.c: 244: glcdTransfer(YE - 1, MEMWRITE);
  3377  001A3C  0E00               	movlw	0
  3378  001A3E  6E04               	movwf	glcdTransfer@cmd,c
  3379  001A40  0409               	decf	glcdDrawRectangle@YE,w,c
  3380  001A42  ECC1  F00E         	call	_glcdTransfer
  3381                           
  3382                           ;GLCD_PIC.c: 246: glcd_ramwr();
  3383  001A46  EC41  F00F         	call	_glcd_ramwr	;wreg free
  3384                           
  3385                           ;GLCD_PIC.c: 250: if((XE == XS) && (YE == YS)){
  3386  001A4A  5019               	movf	glcdDrawRectangle@XS,w,c
  3387  001A4C  1807               	xorwf	glcdDrawRectangle@XE,w,c
  3388  001A4E  A4D8               	btfss	status,2,c
  3389  001A50  D014               	goto	l1549
  3390  001A52  5008               	movf	glcdDrawRectangle@YS,w,c
  3391  001A54  1809               	xorwf	glcdDrawRectangle@YE,w,c
  3392  001A56  A4D8               	btfss	status,2,c
  3393  001A58  D010               	goto	l1549
  3394                           
  3395                           ;GLCD_PIC.c: 258: glcdTransfer(color & 0xFF, MEMWRITE);
  3396  001A5A  0E00               	movlw	0
  3397  001A5C  6E04               	movwf	glcdTransfer@cmd,c
  3398  001A5E  500A               	movf	glcdDrawRectangle@color,w,c
  3399  001A60  ECC1  F00E         	call	_glcdTransfer
  3400                           
  3401                           ;GLCD_PIC.c: 259: glcdTransfer((color >> 8) & 0xFF, MEMWRITE);
  3402  001A64  0E00               	movlw	0
  3403  001A66  6E04               	movwf	glcdTransfer@cmd,c
  3404  001A68  500B               	movf	glcdDrawRectangle@color+1,w,c
  3405  001A6A  ECC1  F00E         	call	_glcdTransfer
  3406                           
  3407                           ;GLCD_PIC.c: 260: glcdTransfer((color >> 16) & 0xFF, MEMWRITE);
  3408  001A6E  0E00               	movlw	0
  3409  001A70  6E04               	movwf	glcdTransfer@cmd,c
  3410  001A72  500C               	movf	glcdDrawRectangle@color+2,w,c
  3411  001A74  ECC1  F00E         	call	_glcdTransfer
  3412                           
  3413                           ;GLCD_PIC.c: 261: }
  3414  001A78  0012               	return	
  3415  001A7A                     l1549:
  3416                           
  3417                           ;GLCD_PIC.c: 262: else{
  3418                           ;GLCD_PIC.c: 275: unsigned short numLoops = (XE - XS) * (YE - YS);
  3419  001A7A  5019               	movf	glcdDrawRectangle@XS,w,c
  3420  001A7C  6E0E               	movwf	??_glcdDrawRectangle& (0+255),c
  3421  001A7E  6A0F               	clrf	(??_glcdDrawRectangle+1)& (0+255),c
  3422  001A80  1E0E               	comf	??_glcdDrawRectangle,f,c
  3423  001A82  1E0F               	comf	??_glcdDrawRectangle+1,f,c
  3424  001A84  4A0E               	infsnz	??_glcdDrawRectangle,f,c
  3425  001A86  2A0F               	incf	??_glcdDrawRectangle+1,f,c
  3426  001A88  5007               	movf	glcdDrawRectangle@XE,w,c
  3427  001A8A  240E               	addwf	??_glcdDrawRectangle,w,c
  3428  001A8C  6E01               	movwf	___wmul@multiplier,c
  3429  001A8E  0E00               	movlw	0
  3430  001A90  200F               	addwfc	??_glcdDrawRectangle+1,w,c
  3431  001A92  6E02               	movwf	___wmul@multiplier+1,c
  3432  001A94  5008               	movf	glcdDrawRectangle@YS,w,c
  3433  001A96  6E10               	movwf	(??_glcdDrawRectangle+2)& (0+255),c
  3434  001A98  6A11               	clrf	(??_glcdDrawRectangle+3)& (0+255),c
  3435  001A9A  1E10               	comf	??_glcdDrawRectangle+2,f,c
  3436  001A9C  1E11               	comf	??_glcdDrawRectangle+3,f,c
  3437  001A9E  4A10               	infsnz	??_glcdDrawRectangle+2,f,c
  3438  001AA0  2A11               	incf	??_glcdDrawRectangle+3,f,c
  3439  001AA2  5009               	movf	glcdDrawRectangle@YE,w,c
  3440  001AA4  2410               	addwf	??_glcdDrawRectangle+2,w,c
  3441  001AA6  6E03               	movwf	___wmul@multiplicand,c
  3442  001AA8  0E00               	movlw	0
  3443  001AAA  2011               	addwfc	??_glcdDrawRectangle+3,w,c
  3444  001AAC  6E04               	movwf	___wmul@multiplicand+1,c
  3445  001AAE  ECD5  F00E         	call	___wmul	;wreg free
  3446  001AB2  C001  F012         	movff	?___wmul,glcdDrawRectangle@numLoops
  3447  001AB6  C002  F013         	movff	?___wmul+1,glcdDrawRectangle@numLoops+1
  3448                           
  3449                           ;GLCD_PIC.c: 276: unsigned char colorData[3];
  3450                           ;GLCD_PIC.c: 277: colorData[0] = color & 0xFF;
  3451  001ABA  C00A  F016         	movff	glcdDrawRectangle@color,glcdDrawRectangle@colorData
  3452                           
  3453                           ;GLCD_PIC.c: 278: colorData[1] = (color >> 8) & 0xFF;
  3454  001ABE  C00B  F017         	movff	glcdDrawRectangle@color+1,glcdDrawRectangle@colorData+1
  3455                           
  3456                           ;GLCD_PIC.c: 279: colorData[2] = (color >> 16) & 0xFF;
  3457  001AC2  C00C  F018         	movff	glcdDrawRectangle@color+2,glcdDrawRectangle@colorData+2
  3458                           
  3459                           ;GLCD_PIC.c: 281: LATDbits.LATD0 = 0;
  3460  001AC6  908C               	bcf	3980,0,c	;volatile
  3461                           
  3462                           ;GLCD_PIC.c: 282: LATDbits.LATD1 = 1;
  3463  001AC8  828C               	bsf	3980,1,c	;volatile
  3464                           
  3465                           ;GLCD_PIC.c: 283: for(unsigned short i = 0; i < numLoops; i++){
  3466  001ACA  0E00               	movlw	0
  3467  001ACC  6E15               	movwf	glcdDrawRectangle@i+1,c
  3468  001ACE  0E00               	movlw	0
  3469  001AD0  6E14               	movwf	glcdDrawRectangle@i,c
  3470  001AD2  D00B               	goto	l1567
  3471  001AD4                     l1563:
  3472                           
  3473                           ;GLCD_PIC.c: 284: spiSend(colorData[0]);
  3474  001AD4  5016               	movf	glcdDrawRectangle@colorData,w,c
  3475  001AD6  EC52  F00F         	call	_spiSend
  3476                           
  3477                           ;GLCD_PIC.c: 285: spiSend(colorData[1]);
  3478  001ADA  5017               	movf	glcdDrawRectangle@colorData+1,w,c
  3479  001ADC  EC52  F00F         	call	_spiSend
  3480                           
  3481                           ;GLCD_PIC.c: 286: spiSend(colorData[2]);
  3482  001AE0  5018               	movf	glcdDrawRectangle@colorData+2,w,c
  3483  001AE2  EC52  F00F         	call	_spiSend
  3484  001AE6  4A14               	infsnz	glcdDrawRectangle@i,f,c
  3485  001AE8  2A15               	incf	glcdDrawRectangle@i+1,f,c
  3486  001AEA                     l1567:
  3487  001AEA  5012               	movf	glcdDrawRectangle@numLoops,w,c
  3488  001AEC  5C14               	subwf	glcdDrawRectangle@i,w,c
  3489  001AEE  5013               	movf	glcdDrawRectangle@numLoops+1,w,c
  3490  001AF0  5815               	subwfb	glcdDrawRectangle@i+1,w,c
  3491  001AF2  A0D8               	btfss	status,0,c
  3492  001AF4  D7EF               	goto	l1563
  3493                           
  3494                           ;GLCD_PIC.c: 287: }
  3495                           ;GLCD_PIC.c: 288: LATDbits.LATD0 = 1;
  3496  001AF6  808C               	bsf	3980,0,c	;volatile
  3497  001AF8  0012               	return	
  3498  001AFA                     __end_of_glcdDrawRectangle:
  3499                           	opt stack 0
  3500                           tblptru	equ	0xFF8
  3501                           tblptrh	equ	0xFF7
  3502                           tblptrl	equ	0xFF6
  3503                           tablat	equ	0xFF5
  3504                           prodh	equ	0xFF4
  3505                           prodl	equ	0xFF3
  3506                           wreg	equ	0xFE8
  3507                           status	equ	0xFD8
  3508                           
  3509 ;; *************** function _glcd_ramwr *****************
  3510 ;; Defined at:
  3511 ;;		line 156 in file "GLCD_PIC.c"
  3512 ;; Parameters:    Size  Location     Type
  3513 ;;		None
  3514 ;; Auto vars:     Size  Location     Type
  3515 ;;		None
  3516 ;; Return value:  Size  Location     Type
  3517 ;;                  1    wreg      void 
  3518 ;; Registers used:
  3519 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3520 ;; Tracked objects:
  3521 ;;		On entry : 0/0
  3522 ;;		On exit  : 0/0
  3523 ;;		Unchanged: 0/0
  3524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3526 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3528 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3529 ;;Total ram usage:        0 bytes
  3530 ;; Hardware stack levels used:    1
  3531 ;; Hardware stack levels required when called:    3
  3532 ;; This function calls:
  3533 ;;		_glcdTransfer
  3534 ;; This function is called by:
  3535 ;;		_glcdDrawRectangle
  3536 ;; This function uses a non-reentrant model
  3537 ;;
  3538                           
  3539                           	psect	text15
  3540  001E82                     __ptext15:
  3541                           	opt stack 0
  3542  001E82                     _glcd_ramwr:
  3543                           	opt stack 25
  3544                           
  3545                           ;GLCD_PIC.c: 157: glcdTransfer(INST_RAMWR, CMD);
  3546                           
  3547                           ;incstack = 0
  3548  001E82  0E01               	movlw	1
  3549  001E84  6E04               	movwf	glcdTransfer@cmd,c
  3550  001E86  0E3B               	movlw	low _INST_RAMWR
  3551  001E88  6EF6               	movwf	tblptrl,c
  3552  001E8A                     	if	1	;There is more than 1 active tblptr byte
  3553  001E8A  0E10               	movlw	high _INST_RAMWR
  3554  001E8C  6EF7               	movwf	tblptrh,c
  3555  001E8E                     	endif
  3556  001E8E                     	if	0	;There are less than 3 active tblptr bytes
  3557  001E8E                     	endif
  3558  001E8E  0008               	tblrd		*
  3559  001E90  50F5               	movf	tablat,w,c
  3560  001E92  ECC1  F00E         	call	_glcdTransfer
  3561  001E96  0012               	return		;funcret
  3562  001E98                     __end_of_glcd_ramwr:
  3563                           	opt stack 0
  3564                           tblptru	equ	0xFF8
  3565                           tblptrh	equ	0xFF7
  3566                           tblptrl	equ	0xFF6
  3567                           tablat	equ	0xFF5
  3568                           prodh	equ	0xFF4
  3569                           prodl	equ	0xFF3
  3570                           wreg	equ	0xFE8
  3571                           status	equ	0xFD8
  3572                           
  3573 ;; *************** function _glcdTransfer *****************
  3574 ;; Defined at:
  3575 ;;		line 97 in file "GLCD_PIC.c"
  3576 ;; Parameters:    Size  Location     Type
  3577 ;;  byte            1    wreg     unsigned char 
  3578 ;;  cmd             1    3[COMRAM] enum E2909
  3579 ;; Auto vars:     Size  Location     Type
  3580 ;;  byte            1    5[COMRAM] unsigned char 
  3581 ;; Return value:  Size  Location     Type
  3582 ;;                  1    wreg      void 
  3583 ;; Registers used:
  3584 ;;		wreg, status,2, status,0, cstack
  3585 ;; Tracked objects:
  3586 ;;		On entry : 0/0
  3587 ;;		On exit  : 0/0
  3588 ;;		Unchanged: 0/0
  3589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3590 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3591 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3592 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3593 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3594 ;;Total ram usage:        3 bytes
  3595 ;; Hardware stack levels used:    1
  3596 ;; Hardware stack levels required when called:    2
  3597 ;; This function calls:
  3598 ;;		_spiSend
  3599 ;; This function is called by:
  3600 ;;		_glcd_swreset
  3601 ;;		_glcd_slpout
  3602 ;;		_glcd_setmadctl
  3603 ;;		_glcd_noron
  3604 ;;		_glcd_invoff
  3605 ;;		_glcd_invon
  3606 ;;		_glcd_dispon
  3607 ;;		_glcd_ramwr
  3608 ;;		_glcd_idmoff
  3609 ;;		_glcdDrawRectangle
  3610 ;;		_glcdSetCOLMOD
  3611 ;;		_initGLCD
  3612 ;;		_glcd_slpin
  3613 ;;		_glcd_ptlon
  3614 ;;		_glcd_dispoff
  3615 ;;		_glcd_teoff
  3616 ;;		_glcd_idmon
  3617 ;; This function uses a non-reentrant model
  3618 ;;
  3619                           
  3620                           	psect	text16
  3621  001D82                     __ptext16:
  3622                           	opt stack 0
  3623  001D82                     _glcdTransfer:
  3624                           	opt stack 26
  3625                           
  3626                           ;incstack = 0
  3627                           ;glcdTransfer@byte stored from wreg
  3628  001D82  6E06               	movwf	glcdTransfer@byte,c
  3629                           
  3630                           ;GLCD_PIC.c: 98: LATDbits.LATD1 = (cmd == CMD) ? 0 : 1;
  3631  001D84  0404               	decf	glcdTransfer@cmd,w,c
  3632  001D86  B4D8               	btfsc	status,2,c
  3633  001D88  D003               	goto	u470
  3634  001D8A  6A05               	clrf	??_glcdTransfer& (0+255),c
  3635  001D8C  2A05               	incf	??_glcdTransfer& (0+255),f,c
  3636  001D8E  D001               	goto	u488
  3637  001D90                     u470:
  3638  001D90  6A05               	clrf	??_glcdTransfer& (0+255),c
  3639  001D92                     u488:
  3640  001D92  4605               	rlncf	??_glcdTransfer,f,c
  3641  001D94  508C               	movf	3980,w,c	;volatile
  3642  001D96  1805               	xorwf	??_glcdTransfer,w,c
  3643  001D98  0BFD               	andlw	-3
  3644  001D9A  1805               	xorwf	??_glcdTransfer,w,c
  3645  001D9C  6E8C               	movwf	3980,c	;volatile
  3646                           
  3647                           ;GLCD_PIC.c: 102: LATDbits.LATD0 = 0;
  3648  001D9E  908C               	bcf	3980,0,c	;volatile
  3649                           
  3650                           ;GLCD_PIC.c: 104: spiSend(byte);
  3651  001DA0  5006               	movf	glcdTransfer@byte,w,c
  3652  001DA2  EC52  F00F         	call	_spiSend
  3653                           
  3654                           ;GLCD_PIC.c: 106: LATDbits.LATD0 = 1;
  3655  001DA6  808C               	bsf	3980,0,c	;volatile
  3656  001DA8  0012               	return		;funcret
  3657  001DAA                     __end_of_glcdTransfer:
  3658                           	opt stack 0
  3659                           tblptru	equ	0xFF8
  3660                           tblptrh	equ	0xFF7
  3661                           tblptrl	equ	0xFF6
  3662                           tablat	equ	0xFF5
  3663                           prodh	equ	0xFF4
  3664                           prodl	equ	0xFF3
  3665                           wreg	equ	0xFE8
  3666                           status	equ	0xFD8
  3667                           
  3668 ;; *************** function _spiSend *****************
  3669 ;; Defined at:
  3670 ;;		line 29 in file "SPI_PIC.c"
  3671 ;; Parameters:    Size  Location     Type
  3672 ;;  val             1    wreg     unsigned char 
  3673 ;; Auto vars:     Size  Location     Type
  3674 ;;  val             1    2[COMRAM] unsigned char 
  3675 ;; Return value:  Size  Location     Type
  3676 ;;                  1    wreg      void 
  3677 ;; Registers used:
  3678 ;;		wreg, status,2, cstack
  3679 ;; Tracked objects:
  3680 ;;		On entry : 0/0
  3681 ;;		On exit  : 0/0
  3682 ;;		Unchanged: 0/0
  3683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3684 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3685 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3686 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3687 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3688 ;;Total ram usage:        1 bytes
  3689 ;; Hardware stack levels used:    1
  3690 ;; Hardware stack levels required when called:    1
  3691 ;; This function calls:
  3692 ;;		_spiTransfer
  3693 ;; This function is called by:
  3694 ;;		_glcdTransfer
  3695 ;;		_glcdDrawRectangle
  3696 ;; This function uses a non-reentrant model
  3697 ;;
  3698                           
  3699                           	psect	text17
  3700  001EA4                     __ptext17:
  3701                           	opt stack 0
  3702  001EA4                     _spiSend:
  3703                           	opt stack 26
  3704                           
  3705                           ;incstack = 0
  3706                           ;spiSend@val stored from wreg
  3707  001EA4  6E03               	movwf	spiSend@val,c
  3708                           
  3709                           ;SPI_PIC.c: 30: spiTransfer(val);
  3710  001EA6  5003               	movf	spiSend@val,w,c
  3711  001EA8  ECE8  F00E         	call	_spiTransfer
  3712  001EAC  0012               	return		;funcret
  3713  001EAE                     __end_of_spiSend:
  3714                           	opt stack 0
  3715                           tblptru	equ	0xFF8
  3716                           tblptrh	equ	0xFF7
  3717                           tblptrl	equ	0xFF6
  3718                           tablat	equ	0xFF5
  3719                           prodh	equ	0xFF4
  3720                           prodl	equ	0xFF3
  3721                           wreg	equ	0xFE8
  3722                           status	equ	0xFD8
  3723                           
  3724 ;; *************** function _spiTransfer *****************
  3725 ;; Defined at:
  3726 ;;		line 14 in file "SPI_PIC.c"
  3727 ;; Parameters:    Size  Location     Type
  3728 ;;  byteToTransf    1    wreg     unsigned char 
  3729 ;; Auto vars:     Size  Location     Type
  3730 ;;  byteToTransf    1    1[COMRAM] unsigned char 
  3731 ;; Return value:  Size  Location     Type
  3732 ;;                  1    wreg      unsigned char 
  3733 ;; Registers used:
  3734 ;;		wreg, status,2
  3735 ;; Tracked objects:
  3736 ;;		On entry : 0/0
  3737 ;;		On exit  : 0/0
  3738 ;;		Unchanged: 0/0
  3739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3740 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3741 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3742 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3743 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3744 ;;Total ram usage:        2 bytes
  3745 ;; Hardware stack levels used:    1
  3746 ;; This function calls:
  3747 ;;		Nothing
  3748 ;; This function is called by:
  3749 ;;		_spiSend
  3750 ;;		_spiReceive
  3751 ;; This function uses a non-reentrant model
  3752 ;;
  3753                           
  3754                           	psect	text18
  3755  001DD0                     __ptext18:
  3756                           	opt stack 0
  3757  001DD0                     _spiTransfer:
  3758                           	opt stack 26
  3759                           
  3760                           ;incstack = 0
  3761                           ;spiTransfer@byteToTransfer stored from wreg
  3762  001DD0  6E02               	movwf	spiTransfer@byteToTransfer,c
  3763                           
  3764                           ;SPI_PIC.c: 18: SSPBUF = byteToTransfer;
  3765  001DD2  C002  FFC9         	movff	spiTransfer@byteToTransfer,4041	;volatile
  3766  001DD6                     l1477:
  3767  001DD6  B69E               	btfsc	3998,3,c	;volatile
  3768  001DD8  D002               	goto	u450
  3769  001DDA  0E01               	movlw	1
  3770  001DDC  D001               	goto	u452
  3771  001DDE                     u450:
  3772  001DDE  0E00               	movlw	0
  3773  001DE0                     u452:
  3774  001DE0  6E01               	movwf	??_spiTransfer& (0+255),c
  3775  001DE2  B0C7               	btfsc	4039,0,c	;volatile
  3776  001DE4  D002               	goto	u460
  3777  001DE6  0E01               	movlw	1
  3778  001DE8  D001               	goto	u462
  3779  001DEA                     u460:
  3780  001DEA  0E00               	movlw	0
  3781  001DEC                     u462:
  3782  001DEC  1001               	iorwf	??_spiTransfer,w,c
  3783  001DEE  E1F3               	bnz	l1477
  3784                           
  3785                           ;SPI_PIC.c: 24: }
  3786                           ;SPI_PIC.c: 26: return SSPBUF;
  3787  001DF0  50C9               	movf	4041,w,c	;volatile
  3788  001DF2  0012               	return	
  3789  001DF4                     __end_of_spiTransfer:
  3790                           	opt stack 0
  3791                           tblptru	equ	0xFF8
  3792                           tblptrh	equ	0xFF7
  3793                           tblptrl	equ	0xFF6
  3794                           tablat	equ	0xFF5
  3795                           prodh	equ	0xFF4
  3796                           prodl	equ	0xFF3
  3797                           wreg	equ	0xFE8
  3798                           status	equ	0xFD8
  3799                           
  3800 ;; *************** function ___wmul *****************
  3801 ;; Defined at:
  3802 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul16.c"
  3803 ;; Parameters:    Size  Location     Type
  3804 ;;  multiplier      2    0[COMRAM] unsigned int 
  3805 ;;  multiplicand    2    2[COMRAM] unsigned int 
  3806 ;; Auto vars:     Size  Location     Type
  3807 ;;  product         2    4[COMRAM] unsigned int 
  3808 ;; Return value:  Size  Location     Type
  3809 ;;                  2    0[COMRAM] unsigned int 
  3810 ;; Registers used:
  3811 ;;		wreg, status,2, status,0, prodl, prodh
  3812 ;; Tracked objects:
  3813 ;;		On entry : 0/0
  3814 ;;		On exit  : 0/0
  3815 ;;		Unchanged: 0/0
  3816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3817 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3818 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3820 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3821 ;;Total ram usage:        6 bytes
  3822 ;; Hardware stack levels used:    1
  3823 ;; This function calls:
  3824 ;;		Nothing
  3825 ;; This function is called by:
  3826 ;;		_main
  3827 ;;		_glcdDrawRectangle
  3828 ;; This function uses a non-reentrant model
  3829 ;;
  3830                           
  3831                           	psect	text19
  3832  001DAA                     __ptext19:
  3833                           	opt stack 0
  3834  001DAA                     ___wmul:
  3835                           	opt stack 28
  3836                           
  3837                           ;incstack = 0
  3838  001DAA  5001               	movf	___wmul@multiplier,w,c
  3839  001DAC  0203               	mulwf	___wmul@multiplicand,c
  3840  001DAE  CFF3 F005          	movff	prodl,___wmul@product
  3841  001DB2  CFF4 F006          	movff	prodh,___wmul@product+1
  3842  001DB6  5001               	movf	___wmul@multiplier,w,c
  3843  001DB8  0204               	mulwf	___wmul@multiplicand+1,c
  3844  001DBA  50F3               	movf	prodl,w,c
  3845  001DBC  2606               	addwf	___wmul@product+1,f,c
  3846  001DBE  5002               	movf	___wmul@multiplier+1,w,c
  3847  001DC0  0203               	mulwf	___wmul@multiplicand,c
  3848  001DC2  50F3               	movf	prodl,w,c
  3849  001DC4  2606               	addwf	___wmul@product+1,f,c
  3850  001DC6  C005  F001         	movff	___wmul@product,?___wmul
  3851  001DCA  C006  F002         	movff	___wmul@product+1,?___wmul+1
  3852  001DCE  0012               	return	
  3853  001DD0                     __end_of___wmul:
  3854                           	opt stack 0
  3855                           tblptru	equ	0xFF8
  3856                           tblptrh	equ	0xFF7
  3857                           tblptrl	equ	0xFF6
  3858                           tablat	equ	0xFF5
  3859                           prodh	equ	0xFF4
  3860                           prodl	equ	0xFF3
  3861                           wreg	equ	0xFE8
  3862                           status	equ	0xFD8
  3863                           
  3864 ;; *************** function ___awmod *****************
  3865 ;; Defined at:
  3866 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awmod.c"
  3867 ;; Parameters:    Size  Location     Type
  3868 ;;  dividend        2    8[COMRAM] int 
  3869 ;;  divisor         2   10[COMRAM] int 
  3870 ;; Auto vars:     Size  Location     Type
  3871 ;;  sign            1   13[COMRAM] unsigned char 
  3872 ;;  counter         1   12[COMRAM] unsigned char 
  3873 ;; Return value:  Size  Location     Type
  3874 ;;                  2    8[COMRAM] int 
  3875 ;; Registers used:
  3876 ;;		wreg, status,2, status,0
  3877 ;; Tracked objects:
  3878 ;;		On entry : 0/0
  3879 ;;		On exit  : 0/0
  3880 ;;		Unchanged: 0/0
  3881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3882 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3883 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3885 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3886 ;;Total ram usage:        6 bytes
  3887 ;; Hardware stack levels used:    1
  3888 ;; This function calls:
  3889 ;;		Nothing
  3890 ;; This function is called by:
  3891 ;;		_main
  3892 ;; This function uses a non-reentrant model
  3893 ;;
  3894                           
  3895                           	psect	text20
  3896  001B7E                     __ptext20:
  3897                           	opt stack 0
  3898  001B7E                     ___awmod:
  3899                           	opt stack 30
  3900                           
  3901                           ;incstack = 0
  3902  001B7E  0E00               	movlw	0
  3903  001B80  6E0E               	movwf	___awmod@sign,c
  3904  001B82  AE0A               	btfss	___awmod@dividend+1,7,c
  3905  001B84  D006               	goto	l1795
  3906  001B86  6C09               	negf	___awmod@dividend,c
  3907  001B88  1E0A               	comf	___awmod@dividend+1,f,c
  3908  001B8A  B0D8               	btfsc	status,0,c
  3909  001B8C  2A0A               	incf	___awmod@dividend+1,f,c
  3910  001B8E  0E01               	movlw	1
  3911  001B90  6E0E               	movwf	___awmod@sign,c
  3912  001B92                     l1795:
  3913  001B92  AE0C               	btfss	___awmod@divisor+1,7,c
  3914  001B94  D004               	goto	l1799
  3915  001B96  6C0B               	negf	___awmod@divisor,c
  3916  001B98  1E0C               	comf	___awmod@divisor+1,f,c
  3917  001B9A  B0D8               	btfsc	status,0,c
  3918  001B9C  2A0C               	incf	___awmod@divisor+1,f,c
  3919  001B9E                     l1799:
  3920  001B9E  500B               	movf	___awmod@divisor,w,c
  3921  001BA0  100C               	iorwf	___awmod@divisor+1,w,c
  3922  001BA2  B4D8               	btfsc	status,2,c
  3923  001BA4  D018               	goto	l1815
  3924  001BA6  0E01               	movlw	1
  3925  001BA8  6E0D               	movwf	___awmod@counter,c
  3926  001BAA  D004               	goto	l1805
  3927  001BAC                     l1803:
  3928  001BAC  90D8               	bcf	status,0,c
  3929  001BAE  360B               	rlcf	___awmod@divisor,f,c
  3930  001BB0  360C               	rlcf	___awmod@divisor+1,f,c
  3931  001BB2  2A0D               	incf	___awmod@counter,f,c
  3932  001BB4                     l1805:
  3933  001BB4  AE0C               	btfss	___awmod@divisor+1,7,c
  3934  001BB6  D7FA               	goto	l1803
  3935  001BB8                     l1807:
  3936  001BB8  500B               	movf	___awmod@divisor,w,c
  3937  001BBA  5C09               	subwf	___awmod@dividend,w,c
  3938  001BBC  500C               	movf	___awmod@divisor+1,w,c
  3939  001BBE  580A               	subwfb	___awmod@dividend+1,w,c
  3940  001BC0  A0D8               	btfss	status,0,c
  3941  001BC2  D004               	goto	l1811
  3942  001BC4  500B               	movf	___awmod@divisor,w,c
  3943  001BC6  5E09               	subwf	___awmod@dividend,f,c
  3944  001BC8  500C               	movf	___awmod@divisor+1,w,c
  3945  001BCA  5A0A               	subwfb	___awmod@dividend+1,f,c
  3946  001BCC                     l1811:
  3947  001BCC  90D8               	bcf	status,0,c
  3948  001BCE  320C               	rrcf	___awmod@divisor+1,f,c
  3949  001BD0  320B               	rrcf	___awmod@divisor,f,c
  3950  001BD2  2E0D               	decfsz	___awmod@counter,f,c
  3951  001BD4  D7F1               	goto	l1807
  3952  001BD6                     l1815:
  3953  001BD6  500E               	movf	___awmod@sign,w,c
  3954  001BD8  B4D8               	btfsc	status,2,c
  3955  001BDA  D004               	goto	l1819
  3956  001BDC  6C09               	negf	___awmod@dividend,c
  3957  001BDE  1E0A               	comf	___awmod@dividend+1,f,c
  3958  001BE0  B0D8               	btfsc	status,0,c
  3959  001BE2  2A0A               	incf	___awmod@dividend+1,f,c
  3960  001BE4                     l1819:
  3961  001BE4  C009  F009         	movff	___awmod@dividend,?___awmod
  3962  001BE8  C00A  F00A         	movff	___awmod@dividend+1,?___awmod+1
  3963  001BEC  0012               	return	
  3964  001BEE                     __end_of___awmod:
  3965                           	opt stack 0
  3966                           tblptru	equ	0xFF8
  3967                           tblptrh	equ	0xFF7
  3968                           tblptrl	equ	0xFF6
  3969                           tablat	equ	0xFF5
  3970                           prodh	equ	0xFF4
  3971                           prodl	equ	0xFF3
  3972                           wreg	equ	0xFE8
  3973                           status	equ	0xFD8
  3974                           
  3975 ;; *************** function ___awdiv *****************
  3976 ;; Defined at:
  3977 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awdiv.c"
  3978 ;; Parameters:    Size  Location     Type
  3979 ;;  dividend        2    0[COMRAM] int 
  3980 ;;  divisor         2    2[COMRAM] int 
  3981 ;; Auto vars:     Size  Location     Type
  3982 ;;  quotient        2    6[COMRAM] int 
  3983 ;;  sign            1    5[COMRAM] unsigned char 
  3984 ;;  counter         1    4[COMRAM] unsigned char 
  3985 ;; Return value:  Size  Location     Type
  3986 ;;                  2    0[COMRAM] int 
  3987 ;; Registers used:
  3988 ;;		wreg, status,2, status,0
  3989 ;; Tracked objects:
  3990 ;;		On entry : 0/0
  3991 ;;		On exit  : 0/0
  3992 ;;		Unchanged: 0/0
  3993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3994 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3995 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3997 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3998 ;;Total ram usage:        8 bytes
  3999 ;; Hardware stack levels used:    1
  4000 ;; This function calls:
  4001 ;;		Nothing
  4002 ;; This function is called by:
  4003 ;;		_main
  4004 ;; This function uses a non-reentrant model
  4005 ;;
  4006                           
  4007                           	psect	text21
  4008  001AFA                     __ptext21:
  4009                           	opt stack 0
  4010  001AFA                     ___awdiv:
  4011                           	opt stack 30
  4012                           
  4013                           ;incstack = 0
  4014  001AFA  0E00               	movlw	0
  4015  001AFC  6E06               	movwf	___awdiv@sign,c
  4016  001AFE  AE04               	btfss	___awdiv@divisor+1,7,c
  4017  001B00  D006               	goto	l1751
  4018  001B02  6C03               	negf	___awdiv@divisor,c
  4019  001B04  1E04               	comf	___awdiv@divisor+1,f,c
  4020  001B06  B0D8               	btfsc	status,0,c
  4021  001B08  2A04               	incf	___awdiv@divisor+1,f,c
  4022  001B0A  0E01               	movlw	1
  4023  001B0C  6E06               	movwf	___awdiv@sign,c
  4024  001B0E                     l1751:
  4025  001B0E  AE02               	btfss	___awdiv@dividend+1,7,c
  4026  001B10  D006               	goto	l1757
  4027  001B12  6C01               	negf	___awdiv@dividend,c
  4028  001B14  1E02               	comf	___awdiv@dividend+1,f,c
  4029  001B16  B0D8               	btfsc	status,0,c
  4030  001B18  2A02               	incf	___awdiv@dividend+1,f,c
  4031  001B1A  0E01               	movlw	1
  4032  001B1C  1A06               	xorwf	___awdiv@sign,f,c
  4033  001B1E                     l1757:
  4034  001B1E  0E00               	movlw	0
  4035  001B20  6E08               	movwf	___awdiv@quotient+1,c
  4036  001B22  0E00               	movlw	0
  4037  001B24  6E07               	movwf	___awdiv@quotient,c
  4038  001B26  5003               	movf	___awdiv@divisor,w,c
  4039  001B28  1004               	iorwf	___awdiv@divisor+1,w,c
  4040  001B2A  B4D8               	btfsc	status,2,c
  4041  001B2C  D01C               	goto	l1779
  4042  001B2E  0E01               	movlw	1
  4043  001B30  6E05               	movwf	___awdiv@counter,c
  4044  001B32  D004               	goto	l1765
  4045  001B34                     l1763:
  4046  001B34  90D8               	bcf	status,0,c
  4047  001B36  3603               	rlcf	___awdiv@divisor,f,c
  4048  001B38  3604               	rlcf	___awdiv@divisor+1,f,c
  4049  001B3A  2A05               	incf	___awdiv@counter,f,c
  4050  001B3C                     l1765:
  4051  001B3C  AE04               	btfss	___awdiv@divisor+1,7,c
  4052  001B3E  D7FA               	goto	l1763
  4053  001B40                     l1767:
  4054  001B40  90D8               	bcf	status,0,c
  4055  001B42  3607               	rlcf	___awdiv@quotient,f,c
  4056  001B44  3608               	rlcf	___awdiv@quotient+1,f,c
  4057  001B46  5003               	movf	___awdiv@divisor,w,c
  4058  001B48  5C01               	subwf	___awdiv@dividend,w,c
  4059  001B4A  5004               	movf	___awdiv@divisor+1,w,c
  4060  001B4C  5802               	subwfb	___awdiv@dividend+1,w,c
  4061  001B4E  A0D8               	btfss	status,0,c
  4062  001B50  D005               	goto	l1775
  4063  001B52  5003               	movf	___awdiv@divisor,w,c
  4064  001B54  5E01               	subwf	___awdiv@dividend,f,c
  4065  001B56  5004               	movf	___awdiv@divisor+1,w,c
  4066  001B58  5A02               	subwfb	___awdiv@dividend+1,f,c
  4067  001B5A  8007               	bsf	___awdiv@quotient,0,c
  4068  001B5C                     l1775:
  4069  001B5C  90D8               	bcf	status,0,c
  4070  001B5E  3204               	rrcf	___awdiv@divisor+1,f,c
  4071  001B60  3203               	rrcf	___awdiv@divisor,f,c
  4072  001B62  2E05               	decfsz	___awdiv@counter,f,c
  4073  001B64  D7ED               	goto	l1767
  4074  001B66                     l1779:
  4075  001B66  5006               	movf	___awdiv@sign,w,c
  4076  001B68  B4D8               	btfsc	status,2,c
  4077  001B6A  D004               	goto	l1783
  4078  001B6C  6C07               	negf	___awdiv@quotient,c
  4079  001B6E  1E08               	comf	___awdiv@quotient+1,f,c
  4080  001B70  B0D8               	btfsc	status,0,c
  4081  001B72  2A08               	incf	___awdiv@quotient+1,f,c
  4082  001B74                     l1783:
  4083  001B74  C007  F001         	movff	___awdiv@quotient,?___awdiv
  4084  001B78  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  4085  001B7C  0012               	return	
  4086  001B7E                     __end_of___awdiv:
  4087                           	opt stack 0
  4088                           tblptru	equ	0xFF8
  4089                           tblptrh	equ	0xFF7
  4090                           tblptrl	equ	0xFF6
  4091                           tablat	equ	0xFF5
  4092                           prodh	equ	0xFF4
  4093                           prodl	equ	0xFF3
  4094                           wreg	equ	0xFE8
  4095                           status	equ	0xFD8
  4096                           tblptru	equ	0xFF8
  4097                           tblptrh	equ	0xFF7
  4098                           tblptrl	equ	0xFF6
  4099                           tablat	equ	0xFF5
  4100                           prodh	equ	0xFF4
  4101                           prodl	equ	0xFF3
  4102                           wreg	equ	0xFE8
  4103                           status	equ	0xFD8
  4104                           
  4105                           	psect	rparam
  4106  0000                     tblptru	equ	0xFF8
  4107                           tblptrh	equ	0xFF7
  4108                           tblptrl	equ	0xFF6
  4109                           tablat	equ	0xFF5
  4110                           prodh	equ	0xFF4
  4111                           prodl	equ	0xFF3
  4112                           wreg	equ	0xFE8
  4113                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    76
    Data        0
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     41      42
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_glcdDrawPixel
    _initGLCD->_glcdDrawRectangle
    _glcd_swreset->_glcdTransfer
    _glcd_slpout->_glcdTransfer
    _glcd_noron->_glcdTransfer
    _glcd_invoff->_glcdTransfer
    _glcd_idmoff->_glcdTransfer
    _glcd_dispon->_glcdTransfer
    _glcdSetCOLMOD->_glcdTransfer
    _glcd_invon->_glcdTransfer
    _glcd_setmadctl->_glcdTransfer
    _glcdDrawPixel->_glcdDrawRectangle
    _glcdDrawRectangle->___wmul
    _glcdDrawRectangle->_glcdTransfer
    _glcd_ramwr->_glcdTransfer
    _glcdTransfer->_spiSend
    _spiSend->_spiTransfer
    ___awmod->___awdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                17    17      0  106613
                                             32 COMRAM     9     9      0
                            ___awdiv
                            ___awmod
                             ___wmul
                      _glcdDrawPixel
                  _glcdDrawRectangle
                      _glcdSetOrigin
                        _glcd_invoff
                         _glcd_invon
                           _initGLCD
 ---------------------------------------------------------------------------------
 (1) _initGLCD                                             1     1      0   58437
                                             25 COMRAM     1     1      0
                  _glcdDrawRectangle
                      _glcdSetCOLMOD
                       _glcdTransfer
                        _glcd_dispon
                        _glcd_idmoff
                        _glcd_invoff
                         _glcd_noron
                     _glcd_setmadctl
                        _glcd_slpout
                       _glcd_swreset
                            _spiInit
 ---------------------------------------------------------------------------------
 (2) _spiInit                                              1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _glcd_swreset                                         2     2      0    4876
                                              6 COMRAM     2     2      0
                       _glcdTransfer
 ---------------------------------------------------------------------------------
 (2) _glcd_slpout                                          2     2      0    4876
                                              6 COMRAM     2     2      0
                       _glcdTransfer
 ---------------------------------------------------------------------------------
 (2) _glcd_noron                                           0     0      0    4876
                       _glcdTransfer
 ---------------------------------------------------------------------------------
 (2) _glcd_invoff                                          0     0      0    4876
                       _glcdTransfer
 ---------------------------------------------------------------------------------
 (2) _glcd_idmoff                                          0     0      0    4876
                       _glcdTransfer
 ---------------------------------------------------------------------------------
 (2) _glcd_dispon                                          0     0      0    4876
                       _glcdTransfer
 ---------------------------------------------------------------------------------
 (2) _glcdSetCOLMOD                                        3     3      0    4924
                                              6 COMRAM     3     3      0
                       _glcdTransfer
 ---------------------------------------------------------------------------------
 (1) _glcd_invon                                           0     0      0    4876
                       _glcdTransfer
 ---------------------------------------------------------------------------------
 (1) _glcdSetOrigin                                        1     1      0    4898
                                              6 COMRAM     1     1      0
                     _glcd_setmadctl
 ---------------------------------------------------------------------------------
 (2) _glcd_setmadctl                                       0     0      0    4876
                       _glcdTransfer
 ---------------------------------------------------------------------------------
 (1) _glcdDrawPixel                                        7     2      5   16159
                                             25 COMRAM     7     2      5
                            ___awmod (ARG)
                  _glcdDrawRectangle
 ---------------------------------------------------------------------------------
 (2) _glcdDrawRectangle                                   19    12      7   14483
                                              6 COMRAM    19    12      7
                             ___wmul
                       _glcdTransfer
                         _glcd_ramwr
                            _spiSend
 ---------------------------------------------------------------------------------
 (3) _glcd_ramwr                                           0     0      0    4876
                       _glcdTransfer
 ---------------------------------------------------------------------------------
 (3) _glcdTransfer                                         3     2      1    4876
                                              3 COMRAM     3     2      1
                            _spiSend
 ---------------------------------------------------------------------------------
 (4) _spiSend                                              1     1      0      44
                                              2 COMRAM     1     1      0
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (5) _spiTransfer                                          2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     767
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              6     2      4     600
                                              8 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4     452
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___awdiv
   ___awmod
     ___awdiv (ARG)
   ___wmul
   _glcdDrawPixel
     ___awmod (ARG)
       ___awdiv (ARG)
     _glcdDrawRectangle (ARG)
       ___wmul
       _glcdTransfer
         _spiSend
           _spiTransfer
       _glcd_ramwr
         _glcdTransfer
           _spiSend
             _spiTransfer
       _spiSend
         _spiTransfer
   _glcdDrawRectangle
     ___wmul
     _glcdTransfer
       _spiSend
         _spiTransfer
     _glcd_ramwr
       _glcdTransfer
         _spiSend
           _spiTransfer
     _spiSend
       _spiTransfer
   _glcdSetOrigin
     _glcd_setmadctl
       _glcdTransfer
         _spiSend
           _spiTransfer
   _glcd_invoff
     _glcdTransfer
       _spiSend
         _spiTransfer
   _glcd_invon
     _glcdTransfer
       _spiSend
         _spiTransfer
   _initGLCD
     _glcdDrawRectangle
       ___wmul
       _glcdTransfer
         _spiSend
           _spiTransfer
       _glcd_ramwr
         _glcdTransfer
           _spiSend
             _spiTransfer
       _spiSend
         _spiTransfer
     _glcdSetCOLMOD
       _glcdTransfer
         _spiSend
           _spiTransfer
     _glcdTransfer
       _spiSend
         _spiTransfer
     _glcd_dispon
       _glcdTransfer
         _spiSend
           _spiTransfer
     _glcd_idmoff
       _glcdTransfer
         _spiSend
           _spiTransfer
     _glcd_invoff
       _glcdTransfer
         _spiSend
           _spiTransfer
     _glcd_noron
       _glcdTransfer
         _spiSend
           _spiTransfer
     _glcd_setmadctl
       _glcdTransfer
         _spiSend
           _spiTransfer
     _glcd_slpout
       _glcdTransfer
         _spiSend
           _spiTransfer
     _glcd_swreset
       _glcdTransfer
         _spiSend
           _spiTransfer
     _spiInit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     29      2A       1       33.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      2A      34        0.0%
DATA                 0      0      2A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Tue Dec 11 01:11:35 2018

                       _SSPSTATbits 000FC7                      ??_glcdTransfer 0005  
                       __CFG_CPD$ON 000000                        ___awdiv@sign 0006  
               ___wmul@multiplicand 0003                         __CFG_BORV$3 000000  
                      __CFG_CP0$OFF 000000                        __CFG_CP1$OFF 000000  
                      __CFG_CP2$OFF 000000                        __CFG_CP3$OFF 000000  
                       __CFG_OSC$HS 000000                                 l240 1C14  
                               l226 199C                                 l228 19B0  
                               l260 1CC4                                 l257 1CB0  
                               l258 1CB6                                 l259 1CBC  
                               l295 1D1C                        __CFG_CPB$OFF 000000  
                               _RED 1025                                 u450 1DDE  
                               u460 1DEA                                 u452 1DE0  
                               u462 1DEC                                 u470 1D90  
                               u488 1D92                                 u907 1272  
                               u917 128C                                 u927 12A6  
                               u937 12E6                                 u947 1330  
                               u957 1384                                 u967 13CE  
                               u977 14E8                                 u897 10B6  
                               u987 16CE                                 u997 1742  
                      ___awmod@sign 000E                                 wreg 000FE8  
                      __CFG_LVP$OFF 000000                        __CFG_WDT$OFF 000000  
                              l2001 1700                                l2003 172A  
                              l1521 19CE                                l1601 1C7A  
                              l1515 19C2                                l1603 1C8C  
                              l1611 1CF8                                l1517 19C6  
                              l1615 1CFC                                l1617 1D00  
                              l1811 1BCC                                l1803 1BAC  
                              l1563 1AD4                                l1619 1D06  
                              l1805 1BB4                                l1477 1DD6  
                              l1549 1A7A                                l1733 1C38  
                              l1741 1CE8                                l1751 1B0E  
                              l1807 1BB8                                l1815 1BD6  
                              l1567 1AEA                                l1591 1C60  
                              l1593 1C68                                l1921 1560  
                              l1905 1510                                l1833 1066  
                              l1763 1B34                                l1819 1BE4  
                              l1739 1CCC                                l1915 1558  
                              l1765 1B3C                                l1757 1B1E  
                              l1597 1C72                                l1783 1B74  
                              l1775 1B5C                                l1767 1B40  
                              l1951 15F2                                l1927 1576  
                              l1943 15D8                                l1919 155C  
                              l1961 1632                                l1945 15DC  
                              l1779 1B66                                l1795 1B92  
                              l1939 15D4                                l1973 1688  
                              l1965 1636                                l1893 14E2  
                              l1799 1B9E                                l1991 16E0  
                              l1975 168C                                l1879 13DE  
                              l1993 16E8                                l1969 1680  
                              l1889 1492                                l1897 14F6  
                              l1995 16F0                                l1987 16DC  
                              l1899 14FA                                l1997 16F8  
                              _BLUE 1015                                u1007 197E  
                              u1017 1D44                                u1027 1D72  
                              _GREY 1001                      ??_glcd_swreset 0007  
                              _main 104E                                prodh 000FF4  
                              prodl 000FF3                                start 0000  
                     __CFG_IESO$OFF 000000                       __CFG_MCLRE$ON 000000  
                      ___param_bank 000000                               ?_main 0001  
                   __end_of___awdiv 1B7E                               _BLACK 1005  
                   __end_of___awmod 1BEE                    __end_of_INST_NOP 1049  
                   ___awdiv@divisor 0003                               _GREEN 1019  
                   ___awdiv@counter 0005                               _WHITE 1009  
                             _SSPIF 007CF3                       __CFG_PWRT$OFF 000000  
                     __CFG_WRT0$OFF 000000                       __CFG_WRT1$OFF 000000  
                     __CFG_WRT2$OFF 000000                       __CFG_WRT3$OFF 000000  
                    __CFG_EBTR0$OFF 000000                      __CFG_FCMEN$OFF 000000  
                    __CFG_EBTR1$OFF 000000                      __CFG_EBTR2$OFF 000000  
                    __CFG_EBTR3$OFF 000000                       __CFG_WRTB$OFF 000000  
                     __CFG_WRTC$OFF 000000                       __CFG_WRTD$OFF 000000  
                    __CFG_EBTRB$OFF 000000                               main@x 0029  
                             main@y 0028                     __end_of_spiInit 1D26  
                             tablat 000FF5                     __end_of_spiSend 1EAE  
                             status 000FD8                      __CFG_PBADEN$ON 000000  
                      __end_of_BLUE 1019                        __end_of_GREY 1005  
                   __initialization 1E98                        __end_of_main 172E  
      glcdSetCOLMOD@numBitsPerPixel 0007                    ??_glcd_setmadctl 0007  
                            ??_main 0021                       __activetblptr 000002  
                   glcdDrawPixel@XS 0020                     glcdDrawPixel@YS 001A  
                  ___awdiv@dividend 0001                   _glcdDrawRectangle 198A  
                 __end_of_INST_TEON 1039                              _INDIGO 1011  
              __end_of_glcdTransfer 1DAA                              _ORANGE 1021  
                ?_glcdDrawRectangle 0007                              _VIOLET 100D  
                            _YELLOW 101D                              _SSPBUF 000FC9  
              __size_of_glcd_dispon 0016                __size_of_glcd_idmoff 0016  
              __size_of_glcd_invoff 0016                      __CFG_XINST$OFF 000000  
         glcdDrawRectangle@numLoops 0012                __size_of_glcd_slpout 002E  
                     main@iteration 0023                 ??_glcdDrawRectangle 000E  
                            ___wmul 1DAA                    __end_of_initGLCD 198A  
                         ??___awdiv 0005                      __CFG_STVREN$ON 000000  
                         ??___awmod 000D                    ___awdiv@quotient 0007  
                   ___awmod@divisor 000B                __end_of_glcd_swreset 1D54  
                   ___awmod@counter 000D                        ?_spiTransfer 0001  
                      __mediumconst 0000                              tblptrh 000FF7  
                            tblptrl 000FF6                              tblptru 000FF8  
                         ??_spiInit 0001                           ??_spiSend 0003  
         __end_of_glcdDrawRectangle 1AFA                          __accesstop 0080  
           __end_of__initialization 1E9A                       __end_of_BLACK 1009  
                     ___rparam_used 000001                       __end_of_GREEN 101D  
                     __end_of_WHITE 100D                      __pcstackCOMRAM 0001  
               glcdSetOrigin@corner 0007               __end_of_glcdDrawPixel 1C5C  
                     _INST_VMOFCTR2 1029               __end_of_glcdSetCOLMOD 1CAC  
             __end_of_glcdSetOrigin 1CEE                             ?___wmul 0001  
                glcdDrawRectangle@i 0014                  __end_of_INST_CASET 103E  
                __end_of_INST_IDMON 1036                  __end_of_INST_INVON 1042  
                __end_of_INST_RASET 103D                  __end_of_INST_RAMWR 103C  
                __end_of_INST_TEOFF 103A                  __end_of_INST_NORON 1044  
                __end_of_INST_PTLAR 103B                  __end_of_INST_SLPIN 1047  
                __end_of_INST_PTLON 1045                          _glcd_invon 1E6C  
                        _glcd_ramwr 1E82                          _glcd_noron 1E14  
             __size_of_glcdTransfer 0028          __size_of_glcdDrawRectangle 0170  
         spiTransfer@byteToTransfer 0002                             _SSPCON1 000FC6  
                           _SSPSTAT 000FC7                           ?_initGLCD 0001  
                glcdDrawPixel@color 001B                             __Hparam 0000  
                    _GLCD_SIZE_HORZ 104C                             __Lparam 0000  
                    _GLCD_SIZE_VERT 104B                __end_of_INST_DISPOFF 1040  
             __size_of_glcd_swreset 002E                __end_of_INST_FRMCTR1 1034  
              __end_of_INST_FRMCTR2 1033                __end_of_INST_FRMCTR3 1032  
                           ___awdiv 1AFA                             ___awmod 1B7E  
                   __size_of___wmul 0026                        __psmallconst 1000  
                           __pcinit 1E98                        _glcdTransfer 1D82  
                           __ramtop 1000                             __ptext0 104E  
                           __ptext1 172E                             __ptext2 1CEE  
                           __ptext3 1D26                             __ptext4 1D54  
                           __ptext5 1E14                             __ptext6 1E2A  
                           __ptext7 1E40                             __ptext8 1E56  
                           __ptext9 1C5C                __end_of_INST_SWRESET 1048  
                  ___awmod@dividend 0009                             _spiInit 1CEE  
                           _spiSend 1EA4                __size_of_spiTransfer 0024  
              end_of_initialization 1E9A                          ??_initGLCD 001A  
                      _glcd_swreset 1D26                       __Lmediumconst 0000  
            __end_of_GLCD_SIZE_HORZ 104D                           _INST_TEON 1038  
            __end_of_GLCD_SIZE_VERT 104C                    glcdTransfer@byte 0006  
                    spiInit@divider 0001                         ?_glcd_invon 0001  
                       ?_glcd_ramwr 0001                         ?_glcd_noron 0001  
                         _TRISCbits 000F94                           _TRISDbits 000F95  
                     ??_glcd_dispon 0007                       ??_glcd_idmoff 0007  
                     ??_glcd_invoff 0007                      __end_of_INDIGO 1015  
                     ??_glcd_slpout 0007                      __end_of_ORANGE 1025  
                    __end_of_VIOLET 1011                      __end_of_YELLOW 1021  
                    __end_of___wmul 1DD0                 start_initialization 1E98  
                       __end_of_RED 1029              glcdDrawRectangle@color 000A  
           __size_of_glcd_setmadctl 0020                 __size_of_glcd_invon 0016  
               __end_of_glcd_dispon 1E6C                 __end_of_glcd_idmoff 1E56  
               __size_of_glcd_ramwr 0016                 __size_of_glcd_noron 0016  
               __end_of_glcd_invoff 1E40                            ??___wmul 0005  
               __end_of_glcd_slpout 1D82                    __CFG_LPT1OSC$OFF 000000  
__end_of_GLCD_ADDRESSABLE_SIZE_HORZ 104B          _GLCD_ADDRESSABLE_SIZE_HORZ 104A  
__end_of_GLCD_ADDRESSABLE_SIZE_VERT 104A          _GLCD_ADDRESSABLE_SIZE_VERT 1049  
                       __pbssCOMRAM 002A                        _INST_DISPOFF 103F  
                      _INST_FRMCTR1 1033                        _INST_FRMCTR2 1032  
                      _INST_FRMCTR3 1031                   __size_of_initGLCD 025C  
                      _INST_SWRESET 1047              __size_of_glcdDrawPixel 006E  
                         _main$1162 0024                   __CFG_CCP2MX$PORTC 000000  
                          ?___awdiv 0001                            ?___awmod 0009  
            __size_of_glcdSetCOLMOD 0050                         __smallconst 1000  
               glcdDrawRectangle@XE 0007                 glcdDrawRectangle@YE 0009  
               glcdDrawRectangle@XS 0019                 glcdDrawRectangle@YS 0008  
               __end_of_INST_GAMSET 1041                            ?_spiInit 0001  
               __end_of_INST_COLMOD 1035                            ?_spiSend 0001  
               __end_of_INST_MADCTL 1038                 __end_of_INST_DISPON 103F  
               __end_of_INST_IDMOFF 1037                 __end_of_INST_INVCTR 1031  
               __end_of_INST_INVOFF 1043              __size_of_glcdSetOrigin 0042  
               __end_of_INST_PWCTR1 1030                 __end_of_INST_PWCTR2 102F  
               __end_of_INST_PWCTR3 102E                 __end_of_INST_PWCTR4 102D  
               __end_of_INST_PWCTR5 102C                 __end_of_INST_VMCTR1 102B  
               __end_of_INST_SLPOUT 1046                         _glcd_dispon 1E56  
                       _glcd_idmoff 1E40                         _glcd_invoff 1E2A  
                    ___wmul@product 0005                            _LATDbits 000F8C  
                       _glcd_slpout 1D54                            _INST_NOP 1048  
                        spiSend@val 0003                    __CFG_WDTPS$32768 000000  
                   glcdTransfer@cmd 0004                   ___wmul@multiplier 0001  
                      ??_glcd_invon 0007                        ??_glcd_ramwr 0007  
                      ??_glcd_noron 0007                       ??_spiTransfer 0001  
              glcdSetCOLMOD@rawData 0008                       _glcdDrawPixel 1BEE  
                    _glcd_setmadctl 1DF4                       _glcdSetCOLMOD 1C5C  
                          __Hrparam 0000                            __Lrparam 0000  
                __end_of_glcd_invon 1E82                  __end_of_glcd_ramwr 1E98  
                __end_of_glcd_noron 1E2A                  __CFG_BOREN$SBORDIS 000000  
                     _glcdSetOrigin 1CAC                    __size_of___awdiv 0084  
                  __size_of___awmod 0070                         _INST_GAMSET 1040  
                       _INST_COLMOD 1034                         _INST_MADCTL 1037  
                       _INST_DISPON 103E                         _INST_IDMOFF 1036  
                       _INST_INVCTR 1030                         _INST_INVOFF 1042  
                    ?_glcdDrawPixel 001A                         _INST_PWCTR1 102F  
                       _INST_PWCTR2 102E                         _INST_PWCTR3 102D  
                       _INST_PWCTR4 102C                         _INST_PWCTR5 102B  
                       _INST_VMCTR1 102A                         _INST_SLPOUT 1045  
            __end_of_glcd_setmadctl 1E14                            __ptext10 1E6C  
                          __ptext11 1CAC                            __ptext20 1B7E  
                          __ptext12 1DF4                            __ptext21 1AFA  
                          __ptext13 1BEE                            __ptext14 198A  
                          __ptext15 1E82                            __ptext16 1D82  
                          __ptext17 1EA4                            __ptext18 1DD0  
                          __ptext19 1DAA                    __size_of_spiInit 0038  
                  __size_of_spiSend 000A               __end_of_INST_VMOFCTR2 102A  
                        _MADCTLbits 002A                 __end_of_spiTransfer 1DF4  
                    ?_glcdSetCOLMOD 0001                            _initGLCD 172E  
                     __size_of_main 06E0                      ?_glcdSetOrigin 0001  
                   ?_glcd_setmadctl 0001                          _INST_CASET 103D  
                        _INST_IDMON 1035                          _INST_INVON 1041  
                        _INST_RASET 103C                          _INST_RAMWR 103B  
                        _INST_TEOFF 1039                          _INST_NORON 1043  
                        _INST_PTLAR 103A                          _INST_SLPIN 1046  
                        _INST_PTLON 1044          glcdDrawRectangle@colorData 0016  
                     ?_glcdTransfer 0004                     ??_glcdDrawPixel 001F  
                       _spiTransfer 1DD0                         _SSPCON1bits 000FC6  
                   ??_glcdSetCOLMOD 0007                        ?_glcd_dispon 0001  
                      ?_glcd_idmoff 0001                       ?_glcd_swreset 0001  
                      ?_glcd_invoff 0001                        ?_glcd_slpout 0001  
                   ??_glcdSetOrigin 0007  
