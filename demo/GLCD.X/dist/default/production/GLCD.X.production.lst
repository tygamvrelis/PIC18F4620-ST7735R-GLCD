

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Tue Apr 17 02:42:16 2018

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    24                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    25  0000                     
    26                           ; Version 1.42
    27                           ; Generated 13/04/2017 GMT
    28                           ; 
    29                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    30                           ; All rights reserved.
    31                           ; 
    32                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    33                           ; 
    34                           ; Redistribution and use in source and binary forms, with or without modification, are
    35                           ; permitted provided that the following conditions are met:
    36                           ; 
    37                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    38                           ;        conditions and the following disclaimer.
    39                           ; 
    40                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    41                           ;        of conditions and the following disclaimer in the documentation and/or other
    42                           ;        materials provided with the distribution.
    43                           ; 
    44                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    45                           ;        software without specific prior written permission.
    46                           ; 
    47                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    48                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    49                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    50                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    51                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    52                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    53                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    54                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    55                           ; 
    56                           ; 
    57                           ; Code-generator required, PIC18F4620 Definitions
    58                           ; 
    59                           ; SFR Addresses
    60  0000                     
    61                           	psect	smallconst
    62  001000                     __psmallconst:
    63                           	opt stack 0
    64  001000  00                 	db	0
    65  001001                     _VIOLET:
    66                           	opt stack 0
    67  001001  00D3               	dw	211
    68  001003  0094               	dw	148
    69  001005                     __end_of_VIOLET:
    70                           	opt stack 0
    71  001005                     _INDIGO:
    72                           	opt stack 0
    73  001005  0082               	dw	130
    74  001007  004B               	dw	75
    75  001009                     __end_of_INDIGO:
    76                           	opt stack 0
    77  001009                     _BLUE:
    78                           	opt stack 0
    79  001009  00FF               	dw	255
    80  00100B  0000               	dw	0
    81  00100D                     __end_of_BLUE:
    82                           	opt stack 0
    83  00100D                     _GREEN:
    84                           	opt stack 0
    85  00100D  FF00               	dw	65280
    86  00100F  0000               	dw	0
    87  001011                     __end_of_GREEN:
    88                           	opt stack 0
    89  001011                     _YELLOW:
    90                           	opt stack 0
    91  001011  FF00               	dw	65280
    92  001013  00FF               	dw	255
    93  001015                     __end_of_YELLOW:
    94                           	opt stack 0
    95  001015                     _ORANGE:
    96                           	opt stack 0
    97  001015  8C00               	dw	35840
    98  001017  00FF               	dw	255
    99  001019                     __end_of_ORANGE:
   100                           	opt stack 0
   101  001019                     _RED:
   102                           	opt stack 0
   103  001019  0000               	dw	0
   104  00101B  00FF               	dw	255
   105  00101D                     __end_of_RED:
   106                           	opt stack 0
   107  00101D                     _WHITE:
   108                           	opt stack 0
   109  00101D  FFFF               	dw	65535
   110  00101F  00FF               	dw	255
   111  001021                     __end_of_WHITE:
   112                           	opt stack 0
   113  001021                     _GREY:
   114                           	opt stack 0
   115  001021  8080               	dw	32896
   116  001023  0080               	dw	128
   117  001025                     __end_of_GREY:
   118                           	opt stack 0
   119  001025                     _BLACK:
   120                           	opt stack 0
   121  001025  0000               	dw	0
   122  001027  0000               	dw	0
   123  001029                     __end_of_BLACK:
   124                           	opt stack 0
   125  001029                     _INST_VMOFCTR2:
   126                           	opt stack 0
   127  001029  C7                 	db	199
   128  00102A                     __end_of_INST_VMOFCTR2:
   129                           	opt stack 0
   130  00102A                     _INST_VMCTR1:
   131                           	opt stack 0
   132  00102A  C5                 	db	197
   133  00102B                     __end_of_INST_VMCTR1:
   134                           	opt stack 0
   135  00102B                     _INST_PWCTR5:
   136                           	opt stack 0
   137  00102B  C4                 	db	196
   138  00102C                     __end_of_INST_PWCTR5:
   139                           	opt stack 0
   140  00102C                     _INST_PWCTR4:
   141                           	opt stack 0
   142  00102C  C3                 	db	195
   143  00102D                     __end_of_INST_PWCTR4:
   144                           	opt stack 0
   145  00102D                     _INST_PWCTR3:
   146                           	opt stack 0
   147  00102D  C2                 	db	194
   148  00102E                     __end_of_INST_PWCTR3:
   149                           	opt stack 0
   150  00102E                     _INST_PWCTR2:
   151                           	opt stack 0
   152  00102E  C1                 	db	193
   153  00102F                     __end_of_INST_PWCTR2:
   154                           	opt stack 0
   155  00102F                     _INST_PWCTR1:
   156                           	opt stack 0
   157  00102F  C0                 	db	192
   158  001030                     __end_of_INST_PWCTR1:
   159                           	opt stack 0
   160  001030                     _INST_INVCTR:
   161                           	opt stack 0
   162  001030  B4                 	db	180
   163  001031                     __end_of_INST_INVCTR:
   164                           	opt stack 0
   165  001031                     _INST_FRMCTR3:
   166                           	opt stack 0
   167  001031  B3                 	db	179
   168  001032                     __end_of_INST_FRMCTR3:
   169                           	opt stack 0
   170  001032                     _INST_FRMCTR2:
   171                           	opt stack 0
   172  001032  B2                 	db	178
   173  001033                     __end_of_INST_FRMCTR2:
   174                           	opt stack 0
   175  001033                     _INST_FRMCTR1:
   176                           	opt stack 0
   177  001033  B1                 	db	177
   178  001034                     __end_of_INST_FRMCTR1:
   179                           	opt stack 0
   180  001034                     _INST_COLMOD:
   181                           	opt stack 0
   182  001034  3A                 	db	58
   183  001035                     __end_of_INST_COLMOD:
   184                           	opt stack 0
   185  001035                     _INST_IDMON:
   186                           	opt stack 0
   187  001035  39                 	db	57
   188  001036                     __end_of_INST_IDMON:
   189                           	opt stack 0
   190  001036                     _INST_IDMOFF:
   191                           	opt stack 0
   192  001036  38                 	db	56
   193  001037                     __end_of_INST_IDMOFF:
   194                           	opt stack 0
   195  001037                     _INST_MADCTL:
   196                           	opt stack 0
   197  001037  36                 	db	54
   198  001038                     __end_of_INST_MADCTL:
   199                           	opt stack 0
   200  001038                     _INST_TEON:
   201                           	opt stack 0
   202  001038  35                 	db	53
   203  001039                     __end_of_INST_TEON:
   204                           	opt stack 0
   205  001039                     _INST_TEOFF:
   206                           	opt stack 0
   207  001039  34                 	db	52
   208  00103A                     __end_of_INST_TEOFF:
   209                           	opt stack 0
   210  00103A                     _INST_PTLAR:
   211                           	opt stack 0
   212  00103A  30                 	db	48
   213  00103B                     __end_of_INST_PTLAR:
   214                           	opt stack 0
   215  00103B                     _INST_RAMWR:
   216                           	opt stack 0
   217  00103B  2C                 	db	44
   218  00103C                     __end_of_INST_RAMWR:
   219                           	opt stack 0
   220  00103C                     _INST_RASET:
   221                           	opt stack 0
   222  00103C  2B                 	db	43
   223  00103D                     __end_of_INST_RASET:
   224                           	opt stack 0
   225  00103D                     _INST_CASET:
   226                           	opt stack 0
   227  00103D  2A                 	db	42
   228  00103E                     __end_of_INST_CASET:
   229                           	opt stack 0
   230  00103E                     _INST_DISPON:
   231                           	opt stack 0
   232  00103E  29                 	db	41
   233  00103F                     __end_of_INST_DISPON:
   234                           	opt stack 0
   235  00103F                     _INST_DISPOFF:
   236                           	opt stack 0
   237  00103F  28                 	db	40
   238  001040                     __end_of_INST_DISPOFF:
   239                           	opt stack 0
   240  001040                     _INST_GAMSET:
   241                           	opt stack 0
   242  001040  26                 	db	38
   243  001041                     __end_of_INST_GAMSET:
   244                           	opt stack 0
   245  001041                     _INST_NORON:
   246                           	opt stack 0
   247  001041  13                 	db	19
   248  001042                     __end_of_INST_NORON:
   249                           	opt stack 0
   250  001042                     _INST_PTLON:
   251                           	opt stack 0
   252  001042  12                 	db	18
   253  001043                     __end_of_INST_PTLON:
   254                           	opt stack 0
   255  001043                     _INST_SLPOUT:
   256                           	opt stack 0
   257  001043  11                 	db	17
   258  001044                     __end_of_INST_SLPOUT:
   259                           	opt stack 0
   260  001044                     _INST_SLPIN:
   261                           	opt stack 0
   262  001044  10                 	db	16
   263  001045                     __end_of_INST_SLPIN:
   264                           	opt stack 0
   265  001045                     _INST_SWRESET:
   266                           	opt stack 0
   267  001045  01                 	db	1
   268  001046                     __end_of_INST_SWRESET:
   269                           	opt stack 0
   270  001046                     _INST_NOP:
   271                           	opt stack 0
   272  001046  00                 	db	0
   273  001047                     __end_of_INST_NOP:
   274                           	opt stack 0
   275  001047                     _GLCD_SIZE_VERT:
   276                           	opt stack 0
   277  001047  80                 	db	128
   278  001048                     __end_of_GLCD_SIZE_VERT:
   279                           	opt stack 0
   280  001048                     _GLCD_SIZE_HORZ:
   281                           	opt stack 0
   282  001048  80                 	db	128
   283  001049                     __end_of_GLCD_SIZE_HORZ:
   284                           	opt stack 0
   285  001049                     _GLCD_ADDRESSABLE_SIZE_VERT:
   286                           	opt stack 0
   287  001049  A0                 	db	160
   288  00104A                     __end_of_GLCD_ADDRESSABLE_SIZE_VERT:
   289                           	opt stack 0
   290  00104A                     _GLCD_ADDRESSABLE_SIZE_HORZ:
   291                           	opt stack 0
   292  00104A  80                 	db	128
   293  00104B                     __end_of_GLCD_ADDRESSABLE_SIZE_HORZ:
   294                           	opt stack 0
   295  00104B                     _INST_INVOFF:
   296                           	opt stack 0
   297  00104B  20                 	db	32
   298  00104C                     __end_of_INST_INVOFF:
   299                           	opt stack 0
   300  00104C                     _INST_INVON:
   301                           	opt stack 0
   302  00104C  21                 	db	33
   303  00104D                     __end_of_INST_INVON:
   304                           	opt stack 0
   305  0000                     _TRISDbits	set	3989
   306  0000                     _LATDbits	set	3980
   307  0000                     _TRISCbits	set	3988
   308  0000                     _SSPCON1	set	4038
   309  0000                     _SSPSTAT	set	4039
   310  0000                     _SSPCON1bits	set	4038
   311  0000                     _SSPSTATbits	set	4039
   312  0000                     _SSPBUF	set	4041
   313  0000                     _INTCONbits	set	4082
   314  0000                     _ADCON2	set	4032
   315  0000                     _CMCONbits	set	4020
   316  0000                     _CVRCON	set	4021
   317  0000                     _ADCON1	set	4033
   318  0000                     _ADCON0	set	4034
   319  0000                     _TRISE	set	3990
   320  0000                     _TRISD	set	3989
   321  0000                     _TRISC	set	3988
   322  0000                     _TRISB	set	3987
   323  0000                     _TRISA	set	3986
   324  0000                     _LATE	set	3981
   325  0000                     _LATD	set	3980
   326  0000                     _LATC	set	3979
   327  0000                     _LATB	set	3978
   328  0000                     _LATA	set	3977
   329  0000                     _SSPIF	set	31987
   330  0000                     _PEIE	set	32662
   331  0000                     _INT1IE	set	32643
   332  0000                     _nRBPU	set	32655
   333                           
   334                           ; #config settings
   335  00104D  00                 	db	0	; dummy byte at the end
   336  0000                     
   337                           	psect	cinit
   338  001EDC                     __pcinit:
   339                           	opt stack 0
   340  001EDC                     start_initialization:
   341                           	opt stack 0
   342  001EDC                     __initialization:
   343                           	opt stack 0
   344                           
   345                           ; Clear objects allocated to COMRAM (1 bytes)
   346  001EDC  6A2A               	clrf	__pbssCOMRAM& (0+255),c
   347  001EDE                     end_of_initialization:
   348                           	opt stack 0
   349  001EDE                     __end_of__initialization:
   350                           	opt stack 0
   351  001EDE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   352  001EE0  6EF8               	movwf	tblptru,c
   353  001EE2  0100               	movlb	0
   354  001EE4  EF27  F008         	goto	_main	;jump to C main() function
   355                           tblptru	equ	0xFF8
   356                           
   357                           	psect	bssCOMRAM
   358  00002A                     __pbssCOMRAM:
   359                           	opt stack 0
   360  00002A                     _MADCTLbits:
   361                           	opt stack 0
   362  00002A                     	ds	1
   363                           tblptru	equ	0xFF8
   364                           
   365                           	psect	cstackCOMRAM
   366  000001                     __pcstackCOMRAM:
   367                           	opt stack 0
   368  000001                     ??_spiTransfer:
   369  000001                     ?___wmul:
   370                           	opt stack 0
   371  000001                     ?___awdiv:
   372                           	opt stack 0
   373  000001                     spiInit@divider:
   374                           	opt stack 0
   375  000001                     ___wmul@multiplier:
   376                           	opt stack 0
   377  000001                     ___awdiv@dividend:
   378                           	opt stack 0
   379                           
   380                           ; 2 bytes @ 0x0
   381  000001                     	ds	1
   382  000002                     spiTransfer@byteToTransfer:
   383                           	opt stack 0
   384                           
   385                           ; 1 bytes @ 0x1
   386  000002                     	ds	1
   387  000003                     spiSend@val:
   388                           	opt stack 0
   389  000003                     ___wmul@multiplicand:
   390                           	opt stack 0
   391  000003                     ___awdiv@divisor:
   392                           	opt stack 0
   393                           
   394                           ; 2 bytes @ 0x2
   395  000003                     	ds	1
   396  000004                     glcdTransfer@cmd:
   397                           	opt stack 0
   398                           
   399                           ; 1 bytes @ 0x3
   400  000004                     	ds	1
   401  000005                     ??_glcdTransfer:
   402  000005                     ___awdiv@counter:
   403                           	opt stack 0
   404  000005                     ___wmul@product:
   405                           	opt stack 0
   406                           
   407                           ; 2 bytes @ 0x4
   408  000005                     	ds	1
   409  000006                     glcdTransfer@byte:
   410                           	opt stack 0
   411  000006                     ___awdiv@sign:
   412                           	opt stack 0
   413                           
   414                           ; 1 bytes @ 0x5
   415  000006                     	ds	1
   416  000007                     glcdDrawRectangle@XE:
   417                           	opt stack 0
   418  000007                     glcdSetCOLMOD@numBitsPerPixel:
   419                           	opt stack 0
   420  000007                     glcdSetOrigin@corner:
   421                           	opt stack 0
   422  000007                     ___awdiv@quotient:
   423                           	opt stack 0
   424                           
   425                           ; 2 bytes @ 0x6
   426  000007                     	ds	1
   427  000008                     glcdDrawRectangle@YS:
   428                           	opt stack 0
   429  000008                     glcdSetCOLMOD@rawData:
   430                           	opt stack 0
   431                           
   432                           ; 2 bytes @ 0x7
   433  000008                     	ds	1
   434  000009                     ?___awmod:
   435                           	opt stack 0
   436  000009                     glcdDrawRectangle@YE:
   437                           	opt stack 0
   438  000009                     ___awmod@dividend:
   439                           	opt stack 0
   440                           
   441                           ; 2 bytes @ 0x8
   442  000009                     	ds	1
   443  00000A                     glcdDrawRectangle@color:
   444                           	opt stack 0
   445                           
   446                           ; 4 bytes @ 0x9
   447  00000A                     	ds	1
   448  00000B                     ___awmod@divisor:
   449                           	opt stack 0
   450                           
   451                           ; 2 bytes @ 0xA
   452  00000B                     	ds	2
   453  00000D                     ___awmod@counter:
   454                           	opt stack 0
   455                           
   456                           ; 1 bytes @ 0xC
   457  00000D                     	ds	1
   458  00000E                     ??_glcdDrawRectangle:
   459  00000E                     ___awmod@sign:
   460                           	opt stack 0
   461                           
   462                           ; 1 bytes @ 0xD
   463  00000E                     	ds	4
   464  000012                     glcdDrawRectangle@numLoops:
   465                           	opt stack 0
   466                           
   467                           ; 2 bytes @ 0x11
   468  000012                     	ds	2
   469  000014                     glcdDrawRectangle@i:
   470                           	opt stack 0
   471                           
   472                           ; 2 bytes @ 0x13
   473  000014                     	ds	2
   474  000016                     glcdDrawRectangle@colorData:
   475                           	opt stack 0
   476                           
   477                           ; 3 bytes @ 0x15
   478  000016                     	ds	3
   479  000019                     glcdDrawRectangle@XS:
   480                           	opt stack 0
   481                           
   482                           ; 1 bytes @ 0x18
   483  000019                     	ds	1
   484  00001A                     ??_initGLCD:
   485  00001A                     glcdDrawPixel@YS:
   486                           	opt stack 0
   487                           
   488                           ; 1 bytes @ 0x19
   489  00001A                     	ds	1
   490  00001B                     glcdDrawPixel@color:
   491                           	opt stack 0
   492                           
   493                           ; 4 bytes @ 0x1A
   494  00001B                     	ds	4
   495  00001F                     ??_glcdDrawPixel:
   496                           
   497                           ; 1 bytes @ 0x1E
   498  00001F                     	ds	1
   499  000020                     glcdDrawPixel@XS:
   500                           	opt stack 0
   501                           
   502                           ; 1 bytes @ 0x1F
   503  000020                     	ds	1
   504  000021                     ??_main:
   505                           
   506                           ; 1 bytes @ 0x20
   507  000021                     	ds	2
   508  000023                     main@rotation:
   509                           	opt stack 0
   510                           
   511                           ; 1 bytes @ 0x22
   512  000023                     	ds	1
   513  000024                     _main$1173:
   514                           	opt stack 0
   515                           
   516                           ; 4 bytes @ 0x23
   517  000024                     	ds	4
   518  000028                     main@y:
   519                           	opt stack 0
   520                           
   521                           ; 1 bytes @ 0x27
   522  000028                     	ds	1
   523  000029                     main@x:
   524                           	opt stack 0
   525                           
   526                           ; 1 bytes @ 0x28
   527  000029                     	ds	1
   528                           tblptru	equ	0xFF8
   529                           
   530 ;;
   531 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   532 ;;
   533 ;; *************** function _main *****************
   534 ;; Defined at:
   535 ;;		line 21 in file "main.c"
   536 ;; Parameters:    Size  Location     Type
   537 ;;		None
   538 ;; Auto vars:     Size  Location     Type
   539 ;;  x               1   40[COMRAM] unsigned char 
   540 ;;  y               1   39[COMRAM] unsigned char 
   541 ;;  rotation        1   34[COMRAM] unsigned char 
   542 ;; Return value:  Size  Location     Type
   543 ;;                  1    wreg      void 
   544 ;; Registers used:
   545 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   546 ;; Tracked objects:
   547 ;;		On entry : 0/0
   548 ;;		On exit  : 0/0
   549 ;;		Unchanged: 0/0
   550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   552 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   553 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   554 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   555 ;;Total ram usage:        9 bytes
   556 ;; Hardware stack levels required when called:    5
   557 ;; This function calls:
   558 ;;		___awdiv
   559 ;;		___awmod
   560 ;;		___wmul
   561 ;;		_glcdDrawPixel
   562 ;;		_glcdDrawRectangle
   563 ;;		_glcdSetOrigin
   564 ;;		_glcdTransfer
   565 ;;		_initGLCD
   566 ;;		_machineConfig
   567 ;; This function is called by:
   568 ;;		Startup code after reset
   569 ;; This function uses a non-reentrant model
   570 ;;
   571                           
   572                           	psect	text0
   573  00104E                     __ptext0:
   574                           	opt stack 0
   575  00104E                     _main:
   576                           	opt stack 26
   577                           
   578                           ;main.c: 23: machineConfig();
   579                           
   580                           ;incstack = 0
   581  00104E  ECF7  F00E         	call	_machineConfig	;wreg free
   582                           
   583                           ;main.c: 26: initGLCD();
   584  001052  ECAA  F00B         	call	_initGLCD	;wreg free
   585                           
   586                           ;main.c: 29: unsigned char rotation = 0, x = 0, y = 0;
   587  001056  0E00               	movlw	0
   588  001058  6E23               	movwf	main@rotation,c
   589  00105A  0E00               	movlw	0
   590  00105C  6E29               	movwf	main@x,c
   591  00105E  0E00               	movlw	0
   592  001060  6E28               	movwf	main@y,c
   593  001062                     l1822:
   594                           
   595                           ;main.c: 34: glcdDrawRectangle(0, GLCD_SIZE_HORZ, 0, GLCD_SIZE_VERT, RED);
   596  001062  0E48               	movlw	low _GLCD_SIZE_HORZ
   597  001064  6EF6               	movwf	tblptrl,c
   598  001066                     	if	1	;There is more than 1 active tblptr byte
   599  001066  0E10               	movlw	high _GLCD_SIZE_HORZ
   600  001068  6EF7               	movwf	tblptrh,c
   601  00106A                     	endif
   602  00106A                     	if	0	;There are less than 3 active tblptr bytes
   603  00106A                     	endif
   604  00106A  0008               	tblrd		*
   605  00106C  CFF5 F007          	movff	tablat,glcdDrawRectangle@XE
   606  001070  0E00               	movlw	0
   607  001072  6E08               	movwf	glcdDrawRectangle@YS,c
   608  001074  0E47               	movlw	low _GLCD_SIZE_VERT
   609  001076  6EF6               	movwf	tblptrl,c
   610  001078                     	if	1	;There is more than 1 active tblptr byte
   611  001078  0E10               	movlw	high _GLCD_SIZE_VERT
   612  00107A  6EF7               	movwf	tblptrh,c
   613  00107C                     	endif
   614  00107C                     	if	0	;There are less than 3 active tblptr bytes
   615  00107C                     	endif
   616  00107C  0008               	tblrd		*
   617  00107E  CFF5 F009          	movff	tablat,glcdDrawRectangle@YE
   618  001082  0E19               	movlw	low _RED
   619  001084  6EF6               	movwf	tblptrl,c
   620  001086                     	if	1	;There is more than 1 active tblptr byte
   621  001086  0E10               	movlw	high _RED
   622  001088  6EF7               	movwf	tblptrh,c
   623  00108A                     	endif
   624  00108A                     	if	0	;There are less than 3 active tblptr bytes
   625  00108A                     	endif
   626  00108A  0009               	tblrd		*+
   627  00108C  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
   628  001090  0009               	tblrd		*+
   629  001092  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
   630  001096  0009               	tblrd		*+
   631  001098  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
   632  00109C  000A               	tblrd		*-
   633  00109E  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
   634  0010A2  0E00               	movlw	0
   635  0010A4  EC30  F00D         	call	_glcdDrawRectangle
   636                           
   637                           ;main.c: 35: _delay((unsigned long)((1000)*(40000000/4000.0)));
   638  0010A8  0E33               	movlw	51
   639  0010AA  6E22               	movwf	(??_main+1)& (0+255),c
   640  0010AC  0EBB               	movlw	187
   641  0010AE  6E21               	movwf	??_main& (0+255),c
   642  0010B0  0EE0               	movlw	224
   643  0010B2                     u897:
   644  0010B2  2EE8               	decfsz	wreg,f,c
   645  0010B4  D7FE               	bra	u897
   646  0010B6  2E21               	decfsz	??_main& (0+255),f,c
   647  0010B8  D7FC               	bra	u897
   648  0010BA  2E22               	decfsz	(??_main+1)& (0+255),f,c
   649  0010BC  D7FA               	bra	u897
   650                           
   651                           ;main.c: 38: glcdDrawRectangle(0, 18, 0, GLCD_SIZE_VERT, RED);
   652  0010BE  0E12               	movlw	18
   653  0010C0  6E07               	movwf	glcdDrawRectangle@XE,c
   654  0010C2  0E00               	movlw	0
   655  0010C4  6E08               	movwf	glcdDrawRectangle@YS,c
   656  0010C6  0E47               	movlw	low _GLCD_SIZE_VERT
   657  0010C8  6EF6               	movwf	tblptrl,c
   658  0010CA                     	if	1	;There is more than 1 active tblptr byte
   659  0010CA  0E10               	movlw	high _GLCD_SIZE_VERT
   660  0010CC  6EF7               	movwf	tblptrh,c
   661  0010CE                     	endif
   662  0010CE                     	if	0	;There are less than 3 active tblptr bytes
   663  0010CE                     	endif
   664  0010CE  0008               	tblrd		*
   665  0010D0  CFF5 F009          	movff	tablat,glcdDrawRectangle@YE
   666  0010D4  0E19               	movlw	low _RED
   667  0010D6  6EF6               	movwf	tblptrl,c
   668  0010D8                     	if	1	;There is more than 1 active tblptr byte
   669  0010D8  0E10               	movlw	high _RED
   670  0010DA  6EF7               	movwf	tblptrh,c
   671  0010DC                     	endif
   672  0010DC                     	if	0	;There are less than 3 active tblptr bytes
   673  0010DC                     	endif
   674  0010DC  0009               	tblrd		*+
   675  0010DE  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
   676  0010E2  0009               	tblrd		*+
   677  0010E4  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
   678  0010E8  0009               	tblrd		*+
   679  0010EA  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
   680  0010EE  000A               	tblrd		*-
   681  0010F0  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
   682  0010F4  0E00               	movlw	0
   683  0010F6  EC30  F00D         	call	_glcdDrawRectangle
   684                           
   685                           ;main.c: 39: glcdDrawRectangle(18, 36, 0, GLCD_SIZE_VERT, ORANGE);
   686  0010FA  0E24               	movlw	36
   687  0010FC  6E07               	movwf	glcdDrawRectangle@XE,c
   688  0010FE  0E00               	movlw	0
   689  001100  6E08               	movwf	glcdDrawRectangle@YS,c
   690  001102  0E47               	movlw	low _GLCD_SIZE_VERT
   691  001104  6EF6               	movwf	tblptrl,c
   692  001106                     	if	1	;There is more than 1 active tblptr byte
   693  001106  0E10               	movlw	high _GLCD_SIZE_VERT
   694  001108  6EF7               	movwf	tblptrh,c
   695  00110A                     	endif
   696  00110A                     	if	0	;There are less than 3 active tblptr bytes
   697  00110A                     	endif
   698  00110A  0008               	tblrd		*
   699  00110C  CFF5 F009          	movff	tablat,glcdDrawRectangle@YE
   700  001110  0E15               	movlw	low _ORANGE
   701  001112  6EF6               	movwf	tblptrl,c
   702  001114                     	if	1	;There is more than 1 active tblptr byte
   703  001114  0E10               	movlw	high _ORANGE
   704  001116  6EF7               	movwf	tblptrh,c
   705  001118                     	endif
   706  001118                     	if	0	;There are less than 3 active tblptr bytes
   707  001118                     	endif
   708  001118  0009               	tblrd		*+
   709  00111A  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
   710  00111E  0009               	tblrd		*+
   711  001120  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
   712  001124  0009               	tblrd		*+
   713  001126  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
   714  00112A  000A               	tblrd		*-
   715  00112C  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
   716  001130  0E12               	movlw	18
   717  001132  EC30  F00D         	call	_glcdDrawRectangle
   718                           
   719                           ;main.c: 40: glcdDrawRectangle(36, 54, 0, GLCD_SIZE_VERT, YELLOW);
   720  001136  0E36               	movlw	54
   721  001138  6E07               	movwf	glcdDrawRectangle@XE,c
   722  00113A  0E00               	movlw	0
   723  00113C  6E08               	movwf	glcdDrawRectangle@YS,c
   724  00113E  0E47               	movlw	low _GLCD_SIZE_VERT
   725  001140  6EF6               	movwf	tblptrl,c
   726  001142                     	if	1	;There is more than 1 active tblptr byte
   727  001142  0E10               	movlw	high _GLCD_SIZE_VERT
   728  001144  6EF7               	movwf	tblptrh,c
   729  001146                     	endif
   730  001146                     	if	0	;There are less than 3 active tblptr bytes
   731  001146                     	endif
   732  001146  0008               	tblrd		*
   733  001148  CFF5 F009          	movff	tablat,glcdDrawRectangle@YE
   734  00114C  0E11               	movlw	low _YELLOW
   735  00114E  6EF6               	movwf	tblptrl,c
   736  001150                     	if	1	;There is more than 1 active tblptr byte
   737  001150  0E10               	movlw	high _YELLOW
   738  001152  6EF7               	movwf	tblptrh,c
   739  001154                     	endif
   740  001154                     	if	0	;There are less than 3 active tblptr bytes
   741  001154                     	endif
   742  001154  0009               	tblrd		*+
   743  001156  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
   744  00115A  0009               	tblrd		*+
   745  00115C  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
   746  001160  0009               	tblrd		*+
   747  001162  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
   748  001166  000A               	tblrd		*-
   749  001168  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
   750  00116C  0E24               	movlw	36
   751  00116E  EC30  F00D         	call	_glcdDrawRectangle
   752                           
   753                           ;main.c: 41: glcdDrawRectangle(54, 72, 0, GLCD_SIZE_VERT, GREEN);
   754  001172  0E48               	movlw	72
   755  001174  6E07               	movwf	glcdDrawRectangle@XE,c
   756  001176  0E00               	movlw	0
   757  001178  6E08               	movwf	glcdDrawRectangle@YS,c
   758  00117A  0E47               	movlw	low _GLCD_SIZE_VERT
   759  00117C  6EF6               	movwf	tblptrl,c
   760  00117E                     	if	1	;There is more than 1 active tblptr byte
   761  00117E  0E10               	movlw	high _GLCD_SIZE_VERT
   762  001180  6EF7               	movwf	tblptrh,c
   763  001182                     	endif
   764  001182                     	if	0	;There are less than 3 active tblptr bytes
   765  001182                     	endif
   766  001182  0008               	tblrd		*
   767  001184  CFF5 F009          	movff	tablat,glcdDrawRectangle@YE
   768  001188  0E0D               	movlw	low _GREEN
   769  00118A  6EF6               	movwf	tblptrl,c
   770  00118C                     	if	1	;There is more than 1 active tblptr byte
   771  00118C  0E10               	movlw	high _GREEN
   772  00118E  6EF7               	movwf	tblptrh,c
   773  001190                     	endif
   774  001190                     	if	0	;There are less than 3 active tblptr bytes
   775  001190                     	endif
   776  001190  0009               	tblrd		*+
   777  001192  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
   778  001196  0009               	tblrd		*+
   779  001198  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
   780  00119C  0009               	tblrd		*+
   781  00119E  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
   782  0011A2  000A               	tblrd		*-
   783  0011A4  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
   784  0011A8  0E36               	movlw	54
   785  0011AA  EC30  F00D         	call	_glcdDrawRectangle
   786                           
   787                           ;main.c: 42: glcdDrawRectangle(72, 90, 0, GLCD_SIZE_VERT, BLUE);
   788  0011AE  0E5A               	movlw	90
   789  0011B0  6E07               	movwf	glcdDrawRectangle@XE,c
   790  0011B2  0E00               	movlw	0
   791  0011B4  6E08               	movwf	glcdDrawRectangle@YS,c
   792  0011B6  0E47               	movlw	low _GLCD_SIZE_VERT
   793  0011B8  6EF6               	movwf	tblptrl,c
   794  0011BA                     	if	1	;There is more than 1 active tblptr byte
   795  0011BA  0E10               	movlw	high _GLCD_SIZE_VERT
   796  0011BC  6EF7               	movwf	tblptrh,c
   797  0011BE                     	endif
   798  0011BE                     	if	0	;There are less than 3 active tblptr bytes
   799  0011BE                     	endif
   800  0011BE  0008               	tblrd		*
   801  0011C0  CFF5 F009          	movff	tablat,glcdDrawRectangle@YE
   802  0011C4  0E09               	movlw	low _BLUE
   803  0011C6  6EF6               	movwf	tblptrl,c
   804  0011C8                     	if	1	;There is more than 1 active tblptr byte
   805  0011C8  0E10               	movlw	high _BLUE
   806  0011CA  6EF7               	movwf	tblptrh,c
   807  0011CC                     	endif
   808  0011CC                     	if	0	;There are less than 3 active tblptr bytes
   809  0011CC                     	endif
   810  0011CC  0009               	tblrd		*+
   811  0011CE  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
   812  0011D2  0009               	tblrd		*+
   813  0011D4  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
   814  0011D8  0009               	tblrd		*+
   815  0011DA  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
   816  0011DE  000A               	tblrd		*-
   817  0011E0  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
   818  0011E4  0E48               	movlw	72
   819  0011E6  EC30  F00D         	call	_glcdDrawRectangle
   820                           
   821                           ;main.c: 43: glcdDrawRectangle(90, 108, 0, GLCD_SIZE_VERT, INDIGO);
   822  0011EA  0E6C               	movlw	108
   823  0011EC  6E07               	movwf	glcdDrawRectangle@XE,c
   824  0011EE  0E00               	movlw	0
   825  0011F0  6E08               	movwf	glcdDrawRectangle@YS,c
   826  0011F2  0E47               	movlw	low _GLCD_SIZE_VERT
   827  0011F4  6EF6               	movwf	tblptrl,c
   828  0011F6                     	if	1	;There is more than 1 active tblptr byte
   829  0011F6  0E10               	movlw	high _GLCD_SIZE_VERT
   830  0011F8  6EF7               	movwf	tblptrh,c
   831  0011FA                     	endif
   832  0011FA                     	if	0	;There are less than 3 active tblptr bytes
   833  0011FA                     	endif
   834  0011FA  0008               	tblrd		*
   835  0011FC  CFF5 F009          	movff	tablat,glcdDrawRectangle@YE
   836  001200  0E05               	movlw	low _INDIGO
   837  001202  6EF6               	movwf	tblptrl,c
   838  001204                     	if	1	;There is more than 1 active tblptr byte
   839  001204  0E10               	movlw	high _INDIGO
   840  001206  6EF7               	movwf	tblptrh,c
   841  001208                     	endif
   842  001208                     	if	0	;There are less than 3 active tblptr bytes
   843  001208                     	endif
   844  001208  0009               	tblrd		*+
   845  00120A  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
   846  00120E  0009               	tblrd		*+
   847  001210  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
   848  001214  0009               	tblrd		*+
   849  001216  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
   850  00121A  000A               	tblrd		*-
   851  00121C  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
   852  001220  0E5A               	movlw	90
   853  001222  EC30  F00D         	call	_glcdDrawRectangle
   854                           
   855                           ;main.c: 44: glcdDrawRectangle(108, 128, 0, GLCD_SIZE_VERT, VIOLET);
   856  001226  0E80               	movlw	128
   857  001228  6E07               	movwf	glcdDrawRectangle@XE,c
   858  00122A  0E00               	movlw	0
   859  00122C  6E08               	movwf	glcdDrawRectangle@YS,c
   860  00122E  0E47               	movlw	low _GLCD_SIZE_VERT
   861  001230  6EF6               	movwf	tblptrl,c
   862  001232                     	if	1	;There is more than 1 active tblptr byte
   863  001232  0E10               	movlw	high _GLCD_SIZE_VERT
   864  001234  6EF7               	movwf	tblptrh,c
   865  001236                     	endif
   866  001236                     	if	0	;There are less than 3 active tblptr bytes
   867  001236                     	endif
   868  001236  0008               	tblrd		*
   869  001238  CFF5 F009          	movff	tablat,glcdDrawRectangle@YE
   870  00123C  0E01               	movlw	low _VIOLET
   871  00123E  6EF6               	movwf	tblptrl,c
   872  001240                     	if	1	;There is more than 1 active tblptr byte
   873  001240  0E10               	movlw	high _VIOLET
   874  001242  6EF7               	movwf	tblptrh,c
   875  001244                     	endif
   876  001244                     	if	0	;There are less than 3 active tblptr bytes
   877  001244                     	endif
   878  001244  0009               	tblrd		*+
   879  001246  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
   880  00124A  0009               	tblrd		*+
   881  00124C  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
   882  001250  0009               	tblrd		*+
   883  001252  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
   884  001256  000A               	tblrd		*-
   885  001258  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
   886  00125C  0E6C               	movlw	108
   887  00125E  EC30  F00D         	call	_glcdDrawRectangle
   888                           
   889                           ;main.c: 47: _delay((unsigned long)((500)*(40000000/4000.0)));
   890  001262  0E1A               	movlw	26
   891  001264  6E22               	movwf	(??_main+1)& (0+255),c
   892  001266  0E5E               	movlw	94
   893  001268  6E21               	movwf	??_main& (0+255),c
   894  00126A  0E6E               	movlw	110
   895  00126C                     u907:
   896  00126C  2EE8               	decfsz	wreg,f,c
   897  00126E  D7FE               	bra	u907
   898  001270  2E21               	decfsz	??_main& (0+255),f,c
   899  001272  D7FC               	bra	u907
   900  001274  2E22               	decfsz	(??_main+1)& (0+255),f,c
   901  001276  D7FA               	bra	u907
   902  001278  D000               	nop2	
   903                           
   904                           ;main.c: 48: glcdTransfer(INST_INVON, 1);
   905  00127A  0E01               	movlw	1
   906  00127C  6E04               	movwf	glcdTransfer@cmd,c
   907  00127E  0E4C               	movlw	low _INST_INVON
   908  001280  6EF6               	movwf	tblptrl,c
   909  001282                     	if	1	;There is more than 1 active tblptr byte
   910  001282  0E10               	movlw	high _INST_INVON
   911  001284  6EF7               	movwf	tblptrh,c
   912  001286                     	endif
   913  001286                     	if	0	;There are less than 3 active tblptr bytes
   914  001286                     	endif
   915  001286  0008               	tblrd		*
   916  001288  50F5               	movf	tablat,w,c
   917  00128A  EC35  F00F         	call	_glcdTransfer
   918                           
   919                           ;main.c: 49: _delay((unsigned long)((500)*(40000000/4000.0)));
   920  00128E  0E1A               	movlw	26
   921  001290  6E22               	movwf	(??_main+1)& (0+255),c
   922  001292  0E5E               	movlw	94
   923  001294  6E21               	movwf	??_main& (0+255),c
   924  001296  0E6E               	movlw	110
   925  001298                     u917:
   926  001298  2EE8               	decfsz	wreg,f,c
   927  00129A  D7FE               	bra	u917
   928  00129C  2E21               	decfsz	??_main& (0+255),f,c
   929  00129E  D7FC               	bra	u917
   930  0012A0  2E22               	decfsz	(??_main+1)& (0+255),f,c
   931  0012A2  D7FA               	bra	u917
   932  0012A4  D000               	nop2	
   933                           
   934                           ;main.c: 50: glcdTransfer(INST_INVOFF, 1);
   935  0012A6  0E01               	movlw	1
   936  0012A8  6E04               	movwf	glcdTransfer@cmd,c
   937  0012AA  0E4B               	movlw	low _INST_INVOFF
   938  0012AC  6EF6               	movwf	tblptrl,c
   939  0012AE                     	if	1	;There is more than 1 active tblptr byte
   940  0012AE  0E10               	movlw	high _INST_INVOFF
   941  0012B0  6EF7               	movwf	tblptrh,c
   942  0012B2                     	endif
   943  0012B2                     	if	0	;There are less than 3 active tblptr bytes
   944  0012B2                     	endif
   945  0012B2  0008               	tblrd		*
   946  0012B4  50F5               	movf	tablat,w,c
   947  0012B6  EC35  F00F         	call	_glcdTransfer
   948                           
   949                           ;main.c: 51: _delay((unsigned long)((500)*(40000000/4000.0)));
   950  0012BA  0E1A               	movlw	26
   951  0012BC  6E22               	movwf	(??_main+1)& (0+255),c
   952  0012BE  0E5E               	movlw	94
   953  0012C0  6E21               	movwf	??_main& (0+255),c
   954  0012C2  0E6E               	movlw	110
   955  0012C4                     u927:
   956  0012C4  2EE8               	decfsz	wreg,f,c
   957  0012C6  D7FE               	bra	u927
   958  0012C8  2E21               	decfsz	??_main& (0+255),f,c
   959  0012CA  D7FC               	bra	u927
   960  0012CC  2E22               	decfsz	(??_main+1)& (0+255),f,c
   961  0012CE  D7FA               	bra	u927
   962  0012D0  D000               	nop2	
   963                           
   964                           ;main.c: 54: glcdDrawPixel(0, 0, WHITE);
   965  0012D2  0E00               	movlw	0
   966  0012D4  6E1A               	movwf	glcdDrawPixel@YS,c
   967  0012D6  0E1D               	movlw	low _WHITE
   968  0012D8  6EF6               	movwf	tblptrl,c
   969  0012DA                     	if	1	;There is more than 1 active tblptr byte
   970  0012DA  0E10               	movlw	high _WHITE
   971  0012DC  6EF7               	movwf	tblptrh,c
   972  0012DE                     	endif
   973  0012DE                     	if	0	;There are less than 3 active tblptr bytes
   974  0012DE                     	endif
   975  0012DE  0009               	tblrd		*+
   976  0012E0  CFF5 F01B          	movff	tablat,glcdDrawPixel@color
   977  0012E4  0009               	tblrd		*+
   978  0012E6  CFF5 F01C          	movff	tablat,glcdDrawPixel@color+1
   979  0012EA  0009               	tblrd		*+
   980  0012EC  CFF5 F01D          	movff	tablat,glcdDrawPixel@color+2
   981  0012F0  000A               	tblrd		*-
   982  0012F2  CFF5 F01E          	movff	tablat,glcdDrawPixel@color+3
   983  0012F6  0E00               	movlw	0
   984  0012F8  EC6A  F00E         	call	_glcdDrawPixel
   985                           
   986                           ;main.c: 55: _delay((unsigned long)((500)*(40000000/4000.0)));
   987  0012FC  0E1A               	movlw	26
   988  0012FE  6E22               	movwf	(??_main+1)& (0+255),c
   989  001300  0E5E               	movlw	94
   990  001302  6E21               	movwf	??_main& (0+255),c
   991  001304  0E6E               	movlw	110
   992  001306                     u937:
   993  001306  2EE8               	decfsz	wreg,f,c
   994  001308  D7FE               	bra	u937
   995  00130A  2E21               	decfsz	??_main& (0+255),f,c
   996  00130C  D7FC               	bra	u937
   997  00130E  2E22               	decfsz	(??_main+1)& (0+255),f,c
   998  001310  D7FA               	bra	u937
   999  001312  D000               	nop2	
  1000                           
  1001                           ;main.c: 56: glcdDrawPixel(GLCD_SIZE_HORZ, 0, WHITE);
  1002  001314  0E00               	movlw	0
  1003  001316  6E1A               	movwf	glcdDrawPixel@YS,c
  1004  001318  0E1D               	movlw	low _WHITE
  1005  00131A  6EF6               	movwf	tblptrl,c
  1006  00131C                     	if	1	;There is more than 1 active tblptr byte
  1007  00131C  0E10               	movlw	high _WHITE
  1008  00131E  6EF7               	movwf	tblptrh,c
  1009  001320                     	endif
  1010  001320                     	if	0	;There are less than 3 active tblptr bytes
  1011  001320                     	endif
  1012  001320  0009               	tblrd		*+
  1013  001322  CFF5 F01B          	movff	tablat,glcdDrawPixel@color
  1014  001326  0009               	tblrd		*+
  1015  001328  CFF5 F01C          	movff	tablat,glcdDrawPixel@color+1
  1016  00132C  0009               	tblrd		*+
  1017  00132E  CFF5 F01D          	movff	tablat,glcdDrawPixel@color+2
  1018  001332  000A               	tblrd		*-
  1019  001334  CFF5 F01E          	movff	tablat,glcdDrawPixel@color+3
  1020  001338  0E48               	movlw	low _GLCD_SIZE_HORZ
  1021  00133A  6EF6               	movwf	tblptrl,c
  1022  00133C                     	if	1	;There is more than 1 active tblptr byte
  1023  00133C  0E10               	movlw	high _GLCD_SIZE_HORZ
  1024  00133E  6EF7               	movwf	tblptrh,c
  1025  001340                     	endif
  1026  001340                     	if	0	;There are less than 3 active tblptr bytes
  1027  001340                     	endif
  1028  001340  0008               	tblrd		*
  1029  001342  50F5               	movf	tablat,w,c
  1030  001344  EC6A  F00E         	call	_glcdDrawPixel
  1031                           
  1032                           ;main.c: 57: _delay((unsigned long)((500)*(40000000/4000.0)));
  1033  001348  0E1A               	movlw	26
  1034  00134A  6E22               	movwf	(??_main+1)& (0+255),c
  1035  00134C  0E5E               	movlw	94
  1036  00134E  6E21               	movwf	??_main& (0+255),c
  1037  001350  0E6E               	movlw	110
  1038  001352                     u947:
  1039  001352  2EE8               	decfsz	wreg,f,c
  1040  001354  D7FE               	bra	u947
  1041  001356  2E21               	decfsz	??_main& (0+255),f,c
  1042  001358  D7FC               	bra	u947
  1043  00135A  2E22               	decfsz	(??_main+1)& (0+255),f,c
  1044  00135C  D7FA               	bra	u947
  1045  00135E  D000               	nop2	
  1046                           
  1047                           ;main.c: 58: glcdDrawPixel(GLCD_SIZE_HORZ, GLCD_SIZE_VERT, WHITE);
  1048  001360  0E47               	movlw	low _GLCD_SIZE_VERT
  1049  001362  6EF6               	movwf	tblptrl,c
  1050  001364                     	if	1	;There is more than 1 active tblptr byte
  1051  001364  0E10               	movlw	high _GLCD_SIZE_VERT
  1052  001366  6EF7               	movwf	tblptrh,c
  1053  001368                     	endif
  1054  001368                     	if	0	;There are less than 3 active tblptr bytes
  1055  001368                     	endif
  1056  001368  0008               	tblrd		*
  1057  00136A  CFF5 F01A          	movff	tablat,glcdDrawPixel@YS
  1058  00136E  0E1D               	movlw	low _WHITE
  1059  001370  6EF6               	movwf	tblptrl,c
  1060  001372                     	if	1	;There is more than 1 active tblptr byte
  1061  001372  0E10               	movlw	high _WHITE
  1062  001374  6EF7               	movwf	tblptrh,c
  1063  001376                     	endif
  1064  001376                     	if	0	;There are less than 3 active tblptr bytes
  1065  001376                     	endif
  1066  001376  0009               	tblrd		*+
  1067  001378  CFF5 F01B          	movff	tablat,glcdDrawPixel@color
  1068  00137C  0009               	tblrd		*+
  1069  00137E  CFF5 F01C          	movff	tablat,glcdDrawPixel@color+1
  1070  001382  0009               	tblrd		*+
  1071  001384  CFF5 F01D          	movff	tablat,glcdDrawPixel@color+2
  1072  001388  000A               	tblrd		*-
  1073  00138A  CFF5 F01E          	movff	tablat,glcdDrawPixel@color+3
  1074  00138E  0E48               	movlw	low _GLCD_SIZE_HORZ
  1075  001390  6EF6               	movwf	tblptrl,c
  1076  001392                     	if	1	;There is more than 1 active tblptr byte
  1077  001392  0E10               	movlw	high _GLCD_SIZE_HORZ
  1078  001394  6EF7               	movwf	tblptrh,c
  1079  001396                     	endif
  1080  001396                     	if	0	;There are less than 3 active tblptr bytes
  1081  001396                     	endif
  1082  001396  0008               	tblrd		*
  1083  001398  50F5               	movf	tablat,w,c
  1084  00139A  EC6A  F00E         	call	_glcdDrawPixel
  1085                           
  1086                           ;main.c: 59: _delay((unsigned long)((500)*(40000000/4000.0)));
  1087  00139E  0E1A               	movlw	26
  1088  0013A0  6E22               	movwf	(??_main+1)& (0+255),c
  1089  0013A2  0E5E               	movlw	94
  1090  0013A4  6E21               	movwf	??_main& (0+255),c
  1091  0013A6  0E6E               	movlw	110
  1092  0013A8                     u957:
  1093  0013A8  2EE8               	decfsz	wreg,f,c
  1094  0013AA  D7FE               	bra	u957
  1095  0013AC  2E21               	decfsz	??_main& (0+255),f,c
  1096  0013AE  D7FC               	bra	u957
  1097  0013B0  2E22               	decfsz	(??_main+1)& (0+255),f,c
  1098  0013B2  D7FA               	bra	u957
  1099  0013B4  D000               	nop2	
  1100                           
  1101                           ;main.c: 60: glcdDrawPixel(0, GLCD_SIZE_VERT, WHITE);
  1102  0013B6  0E47               	movlw	low _GLCD_SIZE_VERT
  1103  0013B8  6EF6               	movwf	tblptrl,c
  1104  0013BA                     	if	1	;There is more than 1 active tblptr byte
  1105  0013BA  0E10               	movlw	high _GLCD_SIZE_VERT
  1106  0013BC  6EF7               	movwf	tblptrh,c
  1107  0013BE                     	endif
  1108  0013BE                     	if	0	;There are less than 3 active tblptr bytes
  1109  0013BE                     	endif
  1110  0013BE  0008               	tblrd		*
  1111  0013C0  CFF5 F01A          	movff	tablat,glcdDrawPixel@YS
  1112  0013C4  0E1D               	movlw	low _WHITE
  1113  0013C6  6EF6               	movwf	tblptrl,c
  1114  0013C8                     	if	1	;There is more than 1 active tblptr byte
  1115  0013C8  0E10               	movlw	high _WHITE
  1116  0013CA  6EF7               	movwf	tblptrh,c
  1117  0013CC                     	endif
  1118  0013CC                     	if	0	;There are less than 3 active tblptr bytes
  1119  0013CC                     	endif
  1120  0013CC  0009               	tblrd		*+
  1121  0013CE  CFF5 F01B          	movff	tablat,glcdDrawPixel@color
  1122  0013D2  0009               	tblrd		*+
  1123  0013D4  CFF5 F01C          	movff	tablat,glcdDrawPixel@color+1
  1124  0013D8  0009               	tblrd		*+
  1125  0013DA  CFF5 F01D          	movff	tablat,glcdDrawPixel@color+2
  1126  0013DE  000A               	tblrd		*-
  1127  0013E0  CFF5 F01E          	movff	tablat,glcdDrawPixel@color+3
  1128  0013E4  0E00               	movlw	0
  1129  0013E6  EC6A  F00E         	call	_glcdDrawPixel
  1130                           
  1131                           ;main.c: 61: _delay((unsigned long)((500)*(40000000/4000.0)));
  1132  0013EA  0E1A               	movlw	26
  1133  0013EC  6E22               	movwf	(??_main+1)& (0+255),c
  1134  0013EE  0E5E               	movlw	94
  1135  0013F0  6E21               	movwf	??_main& (0+255),c
  1136  0013F2  0E6E               	movlw	110
  1137  0013F4                     u967:
  1138  0013F4  2EE8               	decfsz	wreg,f,c
  1139  0013F6  D7FE               	bra	u967
  1140  0013F8  2E21               	decfsz	??_main& (0+255),f,c
  1141  0013FA  D7FC               	bra	u967
  1142  0013FC  2E22               	decfsz	(??_main+1)& (0+255),f,c
  1143  0013FE  D7FA               	bra	u967
  1144  001400  D000               	nop2	
  1145                           
  1146                           ;main.c: 64: for(x = 0; x < GLCD_SIZE_HORZ; x++){
  1147  001402  0E00               	movlw	0
  1148  001404  6E29               	movwf	main@x,c
  1149  001406                     l1868:
  1150  001406  0E48               	movlw	low _GLCD_SIZE_HORZ
  1151  001408  6EF6               	movwf	tblptrl,c
  1152  00140A                     	if	1	;There is more than 1 active tblptr byte
  1153  00140A  0E10               	movlw	high _GLCD_SIZE_HORZ
  1154  00140C  6EF7               	movwf	tblptrh,c
  1155  00140E                     	endif
  1156  00140E                     	if	0	;There are less than 3 active tblptr bytes
  1157  00140E                     	endif
  1158  00140E  0009               	tblrd		*+
  1159  001410  50F5               	movf	tablat,w,c
  1160  001412  5C29               	subwf	main@x,w,c
  1161  001414  B0D8               	btfsc	status,0,c
  1162  001416  D082               	goto	l1886
  1163                           
  1164                           ;main.c: 65: if(x % (GLCD_SIZE_VERT/16) == 0){
  1165  001418  C029  F009         	movff	main@x,___awmod@dividend
  1166  00141C  6A0A               	clrf	___awmod@dividend+1,c
  1167  00141E  0E00               	movlw	0
  1168  001420  6E04               	movwf	___awdiv@divisor+1,c
  1169  001422  0E10               	movlw	16
  1170  001424  6E03               	movwf	___awdiv@divisor,c
  1171  001426  0E47               	movlw	low _GLCD_SIZE_VERT
  1172  001428  6EF6               	movwf	tblptrl,c
  1173  00142A                     	if	1	;There is more than 1 active tblptr byte
  1174  00142A  0E10               	movlw	high _GLCD_SIZE_VERT
  1175  00142C  6EF7               	movwf	tblptrh,c
  1176  00142E                     	endif
  1177  00142E                     	if	0	;There are less than 3 active tblptr bytes
  1178  00142E                     	endif
  1179  00142E  0008               	tblrd		*
  1180  001430  50F5               	movf	tablat,w,c
  1181  001432  6E01               	movwf	___awdiv@dividend,c
  1182  001434  6A02               	clrf	___awdiv@dividend+1,c
  1183  001436  ECF0  F00D         	call	___awdiv	;wreg free
  1184  00143A  C001  F00B         	movff	?___awdiv,___awmod@divisor
  1185  00143E  C002  F00C         	movff	?___awdiv+1,___awmod@divisor+1
  1186  001442  EC32  F00E         	call	___awmod	;wreg free
  1187  001446  5009               	movf	?___awmod,w,c
  1188  001448  100A               	iorwf	?___awmod+1,w,c
  1189  00144A  A4D8               	btfss	status,2,c
  1190  00144C  D036               	goto	l1878
  1191                           
  1192                           ;main.c: 66: glcdDrawPixel(GLCD_SIZE_VERT - (x * 8), (x % 3) * 33, x * 2048);
  1193  00144E  C029  F001         	movff	main@x,___wmul@multiplier
  1194  001452  6A02               	clrf	___wmul@multiplier+1,c
  1195  001454  0E08               	movlw	8
  1196  001456  6E04               	movwf	___wmul@multiplicand+1,c
  1197  001458  0E00               	movlw	0
  1198  00145A  6E03               	movwf	___wmul@multiplicand,c
  1199  00145C  EC49  F00F         	call	___wmul	;wreg free
  1200  001460  C001  F024         	movff	?___wmul,_main$1173
  1201  001464  C002  F025         	movff	?___wmul+1,_main$1173+1
  1202  001468  0E00               	movlw	0
  1203  00146A  BE25               	btfsc	_main$1173+1,7,c
  1204  00146C  0EFF               	movlw	-1
  1205  00146E  6E26               	movwf	_main$1173+2,c
  1206  001470  6E27               	movwf	_main$1173+3,c
  1207                           
  1208                           ;main.c: 66: glcdDrawPixel(GLCD_SIZE_VERT - (x * 8), (x % 3) * 33, x * 2048);
  1209  001472  C029  F009         	movff	main@x,___awmod@dividend
  1210  001476  6A0A               	clrf	___awmod@dividend+1,c
  1211  001478  0E00               	movlw	0
  1212  00147A  6E0C               	movwf	___awmod@divisor+1,c
  1213  00147C  0E03               	movlw	3
  1214  00147E  6E0B               	movwf	___awmod@divisor,c
  1215  001480  EC32  F00E         	call	___awmod	;wreg free
  1216  001484  5009               	movf	?___awmod,w,c
  1217  001486  0D21               	mullw	33
  1218  001488  CFF3 F01A          	movff	prodl,glcdDrawPixel@YS
  1219  00148C  C024  F01B         	movff	_main$1173,glcdDrawPixel@color
  1220  001490  C025  F01C         	movff	_main$1173+1,glcdDrawPixel@color+1
  1221  001494  C026  F01D         	movff	_main$1173+2,glcdDrawPixel@color+2
  1222  001498  C027  F01E         	movff	_main$1173+3,glcdDrawPixel@color+3
  1223  00149C  0E47               	movlw	low _GLCD_SIZE_VERT
  1224  00149E  6EF6               	movwf	tblptrl,c
  1225  0014A0                     	if	1	;There is more than 1 active tblptr byte
  1226  0014A0  0E10               	movlw	high _GLCD_SIZE_VERT
  1227  0014A2  6EF7               	movwf	tblptrh,c
  1228  0014A4                     	endif
  1229  0014A4                     	if	0	;There are less than 3 active tblptr bytes
  1230  0014A4                     	endif
  1231  0014A4  0008               	tblrd		*
  1232  0014A6  CFF5 F021          	movff	tablat,??_main
  1233  0014AA  5029               	movf	main@x,w,c
  1234  0014AC  0D08               	mullw	8
  1235  0014AE  50F3               	movf	prodl,w,c
  1236  0014B0  0800               	sublw	0
  1237  0014B2  2421               	addwf	??_main,w,c
  1238  0014B4  EC6A  F00E         	call	_glcdDrawPixel
  1239                           
  1240                           ;main.c: 67: }
  1241  0014B8  D028               	goto	l1882
  1242  0014BA                     l1878:
  1243                           
  1244                           ;main.c: 68: else{
  1245                           ;main.c: 69: glcdDrawPixel(x, GLCD_SIZE_VERT - x, x * 2048);
  1246  0014BA  C029  F001         	movff	main@x,___wmul@multiplier
  1247  0014BE  6A02               	clrf	___wmul@multiplier+1,c
  1248  0014C0  0E08               	movlw	8
  1249  0014C2  6E04               	movwf	___wmul@multiplicand+1,c
  1250  0014C4  0E00               	movlw	0
  1251  0014C6  6E03               	movwf	___wmul@multiplicand,c
  1252  0014C8  EC49  F00F         	call	___wmul	;wreg free
  1253  0014CC  C001  F024         	movff	?___wmul,_main$1173
  1254  0014D0  C002  F025         	movff	?___wmul+1,_main$1173+1
  1255  0014D4  0E00               	movlw	0
  1256  0014D6  BE25               	btfsc	_main$1173+1,7,c
  1257  0014D8  0EFF               	movlw	-1
  1258  0014DA  6E26               	movwf	_main$1173+2,c
  1259  0014DC  6E27               	movwf	_main$1173+3,c
  1260                           
  1261                           ;main.c: 68: else{
  1262                           ;main.c: 69: glcdDrawPixel(x, GLCD_SIZE_VERT - x, x * 2048);
  1263  0014DE  0E47               	movlw	low _GLCD_SIZE_VERT
  1264  0014E0  6EF6               	movwf	tblptrl,c
  1265  0014E2                     	if	1	;There is more than 1 active tblptr byte
  1266  0014E2  0E10               	movlw	high _GLCD_SIZE_VERT
  1267  0014E4  6EF7               	movwf	tblptrh,c
  1268  0014E6                     	endif
  1269  0014E6                     	if	0	;There are less than 3 active tblptr bytes
  1270  0014E6                     	endif
  1271  0014E6  0008               	tblrd		*
  1272  0014E8  CFF5 F021          	movff	tablat,??_main
  1273  0014EC  5029               	movf	main@x,w,c
  1274  0014EE  0800               	sublw	0
  1275  0014F0  2421               	addwf	??_main,w,c
  1276  0014F2  6E1A               	movwf	glcdDrawPixel@YS,c
  1277  0014F4  C024  F01B         	movff	_main$1173,glcdDrawPixel@color
  1278  0014F8  C025  F01C         	movff	_main$1173+1,glcdDrawPixel@color+1
  1279  0014FC  C026  F01D         	movff	_main$1173+2,glcdDrawPixel@color+2
  1280  001500  C027  F01E         	movff	_main$1173+3,glcdDrawPixel@color+3
  1281  001504  5029               	movf	main@x,w,c
  1282  001506  EC6A  F00E         	call	_glcdDrawPixel
  1283  00150A                     l1882:
  1284                           
  1285                           ;main.c: 70: }
  1286                           ;main.c: 71: _delay((unsigned long)((10)*(40000000/4000.0)));
  1287  00150A  0E82               	movlw	130
  1288  00150C  6E21               	movwf	??_main& (0+255),c
  1289  00150E  0EDE               	movlw	222
  1290  001510                     u977:
  1291  001510  2EE8               	decfsz	wreg,f,c
  1292  001512  D7FE               	bra	u977
  1293  001514  2E21               	decfsz	??_main& (0+255),f,c
  1294  001516  D7FC               	bra	u977
  1295  001518  2A29               	incf	main@x,f,c
  1296  00151A  D775               	goto	l1868
  1297  00151C                     l1886:
  1298                           
  1299                           ;main.c: 72: }
  1300                           ;main.c: 75: for(y = 0; y < GLCD_SIZE_VERT; y++){
  1301  00151C  0E00               	movlw	0
  1302  00151E  6E28               	movwf	main@y,c
  1303  001520                     l1888:
  1304  001520  0E47               	movlw	low _GLCD_SIZE_VERT
  1305  001522  6EF6               	movwf	tblptrl,c
  1306  001524                     	if	1	;There is more than 1 active tblptr byte
  1307  001524  0E10               	movlw	high _GLCD_SIZE_VERT
  1308  001526  6EF7               	movwf	tblptrh,c
  1309  001528                     	endif
  1310  001528                     	if	0	;There are less than 3 active tblptr bytes
  1311  001528                     	endif
  1312  001528  0009               	tblrd		*+
  1313  00152A  50F5               	movf	tablat,w,c
  1314  00152C  5C28               	subwf	main@y,w,c
  1315  00152E  B0D8               	btfsc	status,0,c
  1316  001530  D028               	goto	l1908
  1317                           
  1318                           ;main.c: 76: for(x = 0; x < GLCD_SIZE_HORZ; x++){
  1319  001532  0E00               	movlw	0
  1320  001534  6E29               	movwf	main@x,c
  1321  001536                     l1894:
  1322  001536  0E48               	movlw	low _GLCD_SIZE_HORZ
  1323  001538  6EF6               	movwf	tblptrl,c
  1324  00153A                     	if	1	;There is more than 1 active tblptr byte
  1325  00153A  0E10               	movlw	high _GLCD_SIZE_HORZ
  1326  00153C  6EF7               	movwf	tblptrh,c
  1327  00153E                     	endif
  1328  00153E                     	if	0	;There are less than 3 active tblptr bytes
  1329  00153E                     	endif
  1330  00153E  0009               	tblrd		*+
  1331  001540  50F5               	movf	tablat,w,c
  1332  001542  5C29               	subwf	main@x,w,c
  1333  001544  B0D8               	btfsc	status,0,c
  1334  001546  D01B               	goto	l1904
  1335                           
  1336                           ;main.c: 77: glcdDrawPixel(x, y, x*y*16);
  1337  001548  C028  F01A         	movff	main@y,glcdDrawPixel@YS
  1338  00154C  5029               	movf	main@x,w,c
  1339  00154E  0228               	mulwf	main@y,c
  1340  001550  3AF3               	swapf	prodl,f,c
  1341  001552  3AF4               	swapf	prodh,f,c
  1342  001554  0EF0               	movlw	240
  1343  001556  16F4               	andwf	prodh,f,c
  1344  001558  50F3               	movf	prodl,w,c
  1345  00155A  0B0F               	andlw	15
  1346  00155C  12F4               	iorwf	prodh,f,c
  1347  00155E  0EF0               	movlw	240
  1348  001560  16F3               	andwf	prodl,f,c
  1349  001562  CFF3 F01B          	movff	prodl,glcdDrawPixel@color
  1350  001566  CFF4 F01C          	movff	prodh,glcdDrawPixel@color+1
  1351  00156A  0E00               	movlw	0
  1352  00156C  BE1C               	btfsc	glcdDrawPixel@color+1,7,c
  1353  00156E  0EFF               	movlw	-1
  1354  001570  6E1D               	movwf	glcdDrawPixel@color+2,c
  1355  001572  6E1E               	movwf	glcdDrawPixel@color+3,c
  1356  001574  5029               	movf	main@x,w,c
  1357  001576  EC6A  F00E         	call	_glcdDrawPixel
  1358  00157A  2A29               	incf	main@x,f,c
  1359  00157C  D7DC               	goto	l1894
  1360  00157E                     l1904:
  1361  00157E  2A28               	incf	main@y,f,c
  1362  001580  D7CF               	goto	l1888
  1363  001582                     l1908:
  1364                           
  1365                           ;main.c: 78: }
  1366                           ;main.c: 79: }
  1367                           ;main.c: 82: for(y = 0; y < GLCD_SIZE_VERT; y++){
  1368  001582  0E00               	movlw	0
  1369  001584  6E28               	movwf	main@y,c
  1370  001586                     l1910:
  1371  001586  0E47               	movlw	low _GLCD_SIZE_VERT
  1372  001588  6EF6               	movwf	tblptrl,c
  1373  00158A                     	if	1	;There is more than 1 active tblptr byte
  1374  00158A  0E10               	movlw	high _GLCD_SIZE_VERT
  1375  00158C  6EF7               	movwf	tblptrh,c
  1376  00158E                     	endif
  1377  00158E                     	if	0	;There are less than 3 active tblptr bytes
  1378  00158E                     	endif
  1379  00158E  0009               	tblrd		*+
  1380  001590  50F5               	movf	tablat,w,c
  1381  001592  5C28               	subwf	main@y,w,c
  1382  001594  B0D8               	btfsc	status,0,c
  1383  001596  D033               	goto	l1932
  1384                           
  1385                           ;main.c: 83: for(x = 0; x < GLCD_SIZE_HORZ; x++){
  1386  001598  0E00               	movlw	0
  1387  00159A  6E29               	movwf	main@x,c
  1388  00159C                     l1916:
  1389  00159C  0E48               	movlw	low _GLCD_SIZE_HORZ
  1390  00159E  6EF6               	movwf	tblptrl,c
  1391  0015A0                     	if	1	;There is more than 1 active tblptr byte
  1392  0015A0  0E10               	movlw	high _GLCD_SIZE_HORZ
  1393  0015A2  6EF7               	movwf	tblptrh,c
  1394  0015A4                     	endif
  1395  0015A4                     	if	0	;There are less than 3 active tblptr bytes
  1396  0015A4                     	endif
  1397  0015A4  0009               	tblrd		*+
  1398  0015A6  50F5               	movf	tablat,w,c
  1399  0015A8  5C29               	subwf	main@x,w,c
  1400  0015AA  B0D8               	btfsc	status,0,c
  1401  0015AC  D026               	goto	l1928
  1402                           
  1403                           ;main.c: 84: glcdDrawPixel(x, y, (x+8)*(y+8));
  1404  0015AE  0E08               	movlw	8
  1405  0015B0  2429               	addwf	main@x,w,c
  1406  0015B2  6E01               	movwf	___wmul@multiplier,c
  1407  0015B4  6A02               	clrf	___wmul@multiplier+1,c
  1408  0015B6  0E00               	movlw	0
  1409  0015B8  2202               	addwfc	___wmul@multiplier+1,f,c
  1410  0015BA  0E08               	movlw	8
  1411  0015BC  2428               	addwf	main@y,w,c
  1412  0015BE  6E03               	movwf	___wmul@multiplicand,c
  1413  0015C0  6A04               	clrf	___wmul@multiplicand+1,c
  1414  0015C2  0E00               	movlw	0
  1415  0015C4  2204               	addwfc	___wmul@multiplicand+1,f,c
  1416  0015C6  EC49  F00F         	call	___wmul	;wreg free
  1417  0015CA  C001  F024         	movff	?___wmul,_main$1173
  1418  0015CE  C002  F025         	movff	?___wmul+1,_main$1173+1
  1419  0015D2  0E00               	movlw	0
  1420  0015D4  BE25               	btfsc	_main$1173+1,7,c
  1421  0015D6  0EFF               	movlw	-1
  1422  0015D8  6E26               	movwf	_main$1173+2,c
  1423  0015DA  6E27               	movwf	_main$1173+3,c
  1424                           
  1425                           ;main.c: 84: glcdDrawPixel(x, y, (x+8)*(y+8));
  1426  0015DC  C028  F01A         	movff	main@y,glcdDrawPixel@YS
  1427  0015E0  C024  F01B         	movff	_main$1173,glcdDrawPixel@color
  1428  0015E4  C025  F01C         	movff	_main$1173+1,glcdDrawPixel@color+1
  1429  0015E8  C026  F01D         	movff	_main$1173+2,glcdDrawPixel@color+2
  1430  0015EC  C027  F01E         	movff	_main$1173+3,glcdDrawPixel@color+3
  1431  0015F0  5029               	movf	main@x,w,c
  1432  0015F2  EC6A  F00E         	call	_glcdDrawPixel
  1433  0015F6  2A29               	incf	main@x,f,c
  1434  0015F8  D7D1               	goto	l1916
  1435  0015FA                     l1928:
  1436  0015FA  2A28               	incf	main@y,f,c
  1437  0015FC  D7C4               	goto	l1910
  1438  0015FE                     l1932:
  1439                           
  1440                           ;main.c: 85: }
  1441                           ;main.c: 86: }
  1442                           ;main.c: 95: for(y = 0; y < GLCD_SIZE_VERT; y++){
  1443  0015FE  0E00               	movlw	0
  1444  001600  6E28               	movwf	main@y,c
  1445  001602                     l1934:
  1446  001602  0E47               	movlw	low _GLCD_SIZE_VERT
  1447  001604  6EF6               	movwf	tblptrl,c
  1448  001606                     	if	1	;There is more than 1 active tblptr byte
  1449  001606  0E10               	movlw	high _GLCD_SIZE_VERT
  1450  001608  6EF7               	movwf	tblptrh,c
  1451  00160A                     	endif
  1452  00160A                     	if	0	;There are less than 3 active tblptr bytes
  1453  00160A                     	endif
  1454  00160A  0009               	tblrd		*+
  1455  00160C  50F5               	movf	tablat,w,c
  1456  00160E  5C28               	subwf	main@y,w,c
  1457  001610  B0D8               	btfsc	status,0,c
  1458  001612  D024               	goto	l1954
  1459                           
  1460                           ;main.c: 96: for(x = 0; x < GLCD_SIZE_HORZ; x++){
  1461  001614  0E00               	movlw	0
  1462  001616  6E29               	movwf	main@x,c
  1463  001618                     l1940:
  1464  001618  0E48               	movlw	low _GLCD_SIZE_HORZ
  1465  00161A  6EF6               	movwf	tblptrl,c
  1466  00161C                     	if	1	;There is more than 1 active tblptr byte
  1467  00161C  0E10               	movlw	high _GLCD_SIZE_HORZ
  1468  00161E  6EF7               	movwf	tblptrh,c
  1469  001620                     	endif
  1470  001620                     	if	0	;There are less than 3 active tblptr bytes
  1471  001620                     	endif
  1472  001620  0009               	tblrd		*+
  1473  001622  50F5               	movf	tablat,w,c
  1474  001624  5C29               	subwf	main@x,w,c
  1475  001626  B0D8               	btfsc	status,0,c
  1476  001628  D017               	goto	l1950
  1477                           
  1478                           ;main.c: 97: glcdDrawPixel(x, y, GREEN);
  1479  00162A  C028  F01A         	movff	main@y,glcdDrawPixel@YS
  1480  00162E  0E0D               	movlw	low _GREEN
  1481  001630  6EF6               	movwf	tblptrl,c
  1482  001632                     	if	1	;There is more than 1 active tblptr byte
  1483  001632  0E10               	movlw	high _GREEN
  1484  001634  6EF7               	movwf	tblptrh,c
  1485  001636                     	endif
  1486  001636                     	if	0	;There are less than 3 active tblptr bytes
  1487  001636                     	endif
  1488  001636  0009               	tblrd		*+
  1489  001638  CFF5 F01B          	movff	tablat,glcdDrawPixel@color
  1490  00163C  0009               	tblrd		*+
  1491  00163E  CFF5 F01C          	movff	tablat,glcdDrawPixel@color+1
  1492  001642  0009               	tblrd		*+
  1493  001644  CFF5 F01D          	movff	tablat,glcdDrawPixel@color+2
  1494  001648  000A               	tblrd		*-
  1495  00164A  CFF5 F01E          	movff	tablat,glcdDrawPixel@color+3
  1496  00164E  5029               	movf	main@x,w,c
  1497  001650  EC6A  F00E         	call	_glcdDrawPixel
  1498  001654  2A29               	incf	main@x,f,c
  1499  001656  D7E0               	goto	l1940
  1500  001658                     l1950:
  1501  001658  2A28               	incf	main@y,f,c
  1502  00165A  D7D3               	goto	l1934
  1503  00165C                     l1954:
  1504                           
  1505                           ;main.c: 98: }
  1506                           ;main.c: 99: }
  1507                           ;main.c: 105: glcdDrawRectangle(0, GLCD_SIZE_HORZ, 0, GLCD_SIZE_VERT, BLACK);
  1508  00165C  0E48               	movlw	low _GLCD_SIZE_HORZ
  1509  00165E  6EF6               	movwf	tblptrl,c
  1510  001660                     	if	1	;There is more than 1 active tblptr byte
  1511  001660  0E10               	movlw	high _GLCD_SIZE_HORZ
  1512  001662  6EF7               	movwf	tblptrh,c
  1513  001664                     	endif
  1514  001664                     	if	0	;There are less than 3 active tblptr bytes
  1515  001664                     	endif
  1516  001664  0008               	tblrd		*
  1517  001666  CFF5 F007          	movff	tablat,glcdDrawRectangle@XE
  1518  00166A  0E00               	movlw	0
  1519  00166C  6E08               	movwf	glcdDrawRectangle@YS,c
  1520  00166E  0E47               	movlw	low _GLCD_SIZE_VERT
  1521  001670  6EF6               	movwf	tblptrl,c
  1522  001672                     	if	1	;There is more than 1 active tblptr byte
  1523  001672  0E10               	movlw	high _GLCD_SIZE_VERT
  1524  001674  6EF7               	movwf	tblptrh,c
  1525  001676                     	endif
  1526  001676                     	if	0	;There are less than 3 active tblptr bytes
  1527  001676                     	endif
  1528  001676  0008               	tblrd		*
  1529  001678  CFF5 F009          	movff	tablat,glcdDrawRectangle@YE
  1530  00167C  0E25               	movlw	low _BLACK
  1531  00167E  6EF6               	movwf	tblptrl,c
  1532  001680                     	if	1	;There is more than 1 active tblptr byte
  1533  001680  0E10               	movlw	high _BLACK
  1534  001682  6EF7               	movwf	tblptrh,c
  1535  001684                     	endif
  1536  001684                     	if	0	;There are less than 3 active tblptr bytes
  1537  001684                     	endif
  1538  001684  0009               	tblrd		*+
  1539  001686  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
  1540  00168A  0009               	tblrd		*+
  1541  00168C  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
  1542  001690  0009               	tblrd		*+
  1543  001692  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
  1544  001696  000A               	tblrd		*-
  1545  001698  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
  1546  00169C  0E00               	movlw	0
  1547  00169E  EC30  F00D         	call	_glcdDrawRectangle
  1548                           
  1549                           ;main.c: 106: for(y = 0; y < 5; y++){
  1550  0016A2  0E00               	movlw	0
  1551  0016A4  6E28               	movwf	main@y,c
  1552  0016A6                     l1958:
  1553  0016A6  0E04               	movlw	4
  1554  0016A8  6428               	cpfsgt	main@y,c
  1555  0016AA  D001               	goto	l1962
  1556  0016AC  D03C               	goto	l1990
  1557  0016AE                     l1962:
  1558                           
  1559                           ;main.c: 107: for(x = 0; x < GLCD_SIZE_HORZ; x++){
  1560  0016AE  0E00               	movlw	0
  1561  0016B0  6E29               	movwf	main@x,c
  1562  0016B2                     l1964:
  1563  0016B2  0E48               	movlw	low _GLCD_SIZE_HORZ
  1564  0016B4  6EF6               	movwf	tblptrl,c
  1565  0016B6                     	if	1	;There is more than 1 active tblptr byte
  1566  0016B6  0E10               	movlw	high _GLCD_SIZE_HORZ
  1567  0016B8  6EF7               	movwf	tblptrh,c
  1568  0016BA                     	endif
  1569  0016BA                     	if	0	;There are less than 3 active tblptr bytes
  1570  0016BA                     	endif
  1571  0016BA  0009               	tblrd		*+
  1572  0016BC  50F5               	movf	tablat,w,c
  1573  0016BE  5C29               	subwf	main@x,w,c
  1574  0016C0  B0D8               	btfsc	status,0,c
  1575  0016C2  D01F               	goto	l1976
  1576                           
  1577                           ;main.c: 108: glcdDrawPixel(x, y, WHITE);
  1578  0016C4  C028  F01A         	movff	main@y,glcdDrawPixel@YS
  1579  0016C8  0E1D               	movlw	low _WHITE
  1580  0016CA  6EF6               	movwf	tblptrl,c
  1581  0016CC                     	if	1	;There is more than 1 active tblptr byte
  1582  0016CC  0E10               	movlw	high _WHITE
  1583  0016CE  6EF7               	movwf	tblptrh,c
  1584  0016D0                     	endif
  1585  0016D0                     	if	0	;There are less than 3 active tblptr bytes
  1586  0016D0                     	endif
  1587  0016D0  0009               	tblrd		*+
  1588  0016D2  CFF5 F01B          	movff	tablat,glcdDrawPixel@color
  1589  0016D6  0009               	tblrd		*+
  1590  0016D8  CFF5 F01C          	movff	tablat,glcdDrawPixel@color+1
  1591  0016DC  0009               	tblrd		*+
  1592  0016DE  CFF5 F01D          	movff	tablat,glcdDrawPixel@color+2
  1593  0016E2  000A               	tblrd		*-
  1594  0016E4  CFF5 F01E          	movff	tablat,glcdDrawPixel@color+3
  1595  0016E8  5029               	movf	main@x,w,c
  1596  0016EA  EC6A  F00E         	call	_glcdDrawPixel
  1597                           
  1598                           ;main.c: 109: _delay((unsigned long)((5)*(40000000/4000.0)));
  1599  0016EE  0E41               	movlw	65
  1600  0016F0  6E21               	movwf	??_main& (0+255),c
  1601  0016F2  0EEE               	movlw	238
  1602  0016F4                     u987:
  1603  0016F4  2EE8               	decfsz	wreg,f,c
  1604  0016F6  D7FE               	bra	u987
  1605  0016F8  2E21               	decfsz	??_main& (0+255),f,c
  1606  0016FA  D7FC               	bra	u987
  1607  0016FC  D000               	nop2	
  1608  0016FE  2A29               	incf	main@x,f,c
  1609  001700  D7D8               	goto	l1964
  1610  001702                     l1976:
  1611  001702  2A28               	incf	main@y,f,c
  1612  001704  D7D0               	goto	l1958
  1613  001706                     l1980:
  1614                           
  1615                           ;main.c: 116: glcdSetOrigin(1);
  1616  001706  0E01               	movlw	1
  1617  001708  ECA1  F00E         	call	_glcdSetOrigin
  1618                           
  1619                           ;main.c: 117: break;
  1620  00170C  D021               	goto	l1992
  1621  00170E                     l1982:
  1622                           
  1623                           ;main.c: 119: glcdSetOrigin(2);
  1624  00170E  0E02               	movlw	2
  1625  001710  ECA1  F00E         	call	_glcdSetOrigin
  1626                           
  1627                           ;main.c: 120: break;
  1628  001714  D01D               	goto	l1992
  1629  001716                     l1984:
  1630                           
  1631                           ;main.c: 122: glcdSetOrigin(3);
  1632  001716  0E03               	movlw	3
  1633  001718  ECA1  F00E         	call	_glcdSetOrigin
  1634                           
  1635                           ;main.c: 123: break;
  1636  00171C  D019               	goto	l1992
  1637  00171E                     l1986:
  1638                           
  1639                           ;main.c: 125: glcdSetOrigin(0);
  1640  00171E  0E00               	movlw	0
  1641  001720  ECA1  F00E         	call	_glcdSetOrigin
  1642                           
  1643                           ;main.c: 127: }
  1644                           
  1645                           ;main.c: 126: break;
  1646  001724  D015               	goto	l1992
  1647  001726                     l1990:
  1648  001726  5023               	movf	main@rotation,w,c
  1649  001728  0B03               	andlw	3
  1650  00172A  6E21               	movwf	??_main& (0+255),c
  1651  00172C  6A22               	clrf	(??_main+1)& (0+255),c
  1652                           
  1653                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1654                           ; Switch size 1, requested type "space"
  1655                           ; Number of cases is 1, Range of values is 0 to 0
  1656                           ; switch strategies available:
  1657                           ; Name         Instructions Cycles
  1658                           ; simple_byte            4     3 (average)
  1659                           ;	Chosen strategy is simple_byte
  1660  00172E  5022               	movf	??_main+1,w,c
  1661  001730  0A00               	xorlw	0	; case 0
  1662  001732  A4D8               	btfss	status,2,c
  1663  001734  D00D               	goto	l1992
  1664                           
  1665                           ; Switch size 1, requested type "space"
  1666                           ; Number of cases is 4, Range of values is 0 to 3
  1667                           ; switch strategies available:
  1668                           ; Name         Instructions Cycles
  1669                           ; simple_byte           13     7 (average)
  1670                           ;	Chosen strategy is simple_byte
  1671  001736  5021               	movf	??_main,w,c
  1672  001738  0A00               	xorlw	0	; case 0
  1673  00173A  B4D8               	btfsc	status,2,c
  1674  00173C  D7E4               	goto	l1980
  1675  00173E  0A01               	xorlw	1	; case 1
  1676  001740  B4D8               	btfsc	status,2,c
  1677  001742  D7E5               	goto	l1982
  1678  001744  0A03               	xorlw	3	; case 2
  1679  001746  B4D8               	btfsc	status,2,c
  1680  001748  D7E6               	goto	l1984
  1681  00174A  0A01               	xorlw	1	; case 3
  1682  00174C  B4D8               	btfsc	status,2,c
  1683  00174E  D7E7               	goto	l1986
  1684  001750                     l1992:
  1685                           
  1686                           ;main.c: 128: rotation++;
  1687  001750  2A23               	incf	main@rotation,f,c
  1688  001752  D487               	goto	l1822
  1689  001754                     __end_of_main:
  1690                           	opt stack 0
  1691                           tblptru	equ	0xFF8
  1692                           tblptrh	equ	0xFF7
  1693                           tblptrl	equ	0xFF6
  1694                           tablat	equ	0xFF5
  1695                           prodh	equ	0xFF4
  1696                           prodl	equ	0xFF3
  1697                           wreg	equ	0xFE8
  1698                           status	equ	0xFD8
  1699                           
  1700 ;; *************** function _machineConfig *****************
  1701 ;; Defined at:
  1702 ;;		line 4 in file "../../src/PIC18F4620/machineConfig.c"
  1703 ;; Parameters:    Size  Location     Type
  1704 ;;		None
  1705 ;; Auto vars:     Size  Location     Type
  1706 ;;		None
  1707 ;; Return value:  Size  Location     Type
  1708 ;;                  1    wreg      void 
  1709 ;; Registers used:
  1710 ;;		wreg, status,2
  1711 ;; Tracked objects:
  1712 ;;		On entry : 0/0
  1713 ;;		On exit  : 0/0
  1714 ;;		Unchanged: 0/0
  1715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1717 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1719 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1720 ;;Total ram usage:        0 bytes
  1721 ;; Hardware stack levels used:    1
  1722 ;; This function calls:
  1723 ;;		Nothing
  1724 ;; This function is called by:
  1725 ;;		_main
  1726 ;; This function uses a non-reentrant model
  1727 ;;
  1728                           
  1729                           	psect	text1
  1730  001DEE                     __ptext1:
  1731                           	opt stack 0
  1732  001DEE                     _machineConfig:
  1733                           	opt stack 30
  1734                           
  1735                           ;machineConfig.c: 15: LATA = 0x00;
  1736                           
  1737                           ;incstack = 0
  1738  001DEE  0E00               	movlw	0
  1739  001DF0  6E89               	movwf	3977,c	;volatile
  1740                           
  1741                           ;machineConfig.c: 16: LATB = 0x00;
  1742  001DF2  0E00               	movlw	0
  1743  001DF4  6E8A               	movwf	3978,c	;volatile
  1744                           
  1745                           ;machineConfig.c: 17: LATC = 0x00;
  1746  001DF6  0E00               	movlw	0
  1747  001DF8  6E8B               	movwf	3979,c	;volatile
  1748                           
  1749                           ;machineConfig.c: 18: LATD = 0x00;
  1750  001DFA  0E00               	movlw	0
  1751  001DFC  6E8C               	movwf	3980,c	;volatile
  1752                           
  1753                           ;machineConfig.c: 19: LATE = 0x00;
  1754  001DFE  0E00               	movlw	0
  1755  001E00  6E8D               	movwf	3981,c	;volatile
  1756                           
  1757                           ;machineConfig.c: 22: TRISA = 0b00000000;
  1758  001E02  0E00               	movlw	0
  1759  001E04  6E92               	movwf	3986,c	;volatile
  1760                           
  1761                           ;machineConfig.c: 23: TRISB = 0b11110010;
  1762  001E06  0EF2               	movlw	242
  1763  001E08  6E93               	movwf	3987,c	;volatile
  1764                           
  1765                           ;machineConfig.c: 24: TRISC = 0b10000000;
  1766  001E0A  0E80               	movlw	128
  1767  001E0C  6E94               	movwf	3988,c	;volatile
  1768                           
  1769                           ;machineConfig.c: 28: TRISD = 0b00000001;
  1770  001E0E  0E01               	movlw	1
  1771  001E10  6E95               	movwf	3989,c	;volatile
  1772                           
  1773                           ;machineConfig.c: 34: TRISE = 0b00000100;
  1774  001E12  0E04               	movlw	4
  1775  001E14  6E96               	movwf	3990,c	;volatile
  1776                           
  1777                           ;machineConfig.c: 40: nRBPU = 1;
  1778  001E16  8EF1               	bsf	intcon2,7,c	;volatile
  1779                           
  1780                           ;machineConfig.c: 43: ADCON0 = 0x00;
  1781  001E18  0E00               	movlw	0
  1782  001E1A  6EC2               	movwf	4034,c	;volatile
  1783                           
  1784                           ;machineConfig.c: 44: ADCON1 = 0b00001111;
  1785  001E1C  0E0F               	movlw	15
  1786  001E1E  6EC1               	movwf	4033,c	;volatile
  1787                           
  1788                           ;machineConfig.c: 45: CVRCON = 0x00;
  1789  001E20  0E00               	movlw	0
  1790  001E22  6EB5               	movwf	4021,c	;volatile
  1791                           
  1792                           ;machineConfig.c: 46: CMCONbits.CIS = 0;
  1793  001E24  96B4               	bcf	4020,3,c	;volatile
  1794                           
  1795                           ;machineConfig.c: 47: ADCON2 = 0b10110001;
  1796  001E26  0EB1               	movlw	177
  1797  001E28  6EC0               	movwf	4032,c	;volatile
  1798                           
  1799                           ;machineConfig.c: 50: INT1IE = 0;
  1800  001E2A  96F0               	bcf	intcon3,3,c	;volatile
  1801                           
  1802                           ;machineConfig.c: 51: PEIE = 1;
  1803  001E2C  8CF2               	bsf	intcon,6,c	;volatile
  1804                           
  1805                           ;machineConfig.c: 52: (INTCONbits.GIE = 0);
  1806  001E2E  9EF2               	bcf	intcon,7,c	;volatile
  1807  001E30  0012               	return		;funcret
  1808  001E32                     __end_of_machineConfig:
  1809                           	opt stack 0
  1810                           tblptru	equ	0xFF8
  1811                           tblptrh	equ	0xFF7
  1812                           tblptrl	equ	0xFF6
  1813                           tablat	equ	0xFF5
  1814                           prodh	equ	0xFF4
  1815                           prodl	equ	0xFF3
  1816                           intcon	equ	0xFF2
  1817                           intcon2	equ	0xFF1
  1818                           intcon3	equ	0xFF0
  1819                           wreg	equ	0xFE8
  1820                           status	equ	0xFD8
  1821                           
  1822 ;; *************** function _initGLCD *****************
  1823 ;; Defined at:
  1824 ;;		line 272 in file "../../src/GLCD/GLCD_PIC_V1.1.c"
  1825 ;; Parameters:    Size  Location     Type
  1826 ;;		None
  1827 ;; Auto vars:     Size  Location     Type
  1828 ;;		None
  1829 ;; Return value:  Size  Location     Type
  1830 ;;                  1    wreg      void 
  1831 ;; Registers used:
  1832 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1833 ;; Tracked objects:
  1834 ;;		On entry : 0/0
  1835 ;;		On exit  : 0/0
  1836 ;;		Unchanged: 0/0
  1837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1839 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1840 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1841 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1842 ;;Total ram usage:        2 bytes
  1843 ;; Hardware stack levels used:    1
  1844 ;; Hardware stack levels required when called:    4
  1845 ;; This function calls:
  1846 ;;		_glcdDrawRectangle
  1847 ;;		_glcdSetCOLMOD
  1848 ;;		_glcdTransfer
  1849 ;;		_spiInit
  1850 ;; This function is called by:
  1851 ;;		_main
  1852 ;; This function uses a non-reentrant model
  1853 ;;
  1854                           
  1855                           	psect	text2
  1856  001754                     __ptext2:
  1857                           	opt stack 0
  1858  001754                     _initGLCD:
  1859                           	opt stack 26
  1860                           
  1861                           ;GLCD_PIC_V1.1.c: 285: LATDbits.LATD0 = 1;
  1862                           
  1863                           ;incstack = 0
  1864  001754  808C               	bsf	3980,0,c	;volatile
  1865                           
  1866                           ;GLCD_PIC_V1.1.c: 286: LATDbits.LATD1 = 1;
  1867  001756  828C               	bsf	3980,1,c	;volatile
  1868                           
  1869                           ;GLCD_PIC_V1.1.c: 287: TRISDbits.TRISD0 = 0;
  1870  001758  9095               	bcf	3989,0,c	;volatile
  1871                           
  1872                           ;GLCD_PIC_V1.1.c: 288: TRISDbits.TRISD1 = 0;
  1873  00175A  9295               	bcf	3989,1,c	;volatile
  1874                           
  1875                           ;GLCD_PIC_V1.1.c: 291: spiInit(4);
  1876  00175C  0E04               	movlw	4
  1877  00175E  EC19  F00F         	call	_spiInit
  1878                           
  1879                           ;GLCD_PIC_V1.1.c: 295: _delay((unsigned long)((20)*(40000000/4000.0)));
  1880  001762  0E02               	movlw	2
  1881  001764  6E1B               	movwf	(??_initGLCD+1)& (0+255),c
  1882  001766  0E04               	movlw	4
  1883  001768  6E1A               	movwf	??_initGLCD& (0+255),c
  1884  00176A  0EBA               	movlw	186
  1885  00176C                     u997:
  1886  00176C  2EE8               	decfsz	wreg,f,c
  1887  00176E  D7FE               	bra	u997
  1888  001770  2E1A               	decfsz	??_initGLCD& (0+255),f,c
  1889  001772  D7FC               	bra	u997
  1890  001774  2E1B               	decfsz	(??_initGLCD+1)& (0+255),f,c
  1891  001776  D7FA               	bra	u997
  1892  001778  D000               	nop2	
  1893                           
  1894                           ;GLCD_PIC_V1.1.c: 298: { glcdTransfer(INST_SWRESET, 1); _delay((unsigned long)((130)*(40
      +                          000000/4000.0))); };
  1895  00177A  0E01               	movlw	1
  1896  00177C  6E04               	movwf	glcdTransfer@cmd,c
  1897  00177E  0E45               	movlw	low _INST_SWRESET
  1898  001780  6EF6               	movwf	tblptrl,c
  1899  001782                     	if	1	;There is more than 1 active tblptr byte
  1900  001782  0E10               	movlw	high _INST_SWRESET
  1901  001784  6EF7               	movwf	tblptrh,c
  1902  001786                     	endif
  1903  001786                     	if	0	;There are less than 3 active tblptr bytes
  1904  001786                     	endif
  1905  001786  0008               	tblrd		*
  1906  001788  50F5               	movf	tablat,w,c
  1907  00178A  EC35  F00F         	call	_glcdTransfer
  1908  00178E  0E07               	movlw	7
  1909  001790  6E1B               	movwf	(??_initGLCD+1)& (0+255),c
  1910  001792  0E99               	movlw	153
  1911  001794  6E1A               	movwf	??_initGLCD& (0+255),c
  1912  001796  0E49               	movlw	73
  1913  001798                     u1007:
  1914  001798  2EE8               	decfsz	wreg,f,c
  1915  00179A  D7FE               	bra	u1007
  1916  00179C  2E1A               	decfsz	??_initGLCD& (0+255),f,c
  1917  00179E  D7FC               	bra	u1007
  1918  0017A0  2E1B               	decfsz	(??_initGLCD+1)& (0+255),f,c
  1919  0017A2  D7FA               	bra	u1007
  1920  0017A4  F000               	nop	
  1921                           
  1922                           ;GLCD_PIC_V1.1.c: 300: { glcdTransfer(INST_SLPOUT, 1); _delay((unsigned long)((130)*(400
      +                          00000/4000.0))); };
  1923  0017A6  0E01               	movlw	1
  1924  0017A8  6E04               	movwf	glcdTransfer@cmd,c
  1925  0017AA  0E43               	movlw	low _INST_SLPOUT
  1926  0017AC  6EF6               	movwf	tblptrl,c
  1927  0017AE                     	if	1	;There is more than 1 active tblptr byte
  1928  0017AE  0E10               	movlw	high _INST_SLPOUT
  1929  0017B0  6EF7               	movwf	tblptrh,c
  1930  0017B2                     	endif
  1931  0017B2                     	if	0	;There are less than 3 active tblptr bytes
  1932  0017B2                     	endif
  1933  0017B2  0008               	tblrd		*
  1934  0017B4  50F5               	movf	tablat,w,c
  1935  0017B6  EC35  F00F         	call	_glcdTransfer
  1936  0017BA  0E07               	movlw	7
  1937  0017BC  6E1B               	movwf	(??_initGLCD+1)& (0+255),c
  1938  0017BE  0E99               	movlw	153
  1939  0017C0  6E1A               	movwf	??_initGLCD& (0+255),c
  1940  0017C2  0E49               	movlw	73
  1941  0017C4                     u1017:
  1942  0017C4  2EE8               	decfsz	wreg,f,c
  1943  0017C6  D7FE               	bra	u1017
  1944  0017C8  2E1A               	decfsz	??_initGLCD& (0+255),f,c
  1945  0017CA  D7FC               	bra	u1017
  1946  0017CC  2E1B               	decfsz	(??_initGLCD+1)& (0+255),f,c
  1947  0017CE  D7FA               	bra	u1017
  1948  0017D0  F000               	nop	
  1949                           
  1950                           ;GLCD_PIC_V1.1.c: 303: glcdTransfer(INST_FRMCTR1, 1);
  1951  0017D2  0E01               	movlw	1
  1952  0017D4  6E04               	movwf	glcdTransfer@cmd,c
  1953  0017D6  0E33               	movlw	low _INST_FRMCTR1
  1954  0017D8  6EF6               	movwf	tblptrl,c
  1955  0017DA                     	if	1	;There is more than 1 active tblptr byte
  1956  0017DA  0E10               	movlw	high _INST_FRMCTR1
  1957  0017DC  6EF7               	movwf	tblptrh,c
  1958  0017DE                     	endif
  1959  0017DE                     	if	0	;There are less than 3 active tblptr bytes
  1960  0017DE                     	endif
  1961  0017DE  0008               	tblrd		*
  1962  0017E0  50F5               	movf	tablat,w,c
  1963  0017E2  EC35  F00F         	call	_glcdTransfer
  1964                           
  1965                           ;GLCD_PIC_V1.1.c: 304: glcdTransfer(0x00, 0);
  1966  0017E6  0E00               	movlw	0
  1967  0017E8  6E04               	movwf	glcdTransfer@cmd,c
  1968  0017EA  0E00               	movlw	0
  1969  0017EC  EC35  F00F         	call	_glcdTransfer
  1970                           
  1971                           ;GLCD_PIC_V1.1.c: 305: glcdTransfer(0x06, 0);
  1972  0017F0  0E00               	movlw	0
  1973  0017F2  6E04               	movwf	glcdTransfer@cmd,c
  1974  0017F4  0E06               	movlw	6
  1975  0017F6  EC35  F00F         	call	_glcdTransfer
  1976                           
  1977                           ;GLCD_PIC_V1.1.c: 306: glcdTransfer(0x03, 0);
  1978  0017FA  0E00               	movlw	0
  1979  0017FC  6E04               	movwf	glcdTransfer@cmd,c
  1980  0017FE  0E03               	movlw	3
  1981  001800  EC35  F00F         	call	_glcdTransfer
  1982                           
  1983                           ;GLCD_PIC_V1.1.c: 308: glcdTransfer(INST_FRMCTR2, 1);
  1984  001804  0E01               	movlw	1
  1985  001806  6E04               	movwf	glcdTransfer@cmd,c
  1986  001808  0E32               	movlw	low _INST_FRMCTR2
  1987  00180A  6EF6               	movwf	tblptrl,c
  1988  00180C                     	if	1	;There is more than 1 active tblptr byte
  1989  00180C  0E10               	movlw	high _INST_FRMCTR2
  1990  00180E  6EF7               	movwf	tblptrh,c
  1991  001810                     	endif
  1992  001810                     	if	0	;There are less than 3 active tblptr bytes
  1993  001810                     	endif
  1994  001810  0008               	tblrd		*
  1995  001812  50F5               	movf	tablat,w,c
  1996  001814  EC35  F00F         	call	_glcdTransfer
  1997                           
  1998                           ;GLCD_PIC_V1.1.c: 309: glcdTransfer(0x01, 0);
  1999  001818  0E00               	movlw	0
  2000  00181A  6E04               	movwf	glcdTransfer@cmd,c
  2001  00181C  0E01               	movlw	1
  2002  00181E  EC35  F00F         	call	_glcdTransfer
  2003                           
  2004                           ;GLCD_PIC_V1.1.c: 310: glcdTransfer(0x2C, 0);
  2005  001822  0E00               	movlw	0
  2006  001824  6E04               	movwf	glcdTransfer@cmd,c
  2007  001826  0E2C               	movlw	44
  2008  001828  EC35  F00F         	call	_glcdTransfer
  2009                           
  2010                           ;GLCD_PIC_V1.1.c: 311: glcdTransfer(0x2D, 0);
  2011  00182C  0E00               	movlw	0
  2012  00182E  6E04               	movwf	glcdTransfer@cmd,c
  2013  001830  0E2D               	movlw	45
  2014  001832  EC35  F00F         	call	_glcdTransfer
  2015                           
  2016                           ;GLCD_PIC_V1.1.c: 313: glcdTransfer(INST_FRMCTR3, 1);
  2017  001836  0E01               	movlw	1
  2018  001838  6E04               	movwf	glcdTransfer@cmd,c
  2019  00183A  0E31               	movlw	low _INST_FRMCTR3
  2020  00183C  6EF6               	movwf	tblptrl,c
  2021  00183E                     	if	1	;There is more than 1 active tblptr byte
  2022  00183E  0E10               	movlw	high _INST_FRMCTR3
  2023  001840  6EF7               	movwf	tblptrh,c
  2024  001842                     	endif
  2025  001842                     	if	0	;There are less than 3 active tblptr bytes
  2026  001842                     	endif
  2027  001842  0008               	tblrd		*
  2028  001844  50F5               	movf	tablat,w,c
  2029  001846  EC35  F00F         	call	_glcdTransfer
  2030                           
  2031                           ;GLCD_PIC_V1.1.c: 314: glcdTransfer(0x01, 0);
  2032  00184A  0E00               	movlw	0
  2033  00184C  6E04               	movwf	glcdTransfer@cmd,c
  2034  00184E  0E01               	movlw	1
  2035  001850  EC35  F00F         	call	_glcdTransfer
  2036                           
  2037                           ;GLCD_PIC_V1.1.c: 315: glcdTransfer(0x2C, 0);
  2038  001854  0E00               	movlw	0
  2039  001856  6E04               	movwf	glcdTransfer@cmd,c
  2040  001858  0E2C               	movlw	44
  2041  00185A  EC35  F00F         	call	_glcdTransfer
  2042                           
  2043                           ;GLCD_PIC_V1.1.c: 316: glcdTransfer(0x2D, 0);
  2044  00185E  0E00               	movlw	0
  2045  001860  6E04               	movwf	glcdTransfer@cmd,c
  2046  001862  0E2D               	movlw	45
  2047  001864  EC35  F00F         	call	_glcdTransfer
  2048                           
  2049                           ;GLCD_PIC_V1.1.c: 318: glcdTransfer(INST_INVCTR, 1);
  2050  001868  0E01               	movlw	1
  2051  00186A  6E04               	movwf	glcdTransfer@cmd,c
  2052  00186C  0E30               	movlw	low _INST_INVCTR
  2053  00186E  6EF6               	movwf	tblptrl,c
  2054  001870                     	if	1	;There is more than 1 active tblptr byte
  2055  001870  0E10               	movlw	high _INST_INVCTR
  2056  001872  6EF7               	movwf	tblptrh,c
  2057  001874                     	endif
  2058  001874                     	if	0	;There are less than 3 active tblptr bytes
  2059  001874                     	endif
  2060  001874  0008               	tblrd		*
  2061  001876  50F5               	movf	tablat,w,c
  2062  001878  EC35  F00F         	call	_glcdTransfer
  2063                           
  2064                           ;GLCD_PIC_V1.1.c: 319: glcdTransfer(0x00, 0);
  2065  00187C  0E00               	movlw	0
  2066  00187E  6E04               	movwf	glcdTransfer@cmd,c
  2067  001880  0E00               	movlw	0
  2068  001882  EC35  F00F         	call	_glcdTransfer
  2069                           
  2070                           ;GLCD_PIC_V1.1.c: 322: glcdTransfer(INST_PWCTR1, 1);
  2071  001886  0E01               	movlw	1
  2072  001888  6E04               	movwf	glcdTransfer@cmd,c
  2073  00188A  0E2F               	movlw	low _INST_PWCTR1
  2074  00188C  6EF6               	movwf	tblptrl,c
  2075  00188E                     	if	1	;There is more than 1 active tblptr byte
  2076  00188E  0E10               	movlw	high _INST_PWCTR1
  2077  001890  6EF7               	movwf	tblptrh,c
  2078  001892                     	endif
  2079  001892                     	if	0	;There are less than 3 active tblptr bytes
  2080  001892                     	endif
  2081  001892  0008               	tblrd		*
  2082  001894  50F5               	movf	tablat,w,c
  2083  001896  EC35  F00F         	call	_glcdTransfer
  2084                           
  2085                           ;GLCD_PIC_V1.1.c: 323: glcdTransfer(0xA2, 0);
  2086  00189A  0E00               	movlw	0
  2087  00189C  6E04               	movwf	glcdTransfer@cmd,c
  2088  00189E  0EA2               	movlw	162
  2089  0018A0  EC35  F00F         	call	_glcdTransfer
  2090                           
  2091                           ;GLCD_PIC_V1.1.c: 324: glcdTransfer(0x02, 0);
  2092  0018A4  0E00               	movlw	0
  2093  0018A6  6E04               	movwf	glcdTransfer@cmd,c
  2094  0018A8  0E02               	movlw	2
  2095  0018AA  EC35  F00F         	call	_glcdTransfer
  2096                           
  2097                           ;GLCD_PIC_V1.1.c: 325: glcdTransfer(0x84, 0);
  2098  0018AE  0E00               	movlw	0
  2099  0018B0  6E04               	movwf	glcdTransfer@cmd,c
  2100  0018B2  0E84               	movlw	132
  2101  0018B4  EC35  F00F         	call	_glcdTransfer
  2102                           
  2103                           ;GLCD_PIC_V1.1.c: 327: glcdTransfer(INST_PWCTR2, 1);
  2104  0018B8  0E01               	movlw	1
  2105  0018BA  6E04               	movwf	glcdTransfer@cmd,c
  2106  0018BC  0E2E               	movlw	low _INST_PWCTR2
  2107  0018BE  6EF6               	movwf	tblptrl,c
  2108  0018C0                     	if	1	;There is more than 1 active tblptr byte
  2109  0018C0  0E10               	movlw	high _INST_PWCTR2
  2110  0018C2  6EF7               	movwf	tblptrh,c
  2111  0018C4                     	endif
  2112  0018C4                     	if	0	;There are less than 3 active tblptr bytes
  2113  0018C4                     	endif
  2114  0018C4  0008               	tblrd		*
  2115  0018C6  50F5               	movf	tablat,w,c
  2116  0018C8  EC35  F00F         	call	_glcdTransfer
  2117                           
  2118                           ;GLCD_PIC_V1.1.c: 328: glcdTransfer(0xC5, 0);
  2119  0018CC  0E00               	movlw	0
  2120  0018CE  6E04               	movwf	glcdTransfer@cmd,c
  2121  0018D0  0EC5               	movlw	197
  2122  0018D2  EC35  F00F         	call	_glcdTransfer
  2123                           
  2124                           ;GLCD_PIC_V1.1.c: 330: glcdTransfer(INST_PWCTR3, 1);
  2125  0018D6  0E01               	movlw	1
  2126  0018D8  6E04               	movwf	glcdTransfer@cmd,c
  2127  0018DA  0E2D               	movlw	low _INST_PWCTR3
  2128  0018DC  6EF6               	movwf	tblptrl,c
  2129  0018DE                     	if	1	;There is more than 1 active tblptr byte
  2130  0018DE  0E10               	movlw	high _INST_PWCTR3
  2131  0018E0  6EF7               	movwf	tblptrh,c
  2132  0018E2                     	endif
  2133  0018E2                     	if	0	;There are less than 3 active tblptr bytes
  2134  0018E2                     	endif
  2135  0018E2  0008               	tblrd		*
  2136  0018E4  50F5               	movf	tablat,w,c
  2137  0018E6  EC35  F00F         	call	_glcdTransfer
  2138                           
  2139                           ;GLCD_PIC_V1.1.c: 331: glcdTransfer(0x0A, 0);
  2140  0018EA  0E00               	movlw	0
  2141  0018EC  6E04               	movwf	glcdTransfer@cmd,c
  2142  0018EE  0E0A               	movlw	10
  2143  0018F0  EC35  F00F         	call	_glcdTransfer
  2144                           
  2145                           ;GLCD_PIC_V1.1.c: 332: glcdTransfer(0x00, 0);
  2146  0018F4  0E00               	movlw	0
  2147  0018F6  6E04               	movwf	glcdTransfer@cmd,c
  2148  0018F8  0E00               	movlw	0
  2149  0018FA  EC35  F00F         	call	_glcdTransfer
  2150                           
  2151                           ;GLCD_PIC_V1.1.c: 334: glcdTransfer(INST_PWCTR4, 1);
  2152  0018FE  0E01               	movlw	1
  2153  001900  6E04               	movwf	glcdTransfer@cmd,c
  2154  001902  0E2C               	movlw	low _INST_PWCTR4
  2155  001904  6EF6               	movwf	tblptrl,c
  2156  001906                     	if	1	;There is more than 1 active tblptr byte
  2157  001906  0E10               	movlw	high _INST_PWCTR4
  2158  001908  6EF7               	movwf	tblptrh,c
  2159  00190A                     	endif
  2160  00190A                     	if	0	;There are less than 3 active tblptr bytes
  2161  00190A                     	endif
  2162  00190A  0008               	tblrd		*
  2163  00190C  50F5               	movf	tablat,w,c
  2164  00190E  EC35  F00F         	call	_glcdTransfer
  2165                           
  2166                           ;GLCD_PIC_V1.1.c: 335: glcdTransfer(0x8A, 0);
  2167  001912  0E00               	movlw	0
  2168  001914  6E04               	movwf	glcdTransfer@cmd,c
  2169  001916  0E8A               	movlw	138
  2170  001918  EC35  F00F         	call	_glcdTransfer
  2171                           
  2172                           ;GLCD_PIC_V1.1.c: 336: glcdTransfer(0x2A, 0);
  2173  00191C  0E00               	movlw	0
  2174  00191E  6E04               	movwf	glcdTransfer@cmd,c
  2175  001920  0E2A               	movlw	42
  2176  001922  EC35  F00F         	call	_glcdTransfer
  2177                           
  2178                           ;GLCD_PIC_V1.1.c: 338: glcdTransfer(INST_PWCTR5, 1);
  2179  001926  0E01               	movlw	1
  2180  001928  6E04               	movwf	glcdTransfer@cmd,c
  2181  00192A  0E2B               	movlw	low _INST_PWCTR5
  2182  00192C  6EF6               	movwf	tblptrl,c
  2183  00192E                     	if	1	;There is more than 1 active tblptr byte
  2184  00192E  0E10               	movlw	high _INST_PWCTR5
  2185  001930  6EF7               	movwf	tblptrh,c
  2186  001932                     	endif
  2187  001932                     	if	0	;There are less than 3 active tblptr bytes
  2188  001932                     	endif
  2189  001932  0008               	tblrd		*
  2190  001934  50F5               	movf	tablat,w,c
  2191  001936  EC35  F00F         	call	_glcdTransfer
  2192                           
  2193                           ;GLCD_PIC_V1.1.c: 339: glcdTransfer(0x8A, 0);
  2194  00193A  0E00               	movlw	0
  2195  00193C  6E04               	movwf	glcdTransfer@cmd,c
  2196  00193E  0E8A               	movlw	138
  2197  001940  EC35  F00F         	call	_glcdTransfer
  2198                           
  2199                           ;GLCD_PIC_V1.1.c: 340: glcdTransfer(0x2A, 0);
  2200  001944  0E00               	movlw	0
  2201  001946  6E04               	movwf	glcdTransfer@cmd,c
  2202  001948  0E2A               	movlw	42
  2203  00194A  EC35  F00F         	call	_glcdTransfer
  2204                           
  2205                           ;GLCD_PIC_V1.1.c: 343: glcdTransfer(INST_VMCTR1, 1);
  2206  00194E  0E01               	movlw	1
  2207  001950  6E04               	movwf	glcdTransfer@cmd,c
  2208  001952  0E2A               	movlw	low _INST_VMCTR1
  2209  001954  6EF6               	movwf	tblptrl,c
  2210  001956                     	if	1	;There is more than 1 active tblptr byte
  2211  001956  0E10               	movlw	high _INST_VMCTR1
  2212  001958  6EF7               	movwf	tblptrh,c
  2213  00195A                     	endif
  2214  00195A                     	if	0	;There are less than 3 active tblptr bytes
  2215  00195A                     	endif
  2216  00195A  0008               	tblrd		*
  2217  00195C  50F5               	movf	tablat,w,c
  2218  00195E  EC35  F00F         	call	_glcdTransfer
  2219                           
  2220                           ;GLCD_PIC_V1.1.c: 344: glcdTransfer(0x3C, 0);
  2221  001962  0E00               	movlw	0
  2222  001964  6E04               	movwf	glcdTransfer@cmd,c
  2223  001966  0E3C               	movlw	60
  2224  001968  EC35  F00F         	call	_glcdTransfer
  2225                           
  2226                           ;GLCD_PIC_V1.1.c: 346: glcdTransfer(INST_INVOFF, 1);
  2227  00196C  0E01               	movlw	1
  2228  00196E  6E04               	movwf	glcdTransfer@cmd,c
  2229  001970  0E4B               	movlw	low _INST_INVOFF
  2230  001972  6EF6               	movwf	tblptrl,c
  2231  001974                     	if	1	;There is more than 1 active tblptr byte
  2232  001974  0E10               	movlw	high _INST_INVOFF
  2233  001976  6EF7               	movwf	tblptrh,c
  2234  001978                     	endif
  2235  001978                     	if	0	;There are less than 3 active tblptr bytes
  2236  001978                     	endif
  2237  001978  0008               	tblrd		*
  2238  00197A  50F5               	movf	tablat,w,c
  2239  00197C  EC35  F00F         	call	_glcdTransfer
  2240                           
  2241                           ;GLCD_PIC_V1.1.c: 349: glcdSetCOLMOD(18);
  2242  001980  0E12               	movlw	18
  2243  001982  ECCF  F00E         	call	_glcdSetCOLMOD
  2244                           
  2245                           ;GLCD_PIC_V1.1.c: 352: glcdTransfer(INST_GAMSET, 1);
  2246  001986  0E01               	movlw	1
  2247  001988  6E04               	movwf	glcdTransfer@cmd,c
  2248  00198A  0E40               	movlw	low _INST_GAMSET
  2249  00198C  6EF6               	movwf	tblptrl,c
  2250  00198E                     	if	1	;There is more than 1 active tblptr byte
  2251  00198E  0E10               	movlw	high _INST_GAMSET
  2252  001990  6EF7               	movwf	tblptrh,c
  2253  001992                     	endif
  2254  001992                     	if	0	;There are less than 3 active tblptr bytes
  2255  001992                     	endif
  2256  001992  0008               	tblrd		*
  2257  001994  50F5               	movf	tablat,w,c
  2258  001996  EC35  F00F         	call	_glcdTransfer
  2259                           
  2260                           ;GLCD_PIC_V1.1.c: 353: glcdTransfer(0x01, 0);
  2261  00199A  0E00               	movlw	0
  2262  00199C  6E04               	movwf	glcdTransfer@cmd,c
  2263  00199E  0E01               	movlw	1
  2264  0019A0  EC35  F00F         	call	_glcdTransfer
  2265                           
  2266                           ;GLCD_PIC_V1.1.c: 355: glcdTransfer(INST_IDMOFF, 1);
  2267  0019A4  0E01               	movlw	1
  2268  0019A6  6E04               	movwf	glcdTransfer@cmd,c
  2269  0019A8  0E36               	movlw	low _INST_IDMOFF
  2270  0019AA  6EF6               	movwf	tblptrl,c
  2271  0019AC                     	if	1	;There is more than 1 active tblptr byte
  2272  0019AC  0E10               	movlw	high _INST_IDMOFF
  2273  0019AE  6EF7               	movwf	tblptrh,c
  2274  0019B0                     	endif
  2275  0019B0                     	if	0	;There are less than 3 active tblptr bytes
  2276  0019B0                     	endif
  2277  0019B0  0008               	tblrd		*
  2278  0019B2  50F5               	movf	tablat,w,c
  2279  0019B4  EC35  F00F         	call	_glcdTransfer
  2280                           
  2281                           ;GLCD_PIC_V1.1.c: 357: glcdTransfer(INST_NORON, 1);
  2282  0019B8  0E01               	movlw	1
  2283  0019BA  6E04               	movwf	glcdTransfer@cmd,c
  2284  0019BC  0E41               	movlw	low _INST_NORON
  2285  0019BE  6EF6               	movwf	tblptrl,c
  2286  0019C0                     	if	1	;There is more than 1 active tblptr byte
  2287  0019C0  0E10               	movlw	high _INST_NORON
  2288  0019C2  6EF7               	movwf	tblptrh,c
  2289  0019C4                     	endif
  2290  0019C4                     	if	0	;There are less than 3 active tblptr bytes
  2291  0019C4                     	endif
  2292  0019C4  0008               	tblrd		*
  2293  0019C6  50F5               	movf	tablat,w,c
  2294  0019C8  EC35  F00F         	call	_glcdTransfer
  2295                           
  2296                           ;GLCD_PIC_V1.1.c: 360: MADCTLbits.MX = 1;
  2297  0019CC  8C2A               	bsf	_MADCTLbits,6,c
  2298                           
  2299                           ;GLCD_PIC_V1.1.c: 361: MADCTLbits.MY = 1;
  2300  0019CE  8E2A               	bsf	_MADCTLbits,7,c
  2301                           
  2302                           ;GLCD_PIC_V1.1.c: 362: MADCTLbits.MV = 1;
  2303  0019D0  8A2A               	bsf	_MADCTLbits,5,c
  2304                           
  2305                           ;GLCD_PIC_V1.1.c: 363: MADCTLbits.ML = 0;
  2306  0019D2  982A               	bcf	_MADCTLbits,4,c
  2307                           
  2308                           ;GLCD_PIC_V1.1.c: 364: MADCTLbits.RGB = 0;
  2309  0019D4  962A               	bcf	_MADCTLbits,3,c
  2310                           
  2311                           ;GLCD_PIC_V1.1.c: 365: MADCTLbits.MH = 0;
  2312  0019D6  942A               	bcf	_MADCTLbits,2,c
  2313                           
  2314                           ;GLCD_PIC_V1.1.c: 366: { glcdTransfer(INST_MADCTL, 1); glcdTransfer(MADCTLbits.reg, 0);}
      +                          ;
  2315  0019D8  0E01               	movlw	1
  2316  0019DA  6E04               	movwf	glcdTransfer@cmd,c
  2317  0019DC  0E37               	movlw	low _INST_MADCTL
  2318  0019DE  6EF6               	movwf	tblptrl,c
  2319  0019E0                     	if	1	;There is more than 1 active tblptr byte
  2320  0019E0  0E10               	movlw	high _INST_MADCTL
  2321  0019E2  6EF7               	movwf	tblptrh,c
  2322  0019E4                     	endif
  2323  0019E4                     	if	0	;There are less than 3 active tblptr bytes
  2324  0019E4                     	endif
  2325  0019E4  0008               	tblrd		*
  2326  0019E6  50F5               	movf	tablat,w,c
  2327  0019E8  EC35  F00F         	call	_glcdTransfer
  2328  0019EC  0E00               	movlw	0
  2329  0019EE  6E04               	movwf	glcdTransfer@cmd,c
  2330  0019F0  502A               	movf	_MADCTLbits,w,c
  2331  0019F2  EC35  F00F         	call	_glcdTransfer
  2332                           
  2333                           ;GLCD_PIC_V1.1.c: 370: glcdDrawRectangle(0, GLCD_SIZE_HORZ, 0, GLCD_SIZE_VERT, BLACK);
  2334  0019F6  0E48               	movlw	low _GLCD_SIZE_HORZ
  2335  0019F8  6EF6               	movwf	tblptrl,c
  2336  0019FA                     	if	1	;There is more than 1 active tblptr byte
  2337  0019FA  0E10               	movlw	high _GLCD_SIZE_HORZ
  2338  0019FC  6EF7               	movwf	tblptrh,c
  2339  0019FE                     	endif
  2340  0019FE                     	if	0	;There are less than 3 active tblptr bytes
  2341  0019FE                     	endif
  2342  0019FE  0008               	tblrd		*
  2343  001A00  CFF5 F007          	movff	tablat,glcdDrawRectangle@XE
  2344  001A04  0E00               	movlw	0
  2345  001A06  6E08               	movwf	glcdDrawRectangle@YS,c
  2346  001A08  0E47               	movlw	low _GLCD_SIZE_VERT
  2347  001A0A  6EF6               	movwf	tblptrl,c
  2348  001A0C                     	if	1	;There is more than 1 active tblptr byte
  2349  001A0C  0E10               	movlw	high _GLCD_SIZE_VERT
  2350  001A0E  6EF7               	movwf	tblptrh,c
  2351  001A10                     	endif
  2352  001A10                     	if	0	;There are less than 3 active tblptr bytes
  2353  001A10                     	endif
  2354  001A10  0008               	tblrd		*
  2355  001A12  CFF5 F009          	movff	tablat,glcdDrawRectangle@YE
  2356  001A16  0E25               	movlw	low _BLACK
  2357  001A18  6EF6               	movwf	tblptrl,c
  2358  001A1A                     	if	1	;There is more than 1 active tblptr byte
  2359  001A1A  0E10               	movlw	high _BLACK
  2360  001A1C  6EF7               	movwf	tblptrh,c
  2361  001A1E                     	endif
  2362  001A1E                     	if	0	;There are less than 3 active tblptr bytes
  2363  001A1E                     	endif
  2364  001A1E  0009               	tblrd		*+
  2365  001A20  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
  2366  001A24  0009               	tblrd		*+
  2367  001A26  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
  2368  001A2A  0009               	tblrd		*+
  2369  001A2C  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
  2370  001A30  000A               	tblrd		*-
  2371  001A32  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
  2372  001A36  0E00               	movlw	0
  2373  001A38  EC30  F00D         	call	_glcdDrawRectangle
  2374                           
  2375                           ;GLCD_PIC_V1.1.c: 372: glcdTransfer(INST_DISPON, 1);
  2376  001A3C  0E01               	movlw	1
  2377  001A3E  6E04               	movwf	glcdTransfer@cmd,c
  2378  001A40  0E3E               	movlw	low _INST_DISPON
  2379  001A42  6EF6               	movwf	tblptrl,c
  2380  001A44                     	if	1	;There is more than 1 active tblptr byte
  2381  001A44  0E10               	movlw	high _INST_DISPON
  2382  001A46  6EF7               	movwf	tblptrh,c
  2383  001A48                     	endif
  2384  001A48                     	if	0	;There are less than 3 active tblptr bytes
  2385  001A48                     	endif
  2386  001A48  0008               	tblrd		*
  2387  001A4A  50F5               	movf	tablat,w,c
  2388  001A4C  EC35  F00F         	call	_glcdTransfer
  2389                           
  2390                           ;GLCD_PIC_V1.1.c: 373: _delay((unsigned long)((10)*(40000000/4000.0)));
  2391  001A50  0E82               	movlw	130
  2392  001A52  6E1A               	movwf	??_initGLCD& (0+255),c
  2393  001A54  0EDE               	movlw	222
  2394  001A56                     u1027:
  2395  001A56  2EE8               	decfsz	wreg,f,c
  2396  001A58  D7FE               	bra	u1027
  2397  001A5A  2E1A               	decfsz	??_initGLCD& (0+255),f,c
  2398  001A5C  D7FC               	bra	u1027
  2399  001A5E  0012               	return		;funcret
  2400  001A60                     __end_of_initGLCD:
  2401                           	opt stack 0
  2402                           tblptru	equ	0xFF8
  2403                           tblptrh	equ	0xFF7
  2404                           tblptrl	equ	0xFF6
  2405                           tablat	equ	0xFF5
  2406                           prodh	equ	0xFF4
  2407                           prodl	equ	0xFF3
  2408                           intcon	equ	0xFF2
  2409                           intcon2	equ	0xFF1
  2410                           intcon3	equ	0xFF0
  2411                           wreg	equ	0xFE8
  2412                           status	equ	0xFD8
  2413                           
  2414 ;; *************** function _spiInit *****************
  2415 ;; Defined at:
  2416 ;;		line 54 in file "../../src/SPI/SPI_PIC.c"
  2417 ;; Parameters:    Size  Location     Type
  2418 ;;  divider         1    wreg     unsigned char 
  2419 ;; Auto vars:     Size  Location     Type
  2420 ;;  divider         1    0[COMRAM] unsigned char 
  2421 ;; Return value:  Size  Location     Type
  2422 ;;                  1    wreg      void 
  2423 ;; Registers used:
  2424 ;;		wreg, status,2, status,0
  2425 ;; Tracked objects:
  2426 ;;		On entry : 0/0
  2427 ;;		On exit  : 0/0
  2428 ;;		Unchanged: 0/0
  2429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2431 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2433 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2434 ;;Total ram usage:        1 bytes
  2435 ;; Hardware stack levels used:    1
  2436 ;; This function calls:
  2437 ;;		Nothing
  2438 ;; This function is called by:
  2439 ;;		_initGLCD
  2440 ;; This function uses a non-reentrant model
  2441 ;;
  2442                           
  2443                           	psect	text3
  2444  001E32                     __ptext3:
  2445                           	opt stack 0
  2446  001E32                     _spiInit:
  2447                           	opt stack 29
  2448                           
  2449                           ;incstack = 0
  2450                           ;spiInit@divider stored from wreg
  2451  001E32  6E01               	movwf	spiInit@divider,c
  2452                           
  2453                           ;SPI_PIC.c: 65: SSPCON1bits.SSPEN = 0;
  2454  001E34  9AC6               	bcf	4038,5,c	;volatile
  2455                           
  2456                           ;SPI_PIC.c: 66: SSPSTAT = 0x00;
  2457  001E36  0E00               	movlw	0
  2458  001E38  6EC7               	movwf	4039,c	;volatile
  2459                           
  2460                           ;SPI_PIC.c: 71: switch(divider){
  2461  001E3A  D007               	goto	l1500
  2462  001E3C                     l1494:
  2463                           
  2464                           ;SPI_PIC.c: 76: SSPCON1 = 0b00010001;
  2465  001E3C  0E11               	movlw	17
  2466  001E3E  D003               	goto	L3
  2467  001E40                     l1496:
  2468                           
  2469                           ;SPI_PIC.c: 79: SSPCON1 = 0b00010010;
  2470  001E40  0E12               	movlw	18
  2471  001E42  D001               	goto	L3
  2472  001E44                     l1498:
  2473                           
  2474                           ;SPI_PIC.c: 82: SSPCON1 = 0b00010000;
  2475  001E44  0E10               	movlw	16
  2476  001E46                     L3:
  2477  001E46  6EC6               	movwf	4038,c	;volatile
  2478                           
  2479                           ;SPI_PIC.c: 83: }
  2480  001E48  D00B               	goto	l72
  2481  001E4A                     l1500:
  2482  001E4A  5001               	movf	spiInit@divider,w,c
  2483                           
  2484                           ; Switch size 1, requested type "space"
  2485                           ; Number of cases is 3, Range of values is 4 to 64
  2486                           ; switch strategies available:
  2487                           ; Name         Instructions Cycles
  2488                           ; simple_byte           10     6 (average)
  2489                           ;	Chosen strategy is simple_byte
  2490  001E4C  0A04               	xorlw	4	; case 4
  2491  001E4E  B4D8               	btfsc	status,2,c
  2492  001E50  D7F9               	goto	l1498
  2493  001E52  0A14               	xorlw	20	; case 16
  2494  001E54  B4D8               	btfsc	status,2,c
  2495  001E56  D7F2               	goto	l1494
  2496  001E58  0A50               	xorlw	80	; case 64
  2497  001E5A  B4D8               	btfsc	status,2,c
  2498  001E5C  D7F1               	goto	l1496
  2499  001E5E  D7F2               	goto	l1498
  2500  001E60                     l72:
  2501                           
  2502                           ;SPI_PIC.c: 86: TRISCbits.TRISC5 = 0;
  2503  001E60  9A94               	bcf	3988,5,c	;volatile
  2504                           
  2505                           ;SPI_PIC.c: 87: TRISCbits.TRISC4 = 1;
  2506  001E62  8894               	bsf	3988,4,c	;volatile
  2507                           
  2508                           ;SPI_PIC.c: 88: TRISCbits.TRISC3 = 0;
  2509  001E64  9694               	bcf	3988,3,c	;volatile
  2510                           
  2511                           ;SPI_PIC.c: 91: SSPCON1bits.SSPEN = 1;
  2512  001E66  8AC6               	bsf	4038,5,c	;volatile
  2513  001E68  0012               	return		;funcret
  2514  001E6A                     __end_of_spiInit:
  2515                           	opt stack 0
  2516                           tblptru	equ	0xFF8
  2517                           tblptrh	equ	0xFF7
  2518                           tblptrl	equ	0xFF6
  2519                           tablat	equ	0xFF5
  2520                           prodh	equ	0xFF4
  2521                           prodl	equ	0xFF3
  2522                           intcon	equ	0xFF2
  2523                           intcon2	equ	0xFF1
  2524                           intcon3	equ	0xFF0
  2525                           wreg	equ	0xFE8
  2526                           status	equ	0xFD8
  2527                           
  2528 ;; *************** function _glcdSetCOLMOD *****************
  2529 ;; Defined at:
  2530 ;;		line 201 in file "../../src/GLCD/GLCD_PIC_V1.1.c"
  2531 ;; Parameters:    Size  Location     Type
  2532 ;;  numBitsPerPi    1    wreg     unsigned char 
  2533 ;; Auto vars:     Size  Location     Type
  2534 ;;  numBitsPerPi    1    6[COMRAM] unsigned char 
  2535 ;;  rawData         2    7[COMRAM] unsigned short 
  2536 ;; Return value:  Size  Location     Type
  2537 ;;                  1    wreg      void 
  2538 ;; Registers used:
  2539 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2540 ;; Tracked objects:
  2541 ;;		On entry : 0/0
  2542 ;;		On exit  : 0/0
  2543 ;;		Unchanged: 0/0
  2544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2546 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2548 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2549 ;;Total ram usage:        3 bytes
  2550 ;; Hardware stack levels used:    1
  2551 ;; Hardware stack levels required when called:    3
  2552 ;; This function calls:
  2553 ;;		_glcdTransfer
  2554 ;; This function is called by:
  2555 ;;		_initGLCD
  2556 ;; This function uses a non-reentrant model
  2557 ;;
  2558                           
  2559                           	psect	text4
  2560  001D9E                     __ptext4:
  2561                           	opt stack 0
  2562  001D9E                     _glcdSetCOLMOD:
  2563                           	opt stack 26
  2564                           
  2565                           ;incstack = 0
  2566                           ;glcdSetCOLMOD@numBitsPerPixel stored from wreg
  2567  001D9E  6E07               	movwf	glcdSetCOLMOD@numBitsPerPixel,c
  2568                           
  2569                           ;GLCD_PIC_V1.1.c: 210: unsigned short rawData;
  2570                           ;GLCD_PIC_V1.1.c: 211: switch(numBitsPerPixel){
  2571  001DA0  D00D               	goto	l1582
  2572  001DA2                     l1572:
  2573                           
  2574                           ;GLCD_PIC_V1.1.c: 213: rawData = 0b00000011;
  2575  001DA2  0E00               	movlw	0
  2576  001DA4  6E09               	movwf	glcdSetCOLMOD@rawData+1,c
  2577  001DA6  0E03               	movlw	3
  2578  001DA8  D003               	goto	L5
  2579  001DAA                     l1574:
  2580                           
  2581                           ;GLCD_PIC_V1.1.c: 216: rawData = 0b00000101;
  2582  001DAA  0E00               	movlw	0
  2583  001DAC  6E09               	movwf	glcdSetCOLMOD@rawData+1,c
  2584  001DAE  0E05               	movlw	5
  2585  001DB0                     L5:
  2586  001DB0  6E08               	movwf	glcdSetCOLMOD@rawData,c
  2587                           
  2588                           ;GLCD_PIC_V1.1.c: 220: break;
  2589  001DB2  D00D               	goto	l1584
  2590  001DB4                     l1578:
  2591                           
  2592                           ;GLCD_PIC_V1.1.c: 222: rawData = 0b00000110;
  2593  001DB4  0E00               	movlw	0
  2594  001DB6  6E09               	movwf	glcdSetCOLMOD@rawData+1,c
  2595  001DB8  0E06               	movlw	6
  2596  001DBA  D7FA               	goto	L5
  2597  001DBC                     l1582:
  2598  001DBC  5007               	movf	glcdSetCOLMOD@numBitsPerPixel,w,c
  2599                           
  2600                           ; Switch size 1, requested type "space"
  2601                           ; Number of cases is 3, Range of values is 12 to 18
  2602                           ; switch strategies available:
  2603                           ; Name         Instructions Cycles
  2604                           ; simple_byte           10     6 (average)
  2605                           ;	Chosen strategy is simple_byte
  2606  001DBE  0A0C               	xorlw	12	; case 12
  2607  001DC0  B4D8               	btfsc	status,2,c
  2608  001DC2  D7EF               	goto	l1572
  2609  001DC4  0A1C               	xorlw	28	; case 16
  2610  001DC6  B4D8               	btfsc	status,2,c
  2611  001DC8  D7F0               	goto	l1574
  2612  001DCA  0A02               	xorlw	2	; case 18
  2613  001DCC  D7F3               	goto	l1578
  2614  001DCE                     l1584:
  2615                           
  2616                           ;GLCD_PIC_V1.1.c: 225: glcdTransfer(INST_COLMOD, 1);
  2617  001DCE  0E01               	movlw	1
  2618  001DD0  6E04               	movwf	glcdTransfer@cmd,c
  2619  001DD2  0E34               	movlw	low _INST_COLMOD
  2620  001DD4  6EF6               	movwf	tblptrl,c
  2621  001DD6                     	if	1	;There is more than 1 active tblptr byte
  2622  001DD6  0E10               	movlw	high _INST_COLMOD
  2623  001DD8  6EF7               	movwf	tblptrh,c
  2624  001DDA                     	endif
  2625  001DDA                     	if	0	;There are less than 3 active tblptr bytes
  2626  001DDA                     	endif
  2627  001DDA  0008               	tblrd		*
  2628  001DDC  50F5               	movf	tablat,w,c
  2629  001DDE  EC35  F00F         	call	_glcdTransfer
  2630                           
  2631                           ;GLCD_PIC_V1.1.c: 226: glcdTransfer(rawData, 0);
  2632  001DE2  0E00               	movlw	0
  2633  001DE4  6E04               	movwf	glcdTransfer@cmd,c
  2634  001DE6  5008               	movf	glcdSetCOLMOD@rawData,w,c
  2635  001DE8  EC35  F00F         	call	_glcdTransfer
  2636  001DEC  0012               	return		;funcret
  2637  001DEE                     __end_of_glcdSetCOLMOD:
  2638                           	opt stack 0
  2639                           tblptru	equ	0xFF8
  2640                           tblptrh	equ	0xFF7
  2641                           tblptrl	equ	0xFF6
  2642                           tablat	equ	0xFF5
  2643                           prodh	equ	0xFF4
  2644                           prodl	equ	0xFF3
  2645                           intcon	equ	0xFF2
  2646                           intcon2	equ	0xFF1
  2647                           intcon3	equ	0xFF0
  2648                           wreg	equ	0xFE8
  2649                           status	equ	0xFD8
  2650                           
  2651 ;; *************** function _glcdSetOrigin *****************
  2652 ;; Defined at:
  2653 ;;		line 229 in file "../../src/GLCD/GLCD_PIC_V1.1.c"
  2654 ;; Parameters:    Size  Location     Type
  2655 ;;  corner          1    wreg     unsigned char 
  2656 ;; Auto vars:     Size  Location     Type
  2657 ;;  corner          1    6[COMRAM] unsigned char 
  2658 ;; Return value:  Size  Location     Type
  2659 ;;                  1    wreg      void 
  2660 ;; Registers used:
  2661 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2662 ;; Tracked objects:
  2663 ;;		On entry : 0/0
  2664 ;;		On exit  : 0/0
  2665 ;;		Unchanged: 0/0
  2666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2668 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2670 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2671 ;;Total ram usage:        1 bytes
  2672 ;; Hardware stack levels used:    1
  2673 ;; Hardware stack levels required when called:    3
  2674 ;; This function calls:
  2675 ;;		_glcdTransfer
  2676 ;; This function is called by:
  2677 ;;		_main
  2678 ;; This function uses a non-reentrant model
  2679 ;;
  2680                           
  2681                           	psect	text5
  2682  001D42                     __ptext5:
  2683                           	opt stack 0
  2684  001D42                     _glcdSetOrigin:
  2685                           	opt stack 27
  2686                           
  2687                           ;incstack = 0
  2688                           ;glcdSetOrigin@corner stored from wreg
  2689  001D42  6E07               	movwf	glcdSetOrigin@corner,c
  2690                           
  2691                           ;GLCD_PIC_V1.1.c: 241: switch(corner){
  2692  001D44  D00E               	goto	l1722
  2693  001D46                     l297:
  2694                           
  2695                           ;GLCD_PIC_V1.1.c: 248: MADCTLbits.MY = 1;
  2696  001D46  8E2A               	bsf	_MADCTLbits,7,c
  2697                           
  2698                           ;GLCD_PIC_V1.1.c: 249: MADCTLbits.MX = 0;
  2699  001D48  9C2A               	bcf	_MADCTLbits,6,c
  2700  001D4A  D005               	goto	L7
  2701  001D4C                     l298:
  2702                           
  2703                           ;GLCD_PIC_V1.1.c: 253: MADCTLbits.MY = 0;
  2704  001D4C  9E2A               	bcf	_MADCTLbits,7,c
  2705                           
  2706                           ;GLCD_PIC_V1.1.c: 254: MADCTLbits.MX = 0;
  2707  001D4E  9C2A               	bcf	_MADCTLbits,6,c
  2708  001D50  D006               	goto	L8
  2709  001D52                     l299:
  2710                           
  2711                           ;GLCD_PIC_V1.1.c: 258: MADCTLbits.MY = 0;
  2712  001D52  9E2A               	bcf	_MADCTLbits,7,c
  2713                           
  2714                           ;GLCD_PIC_V1.1.c: 259: MADCTLbits.MX = 1;
  2715  001D54  8C2A               	bsf	_MADCTLbits,6,c
  2716  001D56                     L7:
  2717                           
  2718                           ;GLCD_PIC_V1.1.c: 260: MADCTLbits.MV = 0;
  2719  001D56  9A2A               	bcf	_MADCTLbits,5,c
  2720                           
  2721                           ;GLCD_PIC_V1.1.c: 261: break;
  2722  001D58  D012               	goto	l1724
  2723  001D5A                     l300:
  2724                           
  2725                           ;GLCD_PIC_V1.1.c: 263: MADCTLbits.MY = 1;
  2726  001D5A  8E2A               	bsf	_MADCTLbits,7,c
  2727                           
  2728                           ;GLCD_PIC_V1.1.c: 264: MADCTLbits.MX = 1;
  2729  001D5C  8C2A               	bsf	_MADCTLbits,6,c
  2730  001D5E                     L8:
  2731                           
  2732                           ;GLCD_PIC_V1.1.c: 265: MADCTLbits.MV = 1;
  2733  001D5E  8A2A               	bsf	_MADCTLbits,5,c
  2734                           
  2735                           ;GLCD_PIC_V1.1.c: 267: }
  2736                           
  2737                           ;GLCD_PIC_V1.1.c: 266: break;
  2738  001D60  D00E               	goto	l1724
  2739  001D62                     l1722:
  2740  001D62  5007               	movf	glcdSetOrigin@corner,w,c
  2741                           
  2742                           ; Switch size 1, requested type "space"
  2743                           ; Number of cases is 4, Range of values is 0 to 3
  2744                           ; switch strategies available:
  2745                           ; Name         Instructions Cycles
  2746                           ; simple_byte           13     7 (average)
  2747                           ;	Chosen strategy is simple_byte
  2748  001D64  0A00               	xorlw	0	; case 0
  2749  001D66  B4D8               	btfsc	status,2,c
  2750  001D68  D7F8               	goto	l300
  2751  001D6A  0A01               	xorlw	1	; case 1
  2752  001D6C  B4D8               	btfsc	status,2,c
  2753  001D6E  D7EB               	goto	l297
  2754  001D70  0A03               	xorlw	3	; case 2
  2755  001D72  B4D8               	btfsc	status,2,c
  2756  001D74  D7EB               	goto	l298
  2757  001D76  0A01               	xorlw	1	; case 3
  2758  001D78  B4D8               	btfsc	status,2,c
  2759  001D7A  D7EB               	goto	l299
  2760  001D7C  D7EE               	goto	l300
  2761  001D7E                     l1724:
  2762                           
  2763                           ;GLCD_PIC_V1.1.c: 269: { glcdTransfer(INST_MADCTL, 1); glcdTransfer(MADCTLbits.reg, 0);}
      +                          ;
  2764  001D7E  0E01               	movlw	1
  2765  001D80  6E04               	movwf	glcdTransfer@cmd,c
  2766  001D82  0E37               	movlw	low _INST_MADCTL
  2767  001D84  6EF6               	movwf	tblptrl,c
  2768  001D86                     	if	1	;There is more than 1 active tblptr byte
  2769  001D86  0E10               	movlw	high _INST_MADCTL
  2770  001D88  6EF7               	movwf	tblptrh,c
  2771  001D8A                     	endif
  2772  001D8A                     	if	0	;There are less than 3 active tblptr bytes
  2773  001D8A                     	endif
  2774  001D8A  0008               	tblrd		*
  2775  001D8C  50F5               	movf	tablat,w,c
  2776  001D8E  EC35  F00F         	call	_glcdTransfer
  2777  001D92  0E00               	movlw	0
  2778  001D94  6E04               	movwf	glcdTransfer@cmd,c
  2779  001D96  502A               	movf	_MADCTLbits,w,c
  2780  001D98  EC35  F00F         	call	_glcdTransfer
  2781  001D9C  0012               	return		;funcret
  2782  001D9E                     __end_of_glcdSetOrigin:
  2783                           	opt stack 0
  2784                           tblptru	equ	0xFF8
  2785                           tblptrh	equ	0xFF7
  2786                           tblptrl	equ	0xFF6
  2787                           tablat	equ	0xFF5
  2788                           prodh	equ	0xFF4
  2789                           prodl	equ	0xFF3
  2790                           intcon	equ	0xFF2
  2791                           intcon2	equ	0xFF1
  2792                           intcon3	equ	0xFF0
  2793                           wreg	equ	0xFE8
  2794                           status	equ	0xFD8
  2795                           
  2796 ;; *************** function _glcdDrawPixel *****************
  2797 ;; Defined at:
  2798 ;;		line 181 in file "../../src/GLCD/GLCD_PIC_V1.1.c"
  2799 ;; Parameters:    Size  Location     Type
  2800 ;;  XS              1    wreg     unsigned char 
  2801 ;;  YS              1   25[COMRAM] unsigned char 
  2802 ;;  color           4   26[COMRAM] unsigned long 
  2803 ;; Auto vars:     Size  Location     Type
  2804 ;;  XS              1   31[COMRAM] unsigned char 
  2805 ;; Return value:  Size  Location     Type
  2806 ;;                  1    wreg      void 
  2807 ;; Registers used:
  2808 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2809 ;; Tracked objects:
  2810 ;;		On entry : 0/0
  2811 ;;		On exit  : 0/0
  2812 ;;		Unchanged: 0/0
  2813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2814 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2815 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2816 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2817 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2818 ;;Total ram usage:        7 bytes
  2819 ;; Hardware stack levels used:    1
  2820 ;; Hardware stack levels required when called:    4
  2821 ;; This function calls:
  2822 ;;		_glcdDrawRectangle
  2823 ;; This function is called by:
  2824 ;;		_main
  2825 ;; This function uses a non-reentrant model
  2826 ;;
  2827                           
  2828                           	psect	text6
  2829  001CD4                     __ptext6:
  2830                           	opt stack 0
  2831  001CD4                     _glcdDrawPixel:
  2832                           	opt stack 26
  2833                           
  2834                           ;incstack = 0
  2835                           ;glcdDrawPixel@XS stored from wreg
  2836  001CD4  6E20               	movwf	glcdDrawPixel@XS,c
  2837                           
  2838                           ;GLCD_PIC_V1.1.c: 194: if(XS >= GLCD_SIZE_HORZ){ XS = GLCD_SIZE_HORZ - 1; }
  2839  001CD6  0E48               	movlw	low _GLCD_SIZE_HORZ
  2840  001CD8  6EF6               	movwf	tblptrl,c
  2841  001CDA                     	if	1	;There is more than 1 active tblptr byte
  2842  001CDA  0E10               	movlw	high _GLCD_SIZE_HORZ
  2843  001CDC  6EF7               	movwf	tblptrh,c
  2844  001CDE                     	endif
  2845  001CDE                     	if	0	;There are less than 3 active tblptr bytes
  2846  001CDE                     	endif
  2847  001CDE  0009               	tblrd		*+
  2848  001CE0  50F5               	movf	tablat,w,c
  2849  001CE2  5C20               	subwf	glcdDrawPixel@XS,w,c
  2850  001CE4  A0D8               	btfss	status,0,c
  2851  001CE6  D009               	goto	l280
  2852  001CE8  0E48               	movlw	low _GLCD_SIZE_HORZ
  2853  001CEA  6EF6               	movwf	tblptrl,c
  2854  001CEC                     	if	1	;There is more than 1 active tblptr byte
  2855  001CEC  0E10               	movlw	high _GLCD_SIZE_HORZ
  2856  001CEE  6EF7               	movwf	tblptrh,c
  2857  001CF0                     	endif
  2858  001CF0                     	if	0	;There are less than 3 active tblptr bytes
  2859  001CF0                     	endif
  2860  001CF0  0008               	tblrd		*
  2861  001CF2  CFF5 F01F          	movff	tablat,??_glcdDrawPixel
  2862  001CF6  041F               	decf	??_glcdDrawPixel,w,c
  2863  001CF8  6E20               	movwf	glcdDrawPixel@XS,c
  2864  001CFA                     l280:
  2865                           
  2866                           ;GLCD_PIC_V1.1.c: 195: if(YS >= GLCD_SIZE_VERT){ YS = GLCD_SIZE_HORZ - 1; }
  2867  001CFA  0E47               	movlw	low _GLCD_SIZE_VERT
  2868  001CFC  6EF6               	movwf	tblptrl,c
  2869  001CFE                     	if	1	;There is more than 1 active tblptr byte
  2870  001CFE  0E10               	movlw	high _GLCD_SIZE_VERT
  2871  001D00  6EF7               	movwf	tblptrh,c
  2872  001D02                     	endif
  2873  001D02                     	if	0	;There are less than 3 active tblptr bytes
  2874  001D02                     	endif
  2875  001D02  0009               	tblrd		*+
  2876  001D04  50F5               	movf	tablat,w,c
  2877  001D06  5C1A               	subwf	glcdDrawPixel@YS,w,c
  2878  001D08  A0D8               	btfss	status,0,c
  2879  001D0A  D009               	goto	l1716
  2880  001D0C  0E48               	movlw	low _GLCD_SIZE_HORZ
  2881  001D0E  6EF6               	movwf	tblptrl,c
  2882  001D10                     	if	1	;There is more than 1 active tblptr byte
  2883  001D10  0E10               	movlw	high _GLCD_SIZE_HORZ
  2884  001D12  6EF7               	movwf	tblptrh,c
  2885  001D14                     	endif
  2886  001D14                     	if	0	;There are less than 3 active tblptr bytes
  2887  001D14                     	endif
  2888  001D14  0008               	tblrd		*
  2889  001D16  CFF5 F01F          	movff	tablat,??_glcdDrawPixel
  2890  001D1A  041F               	decf	??_glcdDrawPixel,w,c
  2891  001D1C  6E1A               	movwf	glcdDrawPixel@YS,c
  2892  001D1E                     l1716:
  2893                           
  2894                           ;GLCD_PIC_V1.1.c: 198: glcdDrawRectangle(XS, XS, YS, YS, color);
  2895  001D1E  C020  F007         	movff	glcdDrawPixel@XS,glcdDrawRectangle@XE
  2896  001D22  C01A  F008         	movff	glcdDrawPixel@YS,glcdDrawRectangle@YS
  2897  001D26  C01A  F009         	movff	glcdDrawPixel@YS,glcdDrawRectangle@YE
  2898  001D2A  C01B  F00A         	movff	glcdDrawPixel@color,glcdDrawRectangle@color
  2899  001D2E  C01C  F00B         	movff	glcdDrawPixel@color+1,glcdDrawRectangle@color+1
  2900  001D32  C01D  F00C         	movff	glcdDrawPixel@color+2,glcdDrawRectangle@color+2
  2901  001D36  C01E  F00D         	movff	glcdDrawPixel@color+3,glcdDrawRectangle@color+3
  2902  001D3A  5020               	movf	glcdDrawPixel@XS,w,c
  2903  001D3C  EC30  F00D         	call	_glcdDrawRectangle
  2904  001D40  0012               	return		;funcret
  2905  001D42                     __end_of_glcdDrawPixel:
  2906                           	opt stack 0
  2907                           tblptru	equ	0xFF8
  2908                           tblptrh	equ	0xFF7
  2909                           tblptrl	equ	0xFF6
  2910                           tablat	equ	0xFF5
  2911                           prodh	equ	0xFF4
  2912                           prodl	equ	0xFF3
  2913                           intcon	equ	0xFF2
  2914                           intcon2	equ	0xFF1
  2915                           intcon3	equ	0xFF0
  2916                           wreg	equ	0xFE8
  2917                           status	equ	0xFD8
  2918                           
  2919 ;; *************** function _glcdDrawRectangle *****************
  2920 ;; Defined at:
  2921 ;;		line 72 in file "../../src/GLCD/GLCD_PIC_V1.1.c"
  2922 ;; Parameters:    Size  Location     Type
  2923 ;;  XS              1    wreg     unsigned char 
  2924 ;;  XE              1    6[COMRAM] unsigned char 
  2925 ;;  YS              1    7[COMRAM] unsigned char 
  2926 ;;  YE              1    8[COMRAM] unsigned char 
  2927 ;;  color           4    9[COMRAM] unsigned long 
  2928 ;; Auto vars:     Size  Location     Type
  2929 ;;  XS              1   24[COMRAM] unsigned char 
  2930 ;;  i               2   19[COMRAM] unsigned short 
  2931 ;;  colorData       3   21[COMRAM] unsigned char [3]
  2932 ;;  numLoops        2   17[COMRAM] unsigned short 
  2933 ;; Return value:  Size  Location     Type
  2934 ;;                  1    wreg      void 
  2935 ;; Registers used:
  2936 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2937 ;; Tracked objects:
  2938 ;;		On entry : 0/0
  2939 ;;		On exit  : 0/0
  2940 ;;		Unchanged: 0/0
  2941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2942 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2943 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2944 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2945 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2946 ;;Total ram usage:       19 bytes
  2947 ;; Hardware stack levels used:    1
  2948 ;; Hardware stack levels required when called:    3
  2949 ;; This function calls:
  2950 ;;		___wmul
  2951 ;;		_glcdTransfer
  2952 ;;		_spiSend
  2953 ;; This function is called by:
  2954 ;;		_main
  2955 ;;		_glcdDrawPixel
  2956 ;;		_initGLCD
  2957 ;; This function uses a non-reentrant model
  2958 ;;
  2959                           
  2960                           	psect	text7
  2961  001A60                     __ptext7:
  2962                           	opt stack 0
  2963  001A60                     _glcdDrawRectangle:
  2964                           	opt stack 26
  2965                           
  2966                           ;incstack = 0
  2967                           ;glcdDrawRectangle@XS stored from wreg
  2968  001A60  6E19               	movwf	glcdDrawRectangle@XS,c
  2969                           
  2970                           ;GLCD_PIC_V1.1.c: 92: if(MADCTLbits.MX == 1 && MADCTLbits.MV ==1){
  2971  001A62  BC2A               	btfsc	_MADCTLbits,6,c
  2972  001A64  AA2A               	btfss	_MADCTLbits,5,c
  2973  001A66  D005               	goto	l266
  2974                           
  2975                           ;GLCD_PIC_V1.1.c: 94: YS += 3;
  2976  001A68  0E03               	movlw	3
  2977  001A6A  2608               	addwf	glcdDrawRectangle@YS,f,c
  2978                           
  2979                           ;GLCD_PIC_V1.1.c: 95: YE += 3;
  2980  001A6C  0E03               	movlw	3
  2981  001A6E  2609               	addwf	glcdDrawRectangle@YE,f,c
  2982  001A70  D015               	goto	l1518
  2983  001A72                     l266:
  2984                           
  2985                           ;GLCD_PIC_V1.1.c: 99: else if(MADCTLbits.MY == 1){
  2986  001A72  AE2A               	btfss	_MADCTLbits,7,c
  2987  001A74  D008               	goto	l268
  2988                           
  2989                           ;GLCD_PIC_V1.1.c: 101: YS += 2;
  2990  001A76  0E02               	movlw	2
  2991  001A78  2608               	addwf	glcdDrawRectangle@YS,f,c
  2992                           
  2993                           ;GLCD_PIC_V1.1.c: 102: YE += 2;
  2994  001A7A  0E02               	movlw	2
  2995  001A7C  2609               	addwf	glcdDrawRectangle@YE,f,c
  2996                           
  2997                           ;GLCD_PIC_V1.1.c: 103: XS += 3;
  2998  001A7E  0E03               	movlw	3
  2999  001A80  2619               	addwf	glcdDrawRectangle@XS,f,c
  3000                           
  3001                           ;GLCD_PIC_V1.1.c: 104: XE += 3;
  3002  001A82  0E03               	movlw	3
  3003  001A84  D00E               	goto	L10
  3004  001A86                     l268:
  3005                           
  3006                           ;GLCD_PIC_V1.1.c: 106: else if(MADCTLbits.MX == 1){
  3007  001A86  AC2A               	btfss	_MADCTLbits,6,c
  3008  001A88  D007               	goto	l1516
  3009                           
  3010                           ;GLCD_PIC_V1.1.c: 108: YS += 2;
  3011  001A8A  0E02               	movlw	2
  3012  001A8C  2608               	addwf	glcdDrawRectangle@YS,f,c
  3013                           
  3014                           ;GLCD_PIC_V1.1.c: 109: YE += 2;
  3015  001A8E  0E02               	movlw	2
  3016  001A90  2609               	addwf	glcdDrawRectangle@YE,f,c
  3017                           
  3018                           ;GLCD_PIC_V1.1.c: 110: XS += 1;
  3019  001A92  2A19               	incf	glcdDrawRectangle@XS,f,c
  3020                           
  3021                           ;GLCD_PIC_V1.1.c: 111: XE += 1;
  3022  001A94  2A07               	incf	glcdDrawRectangle@XE,f,c
  3023                           
  3024                           ;GLCD_PIC_V1.1.c: 112: }
  3025  001A96  D006               	goto	l1522
  3026  001A98                     l1516:
  3027                           
  3028                           ;GLCD_PIC_V1.1.c: 113: else{
  3029                           ;GLCD_PIC_V1.1.c: 115: YS += 1;
  3030  001A98  2A08               	incf	glcdDrawRectangle@YS,f,c
  3031                           
  3032                           ;GLCD_PIC_V1.1.c: 116: YE += 1;
  3033  001A9A  2A09               	incf	glcdDrawRectangle@YE,f,c
  3034  001A9C                     l1518:
  3035                           
  3036                           ;GLCD_PIC_V1.1.c: 117: XS += 2;
  3037  001A9C  0E02               	movlw	2
  3038  001A9E  2619               	addwf	glcdDrawRectangle@XS,f,c
  3039                           
  3040                           ;GLCD_PIC_V1.1.c: 118: XE += 2;
  3041  001AA0  0E02               	movlw	2
  3042  001AA2                     L10:
  3043  001AA2  2607               	addwf	glcdDrawRectangle@XE,f,c
  3044  001AA4                     l1522:
  3045                           
  3046                           ;GLCD_PIC_V1.1.c: 119: }
  3047                           ;GLCD_PIC_V1.1.c: 123: glcdTransfer(INST_RASET, 1);
  3048  001AA4  0E01               	movlw	1
  3049  001AA6  6E04               	movwf	glcdTransfer@cmd,c
  3050  001AA8  0E3C               	movlw	low _INST_RASET
  3051  001AAA  6EF6               	movwf	tblptrl,c
  3052  001AAC                     	if	1	;There is more than 1 active tblptr byte
  3053  001AAC  0E10               	movlw	high _INST_RASET
  3054  001AAE  6EF7               	movwf	tblptrh,c
  3055  001AB0                     	endif
  3056  001AB0                     	if	0	;There are less than 3 active tblptr bytes
  3057  001AB0                     	endif
  3058  001AB0  0008               	tblrd		*
  3059  001AB2  50F5               	movf	tablat,w,c
  3060  001AB4  EC35  F00F         	call	_glcdTransfer
  3061                           
  3062                           ;GLCD_PIC_V1.1.c: 124: glcdTransfer(0x00, 0);
  3063  001AB8  0E00               	movlw	0
  3064  001ABA  6E04               	movwf	glcdTransfer@cmd,c
  3065  001ABC  0E00               	movlw	0
  3066  001ABE  EC35  F00F         	call	_glcdTransfer
  3067                           
  3068                           ;GLCD_PIC_V1.1.c: 125: glcdTransfer(XS, 0);
  3069  001AC2  0E00               	movlw	0
  3070  001AC4  6E04               	movwf	glcdTransfer@cmd,c
  3071  001AC6  5019               	movf	glcdDrawRectangle@XS,w,c
  3072  001AC8  EC35  F00F         	call	_glcdTransfer
  3073                           
  3074                           ;GLCD_PIC_V1.1.c: 126: glcdTransfer(0x00, 0);
  3075  001ACC  0E00               	movlw	0
  3076  001ACE  6E04               	movwf	glcdTransfer@cmd,c
  3077  001AD0  0E00               	movlw	0
  3078  001AD2  EC35  F00F         	call	_glcdTransfer
  3079                           
  3080                           ;GLCD_PIC_V1.1.c: 127: glcdTransfer(XE - 1, 0);
  3081  001AD6  0E00               	movlw	0
  3082  001AD8  6E04               	movwf	glcdTransfer@cmd,c
  3083  001ADA  0407               	decf	glcdDrawRectangle@XE,w,c
  3084  001ADC  EC35  F00F         	call	_glcdTransfer
  3085                           
  3086                           ;GLCD_PIC_V1.1.c: 131: glcdTransfer(INST_CASET, 1);
  3087  001AE0  0E01               	movlw	1
  3088  001AE2  6E04               	movwf	glcdTransfer@cmd,c
  3089  001AE4  0E3D               	movlw	low _INST_CASET
  3090  001AE6  6EF6               	movwf	tblptrl,c
  3091  001AE8                     	if	1	;There is more than 1 active tblptr byte
  3092  001AE8  0E10               	movlw	high _INST_CASET
  3093  001AEA  6EF7               	movwf	tblptrh,c
  3094  001AEC                     	endif
  3095  001AEC                     	if	0	;There are less than 3 active tblptr bytes
  3096  001AEC                     	endif
  3097  001AEC  0008               	tblrd		*
  3098  001AEE  50F5               	movf	tablat,w,c
  3099  001AF0  EC35  F00F         	call	_glcdTransfer
  3100                           
  3101                           ;GLCD_PIC_V1.1.c: 132: glcdTransfer(0x00, 0);
  3102  001AF4  0E00               	movlw	0
  3103  001AF6  6E04               	movwf	glcdTransfer@cmd,c
  3104  001AF8  0E00               	movlw	0
  3105  001AFA  EC35  F00F         	call	_glcdTransfer
  3106                           
  3107                           ;GLCD_PIC_V1.1.c: 133: glcdTransfer(YS, 0);
  3108  001AFE  0E00               	movlw	0
  3109  001B00  6E04               	movwf	glcdTransfer@cmd,c
  3110  001B02  5008               	movf	glcdDrawRectangle@YS,w,c
  3111  001B04  EC35  F00F         	call	_glcdTransfer
  3112                           
  3113                           ;GLCD_PIC_V1.1.c: 134: glcdTransfer(0x00, 0);
  3114  001B08  0E00               	movlw	0
  3115  001B0A  6E04               	movwf	glcdTransfer@cmd,c
  3116  001B0C  0E00               	movlw	0
  3117  001B0E  EC35  F00F         	call	_glcdTransfer
  3118                           
  3119                           ;GLCD_PIC_V1.1.c: 135: glcdTransfer(YE - 1, 0);
  3120  001B12  0E00               	movlw	0
  3121  001B14  6E04               	movwf	glcdTransfer@cmd,c
  3122  001B16  0409               	decf	glcdDrawRectangle@YE,w,c
  3123  001B18  EC35  F00F         	call	_glcdTransfer
  3124                           
  3125                           ;GLCD_PIC_V1.1.c: 137: glcdTransfer(INST_RAMWR, 1);
  3126  001B1C  0E01               	movlw	1
  3127  001B1E  6E04               	movwf	glcdTransfer@cmd,c
  3128  001B20  0E3B               	movlw	low _INST_RAMWR
  3129  001B22  6EF6               	movwf	tblptrl,c
  3130  001B24                     	if	1	;There is more than 1 active tblptr byte
  3131  001B24  0E10               	movlw	high _INST_RAMWR
  3132  001B26  6EF7               	movwf	tblptrh,c
  3133  001B28                     	endif
  3134  001B28                     	if	0	;There are less than 3 active tblptr bytes
  3135  001B28                     	endif
  3136  001B28  0008               	tblrd		*
  3137  001B2A  50F5               	movf	tablat,w,c
  3138  001B2C  EC35  F00F         	call	_glcdTransfer
  3139                           
  3140                           ;GLCD_PIC_V1.1.c: 141: if((XE == XS) && (YE == YS)){
  3141  001B30  5019               	movf	glcdDrawRectangle@XS,w,c
  3142  001B32  1807               	xorwf	glcdDrawRectangle@XE,w,c
  3143  001B34  A4D8               	btfss	status,2,c
  3144  001B36  D014               	goto	l1550
  3145  001B38  5008               	movf	glcdDrawRectangle@YS,w,c
  3146  001B3A  1809               	xorwf	glcdDrawRectangle@YE,w,c
  3147  001B3C  A4D8               	btfss	status,2,c
  3148  001B3E  D010               	goto	l1550
  3149                           
  3150                           ;GLCD_PIC_V1.1.c: 148: glcdTransfer(color & 0xFF, 0);
  3151  001B40  0E00               	movlw	0
  3152  001B42  6E04               	movwf	glcdTransfer@cmd,c
  3153  001B44  500A               	movf	glcdDrawRectangle@color,w,c
  3154  001B46  EC35  F00F         	call	_glcdTransfer
  3155                           
  3156                           ;GLCD_PIC_V1.1.c: 149: glcdTransfer((color >> 8) & 0xFF, 0);
  3157  001B4A  0E00               	movlw	0
  3158  001B4C  6E04               	movwf	glcdTransfer@cmd,c
  3159  001B4E  500B               	movf	glcdDrawRectangle@color+1,w,c
  3160  001B50  EC35  F00F         	call	_glcdTransfer
  3161                           
  3162                           ;GLCD_PIC_V1.1.c: 150: glcdTransfer((color >> 16) & 0xFF, 0);
  3163  001B54  0E00               	movlw	0
  3164  001B56  6E04               	movwf	glcdTransfer@cmd,c
  3165  001B58  500C               	movf	glcdDrawRectangle@color+2,w,c
  3166  001B5A  EC35  F00F         	call	_glcdTransfer
  3167                           
  3168                           ;GLCD_PIC_V1.1.c: 151: }
  3169  001B5E  0012               	return	
  3170  001B60                     l1550:
  3171                           
  3172                           ;GLCD_PIC_V1.1.c: 152: else{
  3173                           ;GLCD_PIC_V1.1.c: 164: unsigned short numLoops = (XE - XS) * (YE - YS);
  3174  001B60  5019               	movf	glcdDrawRectangle@XS,w,c
  3175  001B62  6E0E               	movwf	??_glcdDrawRectangle& (0+255),c
  3176  001B64  6A0F               	clrf	(??_glcdDrawRectangle+1)& (0+255),c
  3177  001B66  1E0E               	comf	??_glcdDrawRectangle,f,c
  3178  001B68  1E0F               	comf	??_glcdDrawRectangle+1,f,c
  3179  001B6A  4A0E               	infsnz	??_glcdDrawRectangle,f,c
  3180  001B6C  2A0F               	incf	??_glcdDrawRectangle+1,f,c
  3181  001B6E  5007               	movf	glcdDrawRectangle@XE,w,c
  3182  001B70  240E               	addwf	??_glcdDrawRectangle,w,c
  3183  001B72  6E01               	movwf	___wmul@multiplier,c
  3184  001B74  0E00               	movlw	0
  3185  001B76  200F               	addwfc	??_glcdDrawRectangle+1,w,c
  3186  001B78  6E02               	movwf	___wmul@multiplier+1,c
  3187  001B7A  5008               	movf	glcdDrawRectangle@YS,w,c
  3188  001B7C  6E10               	movwf	(??_glcdDrawRectangle+2)& (0+255),c
  3189  001B7E  6A11               	clrf	(??_glcdDrawRectangle+3)& (0+255),c
  3190  001B80  1E10               	comf	??_glcdDrawRectangle+2,f,c
  3191  001B82  1E11               	comf	??_glcdDrawRectangle+3,f,c
  3192  001B84  4A10               	infsnz	??_glcdDrawRectangle+2,f,c
  3193  001B86  2A11               	incf	??_glcdDrawRectangle+3,f,c
  3194  001B88  5009               	movf	glcdDrawRectangle@YE,w,c
  3195  001B8A  2410               	addwf	??_glcdDrawRectangle+2,w,c
  3196  001B8C  6E03               	movwf	___wmul@multiplicand,c
  3197  001B8E  0E00               	movlw	0
  3198  001B90  2011               	addwfc	??_glcdDrawRectangle+3,w,c
  3199  001B92  6E04               	movwf	___wmul@multiplicand+1,c
  3200  001B94  EC49  F00F         	call	___wmul	;wreg free
  3201  001B98  C001  F012         	movff	?___wmul,glcdDrawRectangle@numLoops
  3202  001B9C  C002  F013         	movff	?___wmul+1,glcdDrawRectangle@numLoops+1
  3203                           
  3204                           ;GLCD_PIC_V1.1.c: 165: unsigned char colorData[3];
  3205                           ;GLCD_PIC_V1.1.c: 166: colorData[0] = color & 0xFF;
  3206  001BA0  C00A  F016         	movff	glcdDrawRectangle@color,glcdDrawRectangle@colorData
  3207                           
  3208                           ;GLCD_PIC_V1.1.c: 167: colorData[1] = (color >> 8) & 0xFF;
  3209  001BA4  C00B  F017         	movff	glcdDrawRectangle@color+1,glcdDrawRectangle@colorData+1
  3210                           
  3211                           ;GLCD_PIC_V1.1.c: 168: colorData[2] = (color >> 16) & 0xFF;
  3212  001BA8  C00C  F018         	movff	glcdDrawRectangle@color+2,glcdDrawRectangle@colorData+2
  3213                           
  3214                           ;GLCD_PIC_V1.1.c: 170: LATDbits.LATD0 = 0;
  3215  001BAC  908C               	bcf	3980,0,c	;volatile
  3216                           
  3217                           ;GLCD_PIC_V1.1.c: 171: LATDbits.LATD1 = 1;
  3218  001BAE  828C               	bsf	3980,1,c	;volatile
  3219                           
  3220                           ;GLCD_PIC_V1.1.c: 172: for(unsigned short i = 0; i < numLoops; i++){
  3221  001BB0  0E00               	movlw	0
  3222  001BB2  6E15               	movwf	glcdDrawRectangle@i+1,c
  3223  001BB4  0E00               	movlw	0
  3224  001BB6  6E14               	movwf	glcdDrawRectangle@i,c
  3225  001BB8  D00B               	goto	l1568
  3226  001BBA                     l1564:
  3227                           
  3228                           ;GLCD_PIC_V1.1.c: 173: spiSend(colorData[0]);
  3229  001BBA  5016               	movf	glcdDrawRectangle@colorData,w,c
  3230  001BBC  EC74  F00F         	call	_spiSend
  3231                           
  3232                           ;GLCD_PIC_V1.1.c: 174: spiSend(colorData[1]);
  3233  001BC0  5017               	movf	glcdDrawRectangle@colorData+1,w,c
  3234  001BC2  EC74  F00F         	call	_spiSend
  3235                           
  3236                           ;GLCD_PIC_V1.1.c: 175: spiSend(colorData[2]);
  3237  001BC6  5018               	movf	glcdDrawRectangle@colorData+2,w,c
  3238  001BC8  EC74  F00F         	call	_spiSend
  3239  001BCC  4A14               	infsnz	glcdDrawRectangle@i,f,c
  3240  001BCE  2A15               	incf	glcdDrawRectangle@i+1,f,c
  3241  001BD0                     l1568:
  3242  001BD0  5012               	movf	glcdDrawRectangle@numLoops,w,c
  3243  001BD2  5C14               	subwf	glcdDrawRectangle@i,w,c
  3244  001BD4  5013               	movf	glcdDrawRectangle@numLoops+1,w,c
  3245  001BD6  5815               	subwfb	glcdDrawRectangle@i+1,w,c
  3246  001BD8  A0D8               	btfss	status,0,c
  3247  001BDA  D7EF               	goto	l1564
  3248                           
  3249                           ;GLCD_PIC_V1.1.c: 176: }
  3250                           ;GLCD_PIC_V1.1.c: 177: LATDbits.LATD0 = 1;
  3251  001BDC  808C               	bsf	3980,0,c	;volatile
  3252  001BDE  0012               	return	
  3253  001BE0                     __end_of_glcdDrawRectangle:
  3254                           	opt stack 0
  3255                           tblptru	equ	0xFF8
  3256                           tblptrh	equ	0xFF7
  3257                           tblptrl	equ	0xFF6
  3258                           tablat	equ	0xFF5
  3259                           prodh	equ	0xFF4
  3260                           prodl	equ	0xFF3
  3261                           intcon	equ	0xFF2
  3262                           intcon2	equ	0xFF1
  3263                           intcon3	equ	0xFF0
  3264                           wreg	equ	0xFE8
  3265                           status	equ	0xFD8
  3266                           
  3267 ;; *************** function _glcdTransfer *****************
  3268 ;; Defined at:
  3269 ;;		line 52 in file "../../src/GLCD/GLCD_PIC_V1.1.c"
  3270 ;; Parameters:    Size  Location     Type
  3271 ;;  byte            1    wreg     unsigned char 
  3272 ;;  cmd             1    3[COMRAM] unsigned char 
  3273 ;; Auto vars:     Size  Location     Type
  3274 ;;  byte            1    5[COMRAM] unsigned char 
  3275 ;; Return value:  Size  Location     Type
  3276 ;;                  1    wreg      void 
  3277 ;; Registers used:
  3278 ;;		wreg, status,2, status,0, cstack
  3279 ;; Tracked objects:
  3280 ;;		On entry : 0/0
  3281 ;;		On exit  : 0/0
  3282 ;;		Unchanged: 0/0
  3283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3284 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3285 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3286 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3287 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3288 ;;Total ram usage:        3 bytes
  3289 ;; Hardware stack levels used:    1
  3290 ;; Hardware stack levels required when called:    2
  3291 ;; This function calls:
  3292 ;;		_spiSend
  3293 ;; This function is called by:
  3294 ;;		_main
  3295 ;;		_glcdDrawRectangle
  3296 ;;		_glcdSetCOLMOD
  3297 ;;		_glcdSetOrigin
  3298 ;;		_initGLCD
  3299 ;; This function uses a non-reentrant model
  3300 ;;
  3301                           
  3302                           	psect	text8
  3303  001E6A                     __ptext8:
  3304                           	opt stack 0
  3305  001E6A                     _glcdTransfer:
  3306                           	opt stack 27
  3307                           
  3308                           ;incstack = 0
  3309                           ;glcdTransfer@byte stored from wreg
  3310  001E6A  6E06               	movwf	glcdTransfer@byte,c
  3311                           
  3312                           ;GLCD_PIC_V1.1.c: 61: LATDbits.LATD1 = (cmd == 1) ? 0 : 1;
  3313  001E6C  0404               	decf	glcdTransfer@cmd,w,c
  3314  001E6E  B4D8               	btfsc	status,2,c
  3315  001E70  D003               	goto	u470
  3316  001E72  6A05               	clrf	??_glcdTransfer& (0+255),c
  3317  001E74  2A05               	incf	??_glcdTransfer& (0+255),f,c
  3318  001E76  D001               	goto	u488
  3319  001E78                     u470:
  3320  001E78  6A05               	clrf	??_glcdTransfer& (0+255),c
  3321  001E7A                     u488:
  3322  001E7A  4605               	rlncf	??_glcdTransfer,f,c
  3323  001E7C  508C               	movf	3980,w,c	;volatile
  3324  001E7E  1805               	xorwf	??_glcdTransfer,w,c
  3325  001E80  0BFD               	andlw	-3
  3326  001E82  1805               	xorwf	??_glcdTransfer,w,c
  3327  001E84  6E8C               	movwf	3980,c	;volatile
  3328                           
  3329                           ;GLCD_PIC_V1.1.c: 65: LATDbits.LATD0 = 0;
  3330  001E86  908C               	bcf	3980,0,c	;volatile
  3331                           
  3332                           ;GLCD_PIC_V1.1.c: 67: spiSend(byte);
  3333  001E88  5006               	movf	glcdTransfer@byte,w,c
  3334  001E8A  EC74  F00F         	call	_spiSend
  3335                           
  3336                           ;GLCD_PIC_V1.1.c: 69: LATDbits.LATD0 = 1;
  3337  001E8E  808C               	bsf	3980,0,c	;volatile
  3338  001E90  0012               	return		;funcret
  3339  001E92                     __end_of_glcdTransfer:
  3340                           	opt stack 0
  3341                           tblptru	equ	0xFF8
  3342                           tblptrh	equ	0xFF7
  3343                           tblptrl	equ	0xFF6
  3344                           tablat	equ	0xFF5
  3345                           prodh	equ	0xFF4
  3346                           prodl	equ	0xFF3
  3347                           intcon	equ	0xFF2
  3348                           intcon2	equ	0xFF1
  3349                           intcon3	equ	0xFF0
  3350                           wreg	equ	0xFE8
  3351                           status	equ	0xFD8
  3352                           
  3353 ;; *************** function _spiSend *****************
  3354 ;; Defined at:
  3355 ;;		line 33 in file "../../src/SPI/SPI_PIC.c"
  3356 ;; Parameters:    Size  Location     Type
  3357 ;;  val             1    wreg     unsigned char 
  3358 ;; Auto vars:     Size  Location     Type
  3359 ;;  val             1    2[COMRAM] unsigned char 
  3360 ;; Return value:  Size  Location     Type
  3361 ;;                  1    wreg      void 
  3362 ;; Registers used:
  3363 ;;		wreg, status,2, cstack
  3364 ;; Tracked objects:
  3365 ;;		On entry : 0/0
  3366 ;;		On exit  : 0/0
  3367 ;;		Unchanged: 0/0
  3368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3370 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3372 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3373 ;;Total ram usage:        1 bytes
  3374 ;; Hardware stack levels used:    1
  3375 ;; Hardware stack levels required when called:    1
  3376 ;; This function calls:
  3377 ;;		_spiTransfer
  3378 ;; This function is called by:
  3379 ;;		_glcdTransfer
  3380 ;;		_glcdDrawRectangle
  3381 ;; This function uses a non-reentrant model
  3382 ;;
  3383                           
  3384                           	psect	text9
  3385  001EE8                     __ptext9:
  3386                           	opt stack 0
  3387  001EE8                     _spiSend:
  3388                           	opt stack 27
  3389                           
  3390                           ;incstack = 0
  3391                           ;spiSend@val stored from wreg
  3392  001EE8  6E03               	movwf	spiSend@val,c
  3393                           
  3394                           ;SPI_PIC.c: 41: spiTransfer(val);
  3395  001EEA  5003               	movf	spiSend@val,w,c
  3396  001EEC  EC5C  F00F         	call	_spiTransfer
  3397  001EF0  0012               	return		;funcret
  3398  001EF2                     __end_of_spiSend:
  3399                           	opt stack 0
  3400                           tblptru	equ	0xFF8
  3401                           tblptrh	equ	0xFF7
  3402                           tblptrl	equ	0xFF6
  3403                           tablat	equ	0xFF5
  3404                           prodh	equ	0xFF4
  3405                           prodl	equ	0xFF3
  3406                           intcon	equ	0xFF2
  3407                           intcon2	equ	0xFF1
  3408                           intcon3	equ	0xFF0
  3409                           wreg	equ	0xFE8
  3410                           status	equ	0xFD8
  3411                           
  3412 ;; *************** function _spiTransfer *****************
  3413 ;; Defined at:
  3414 ;;		line 12 in file "../../src/SPI/SPI_PIC.c"
  3415 ;; Parameters:    Size  Location     Type
  3416 ;;  byteToTransf    1    wreg     unsigned char 
  3417 ;; Auto vars:     Size  Location     Type
  3418 ;;  byteToTransf    1    1[COMRAM] unsigned char 
  3419 ;; Return value:  Size  Location     Type
  3420 ;;                  1    wreg      unsigned char 
  3421 ;; Registers used:
  3422 ;;		wreg, status,2
  3423 ;; Tracked objects:
  3424 ;;		On entry : 0/0
  3425 ;;		On exit  : 0/0
  3426 ;;		Unchanged: 0/0
  3427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3429 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3430 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3431 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3432 ;;Total ram usage:        2 bytes
  3433 ;; Hardware stack levels used:    1
  3434 ;; This function calls:
  3435 ;;		Nothing
  3436 ;; This function is called by:
  3437 ;;		_spiSend
  3438 ;;		_spiReceive
  3439 ;; This function uses a non-reentrant model
  3440 ;;
  3441                           
  3442                           	psect	text10
  3443  001EB8                     __ptext10:
  3444                           	opt stack 0
  3445  001EB8                     _spiTransfer:
  3446                           	opt stack 27
  3447                           
  3448                           ;incstack = 0
  3449                           ;spiTransfer@byteToTransfer stored from wreg
  3450  001EB8  6E02               	movwf	spiTransfer@byteToTransfer,c
  3451                           
  3452                           ;SPI_PIC.c: 23: SSPBUF = byteToTransfer;
  3453  001EBA  C002  FFC9         	movff	spiTransfer@byteToTransfer,4041	;volatile
  3454  001EBE                     l1466:
  3455  001EBE  B69E               	btfsc	3998,3,c	;volatile
  3456  001EC0  D002               	goto	u450
  3457  001EC2  0E01               	movlw	1
  3458  001EC4  D001               	goto	u452
  3459  001EC6                     u450:
  3460  001EC6  0E00               	movlw	0
  3461  001EC8                     u452:
  3462  001EC8  6E01               	movwf	??_spiTransfer& (0+255),c
  3463  001ECA  B0C7               	btfsc	4039,0,c	;volatile
  3464  001ECC  D002               	goto	u460
  3465  001ECE  0E01               	movlw	1
  3466  001ED0  D001               	goto	u462
  3467  001ED2                     u460:
  3468  001ED2  0E00               	movlw	0
  3469  001ED4                     u462:
  3470  001ED4  1001               	iorwf	??_spiTransfer,w,c
  3471  001ED6  E1F3               	bnz	l1466
  3472                           
  3473                           ;SPI_PIC.c: 30: return SSPBUF;
  3474  001ED8  50C9               	movf	4041,w,c	;volatile
  3475  001EDA  0012               	return	
  3476  001EDC                     __end_of_spiTransfer:
  3477                           	opt stack 0
  3478                           tblptru	equ	0xFF8
  3479                           tblptrh	equ	0xFF7
  3480                           tblptrl	equ	0xFF6
  3481                           tablat	equ	0xFF5
  3482                           prodh	equ	0xFF4
  3483                           prodl	equ	0xFF3
  3484                           intcon	equ	0xFF2
  3485                           intcon2	equ	0xFF1
  3486                           intcon3	equ	0xFF0
  3487                           wreg	equ	0xFE8
  3488                           status	equ	0xFD8
  3489                           
  3490 ;; *************** function ___wmul *****************
  3491 ;; Defined at:
  3492 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul16.c"
  3493 ;; Parameters:    Size  Location     Type
  3494 ;;  multiplier      2    0[COMRAM] unsigned int 
  3495 ;;  multiplicand    2    2[COMRAM] unsigned int 
  3496 ;; Auto vars:     Size  Location     Type
  3497 ;;  product         2    4[COMRAM] unsigned int 
  3498 ;; Return value:  Size  Location     Type
  3499 ;;                  2    0[COMRAM] unsigned int 
  3500 ;; Registers used:
  3501 ;;		wreg, status,2, status,0, prodl, prodh
  3502 ;; Tracked objects:
  3503 ;;		On entry : 0/0
  3504 ;;		On exit  : 0/0
  3505 ;;		Unchanged: 0/0
  3506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3507 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3508 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3510 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3511 ;;Total ram usage:        6 bytes
  3512 ;; Hardware stack levels used:    1
  3513 ;; This function calls:
  3514 ;;		Nothing
  3515 ;; This function is called by:
  3516 ;;		_main
  3517 ;;		_glcdDrawRectangle
  3518 ;; This function uses a non-reentrant model
  3519 ;;
  3520                           
  3521                           	psect	text11
  3522  001E92                     __ptext11:
  3523                           	opt stack 0
  3524  001E92                     ___wmul:
  3525                           	opt stack 28
  3526                           
  3527                           ;incstack = 0
  3528  001E92  5001               	movf	___wmul@multiplier,w,c
  3529  001E94  0203               	mulwf	___wmul@multiplicand,c
  3530  001E96  CFF3 F005          	movff	prodl,___wmul@product
  3531  001E9A  CFF4 F006          	movff	prodh,___wmul@product+1
  3532  001E9E  5001               	movf	___wmul@multiplier,w,c
  3533  001EA0  0204               	mulwf	___wmul@multiplicand+1,c
  3534  001EA2  50F3               	movf	prodl,w,c
  3535  001EA4  2606               	addwf	___wmul@product+1,f,c
  3536  001EA6  5002               	movf	___wmul@multiplier+1,w,c
  3537  001EA8  0203               	mulwf	___wmul@multiplicand,c
  3538  001EAA  50F3               	movf	prodl,w,c
  3539  001EAC  2606               	addwf	___wmul@product+1,f,c
  3540  001EAE  C005  F001         	movff	___wmul@product,?___wmul
  3541  001EB2  C006  F002         	movff	___wmul@product+1,?___wmul+1
  3542  001EB6  0012               	return	
  3543  001EB8                     __end_of___wmul:
  3544                           	opt stack 0
  3545                           tblptru	equ	0xFF8
  3546                           tblptrh	equ	0xFF7
  3547                           tblptrl	equ	0xFF6
  3548                           tablat	equ	0xFF5
  3549                           prodh	equ	0xFF4
  3550                           prodl	equ	0xFF3
  3551                           intcon	equ	0xFF2
  3552                           intcon2	equ	0xFF1
  3553                           intcon3	equ	0xFF0
  3554                           wreg	equ	0xFE8
  3555                           status	equ	0xFD8
  3556                           
  3557 ;; *************** function ___awmod *****************
  3558 ;; Defined at:
  3559 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awmod.c"
  3560 ;; Parameters:    Size  Location     Type
  3561 ;;  dividend        2    8[COMRAM] int 
  3562 ;;  divisor         2   10[COMRAM] int 
  3563 ;; Auto vars:     Size  Location     Type
  3564 ;;  sign            1   13[COMRAM] unsigned char 
  3565 ;;  counter         1   12[COMRAM] unsigned char 
  3566 ;; Return value:  Size  Location     Type
  3567 ;;                  2    8[COMRAM] int 
  3568 ;; Registers used:
  3569 ;;		wreg, status,2, status,0
  3570 ;; Tracked objects:
  3571 ;;		On entry : 0/0
  3572 ;;		On exit  : 0/0
  3573 ;;		Unchanged: 0/0
  3574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3575 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3576 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3578 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3579 ;;Total ram usage:        6 bytes
  3580 ;; Hardware stack levels used:    1
  3581 ;; This function calls:
  3582 ;;		Nothing
  3583 ;; This function is called by:
  3584 ;;		_main
  3585 ;; This function uses a non-reentrant model
  3586 ;;
  3587                           
  3588                           	psect	text12
  3589  001C64                     __ptext12:
  3590                           	opt stack 0
  3591  001C64                     ___awmod:
  3592                           	opt stack 30
  3593                           
  3594                           ;incstack = 0
  3595  001C64  0E00               	movlw	0
  3596  001C66  6E0E               	movwf	___awmod@sign,c
  3597  001C68  AE0A               	btfss	___awmod@dividend+1,7,c
  3598  001C6A  D006               	goto	l1780
  3599  001C6C  6C09               	negf	___awmod@dividend,c
  3600  001C6E  1E0A               	comf	___awmod@dividend+1,f,c
  3601  001C70  B0D8               	btfsc	status,0,c
  3602  001C72  2A0A               	incf	___awmod@dividend+1,f,c
  3603  001C74  0E01               	movlw	1
  3604  001C76  6E0E               	movwf	___awmod@sign,c
  3605  001C78                     l1780:
  3606  001C78  AE0C               	btfss	___awmod@divisor+1,7,c
  3607  001C7A  D004               	goto	l1784
  3608  001C7C  6C0B               	negf	___awmod@divisor,c
  3609  001C7E  1E0C               	comf	___awmod@divisor+1,f,c
  3610  001C80  B0D8               	btfsc	status,0,c
  3611  001C82  2A0C               	incf	___awmod@divisor+1,f,c
  3612  001C84                     l1784:
  3613  001C84  500B               	movf	___awmod@divisor,w,c
  3614  001C86  100C               	iorwf	___awmod@divisor+1,w,c
  3615  001C88  B4D8               	btfsc	status,2,c
  3616  001C8A  D018               	goto	l1800
  3617  001C8C  0E01               	movlw	1
  3618  001C8E  6E0D               	movwf	___awmod@counter,c
  3619  001C90  D004               	goto	l1790
  3620  001C92                     l1788:
  3621  001C92  90D8               	bcf	status,0,c
  3622  001C94  360B               	rlcf	___awmod@divisor,f,c
  3623  001C96  360C               	rlcf	___awmod@divisor+1,f,c
  3624  001C98  2A0D               	incf	___awmod@counter,f,c
  3625  001C9A                     l1790:
  3626  001C9A  AE0C               	btfss	___awmod@divisor+1,7,c
  3627  001C9C  D7FA               	goto	l1788
  3628  001C9E                     l1792:
  3629  001C9E  500B               	movf	___awmod@divisor,w,c
  3630  001CA0  5C09               	subwf	___awmod@dividend,w,c
  3631  001CA2  500C               	movf	___awmod@divisor+1,w,c
  3632  001CA4  580A               	subwfb	___awmod@dividend+1,w,c
  3633  001CA6  A0D8               	btfss	status,0,c
  3634  001CA8  D004               	goto	l1796
  3635  001CAA  500B               	movf	___awmod@divisor,w,c
  3636  001CAC  5E09               	subwf	___awmod@dividend,f,c
  3637  001CAE  500C               	movf	___awmod@divisor+1,w,c
  3638  001CB0  5A0A               	subwfb	___awmod@dividend+1,f,c
  3639  001CB2                     l1796:
  3640  001CB2  90D8               	bcf	status,0,c
  3641  001CB4  320C               	rrcf	___awmod@divisor+1,f,c
  3642  001CB6  320B               	rrcf	___awmod@divisor,f,c
  3643  001CB8  2E0D               	decfsz	___awmod@counter,f,c
  3644  001CBA  D7F1               	goto	l1792
  3645  001CBC                     l1800:
  3646  001CBC  500E               	movf	___awmod@sign,w,c
  3647  001CBE  B4D8               	btfsc	status,2,c
  3648  001CC0  D004               	goto	l1804
  3649  001CC2  6C09               	negf	___awmod@dividend,c
  3650  001CC4  1E0A               	comf	___awmod@dividend+1,f,c
  3651  001CC6  B0D8               	btfsc	status,0,c
  3652  001CC8  2A0A               	incf	___awmod@dividend+1,f,c
  3653  001CCA                     l1804:
  3654  001CCA  C009  F009         	movff	___awmod@dividend,?___awmod
  3655  001CCE  C00A  F00A         	movff	___awmod@dividend+1,?___awmod+1
  3656  001CD2  0012               	return	
  3657  001CD4                     __end_of___awmod:
  3658                           	opt stack 0
  3659                           tblptru	equ	0xFF8
  3660                           tblptrh	equ	0xFF7
  3661                           tblptrl	equ	0xFF6
  3662                           tablat	equ	0xFF5
  3663                           prodh	equ	0xFF4
  3664                           prodl	equ	0xFF3
  3665                           intcon	equ	0xFF2
  3666                           intcon2	equ	0xFF1
  3667                           intcon3	equ	0xFF0
  3668                           wreg	equ	0xFE8
  3669                           status	equ	0xFD8
  3670                           
  3671 ;; *************** function ___awdiv *****************
  3672 ;; Defined at:
  3673 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awdiv.c"
  3674 ;; Parameters:    Size  Location     Type
  3675 ;;  dividend        2    0[COMRAM] int 
  3676 ;;  divisor         2    2[COMRAM] int 
  3677 ;; Auto vars:     Size  Location     Type
  3678 ;;  quotient        2    6[COMRAM] int 
  3679 ;;  sign            1    5[COMRAM] unsigned char 
  3680 ;;  counter         1    4[COMRAM] unsigned char 
  3681 ;; Return value:  Size  Location     Type
  3682 ;;                  2    0[COMRAM] int 
  3683 ;; Registers used:
  3684 ;;		wreg, status,2, status,0
  3685 ;; Tracked objects:
  3686 ;;		On entry : 0/0
  3687 ;;		On exit  : 0/0
  3688 ;;		Unchanged: 0/0
  3689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3690 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3691 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3693 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3694 ;;Total ram usage:        8 bytes
  3695 ;; Hardware stack levels used:    1
  3696 ;; This function calls:
  3697 ;;		Nothing
  3698 ;; This function is called by:
  3699 ;;		_main
  3700 ;; This function uses a non-reentrant model
  3701 ;;
  3702                           
  3703                           	psect	text13
  3704  001BE0                     __ptext13:
  3705                           	opt stack 0
  3706  001BE0                     ___awdiv:
  3707                           	opt stack 30
  3708                           
  3709                           ;incstack = 0
  3710  001BE0  0E00               	movlw	0
  3711  001BE2  6E06               	movwf	___awdiv@sign,c
  3712  001BE4  AE04               	btfss	___awdiv@divisor+1,7,c
  3713  001BE6  D006               	goto	l1736
  3714  001BE8  6C03               	negf	___awdiv@divisor,c
  3715  001BEA  1E04               	comf	___awdiv@divisor+1,f,c
  3716  001BEC  B0D8               	btfsc	status,0,c
  3717  001BEE  2A04               	incf	___awdiv@divisor+1,f,c
  3718  001BF0  0E01               	movlw	1
  3719  001BF2  6E06               	movwf	___awdiv@sign,c
  3720  001BF4                     l1736:
  3721  001BF4  AE02               	btfss	___awdiv@dividend+1,7,c
  3722  001BF6  D006               	goto	l1742
  3723  001BF8  6C01               	negf	___awdiv@dividend,c
  3724  001BFA  1E02               	comf	___awdiv@dividend+1,f,c
  3725  001BFC  B0D8               	btfsc	status,0,c
  3726  001BFE  2A02               	incf	___awdiv@dividend+1,f,c
  3727  001C00  0E01               	movlw	1
  3728  001C02  1A06               	xorwf	___awdiv@sign,f,c
  3729  001C04                     l1742:
  3730  001C04  0E00               	movlw	0
  3731  001C06  6E08               	movwf	___awdiv@quotient+1,c
  3732  001C08  0E00               	movlw	0
  3733  001C0A  6E07               	movwf	___awdiv@quotient,c
  3734  001C0C  5003               	movf	___awdiv@divisor,w,c
  3735  001C0E  1004               	iorwf	___awdiv@divisor+1,w,c
  3736  001C10  B4D8               	btfsc	status,2,c
  3737  001C12  D01C               	goto	l1764
  3738  001C14  0E01               	movlw	1
  3739  001C16  6E05               	movwf	___awdiv@counter,c
  3740  001C18  D004               	goto	l1750
  3741  001C1A                     l1748:
  3742  001C1A  90D8               	bcf	status,0,c
  3743  001C1C  3603               	rlcf	___awdiv@divisor,f,c
  3744  001C1E  3604               	rlcf	___awdiv@divisor+1,f,c
  3745  001C20  2A05               	incf	___awdiv@counter,f,c
  3746  001C22                     l1750:
  3747  001C22  AE04               	btfss	___awdiv@divisor+1,7,c
  3748  001C24  D7FA               	goto	l1748
  3749  001C26                     l1752:
  3750  001C26  90D8               	bcf	status,0,c
  3751  001C28  3607               	rlcf	___awdiv@quotient,f,c
  3752  001C2A  3608               	rlcf	___awdiv@quotient+1,f,c
  3753  001C2C  5003               	movf	___awdiv@divisor,w,c
  3754  001C2E  5C01               	subwf	___awdiv@dividend,w,c
  3755  001C30  5004               	movf	___awdiv@divisor+1,w,c
  3756  001C32  5802               	subwfb	___awdiv@dividend+1,w,c
  3757  001C34  A0D8               	btfss	status,0,c
  3758  001C36  D005               	goto	l1760
  3759  001C38  5003               	movf	___awdiv@divisor,w,c
  3760  001C3A  5E01               	subwf	___awdiv@dividend,f,c
  3761  001C3C  5004               	movf	___awdiv@divisor+1,w,c
  3762  001C3E  5A02               	subwfb	___awdiv@dividend+1,f,c
  3763  001C40  8007               	bsf	___awdiv@quotient,0,c
  3764  001C42                     l1760:
  3765  001C42  90D8               	bcf	status,0,c
  3766  001C44  3204               	rrcf	___awdiv@divisor+1,f,c
  3767  001C46  3203               	rrcf	___awdiv@divisor,f,c
  3768  001C48  2E05               	decfsz	___awdiv@counter,f,c
  3769  001C4A  D7ED               	goto	l1752
  3770  001C4C                     l1764:
  3771  001C4C  5006               	movf	___awdiv@sign,w,c
  3772  001C4E  B4D8               	btfsc	status,2,c
  3773  001C50  D004               	goto	l1768
  3774  001C52  6C07               	negf	___awdiv@quotient,c
  3775  001C54  1E08               	comf	___awdiv@quotient+1,f,c
  3776  001C56  B0D8               	btfsc	status,0,c
  3777  001C58  2A08               	incf	___awdiv@quotient+1,f,c
  3778  001C5A                     l1768:
  3779  001C5A  C007  F001         	movff	___awdiv@quotient,?___awdiv
  3780  001C5E  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  3781  001C62  0012               	return	
  3782  001C64                     __end_of___awdiv:
  3783                           	opt stack 0
  3784                           tblptru	equ	0xFF8
  3785                           tblptrh	equ	0xFF7
  3786                           tblptrl	equ	0xFF6
  3787                           tablat	equ	0xFF5
  3788                           prodh	equ	0xFF4
  3789                           prodl	equ	0xFF3
  3790                           intcon	equ	0xFF2
  3791                           intcon2	equ	0xFF1
  3792                           intcon3	equ	0xFF0
  3793                           wreg	equ	0xFE8
  3794                           status	equ	0xFD8
  3795                           tblptru	equ	0xFF8
  3796                           tblptrh	equ	0xFF7
  3797                           tblptrl	equ	0xFF6
  3798                           tablat	equ	0xFF5
  3799                           prodh	equ	0xFF4
  3800                           prodl	equ	0xFF3
  3801                           intcon	equ	0xFF2
  3802                           intcon2	equ	0xFF1
  3803                           intcon3	equ	0xFF0
  3804                           wreg	equ	0xFE8
  3805                           status	equ	0xFD8
  3806                           
  3807                           	psect	rparam
  3808  0000                     tblptru	equ	0xFF8
  3809                           tblptrh	equ	0xFF7
  3810                           tblptrl	equ	0xFF6
  3811                           tablat	equ	0xFF5
  3812                           prodh	equ	0xFF4
  3813                           prodl	equ	0xFF3
  3814                           intcon	equ	0xFF2
  3815                           intcon2	equ	0xFF1
  3816                           intcon3	equ	0xFF0
  3817                           wreg	equ	0xFE8
  3818                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    76
    Data        0
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     41      42
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_glcdDrawPixel
    _initGLCD->_glcdDrawRectangle
    _glcdSetCOLMOD->_glcdTransfer
    _glcdSetOrigin->_glcdTransfer
    _glcdDrawPixel->_glcdDrawRectangle
    _glcdDrawRectangle->___wmul
    _glcdDrawRectangle->_glcdTransfer
    _glcdTransfer->_spiSend
    _spiSend->_spiTransfer
    ___awmod->___awdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                17    17      0   51913
                                             32 COMRAM     9     9      0
                            ___awdiv
                            ___awmod
                             ___wmul
                      _glcdDrawPixel
                  _glcdDrawRectangle
                      _glcdSetOrigin
                       _glcdTransfer
                           _initGLCD
                      _machineConfig
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initGLCD                                             2     2      0   18973
                                             25 COMRAM     2     2      0
                  _glcdDrawRectangle
                      _glcdSetCOLMOD
                       _glcdTransfer
                            _spiInit
 ---------------------------------------------------------------------------------
 (2) _spiInit                                              1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _glcdSetCOLMOD                                        3     3      0    4772
                                              6 COMRAM     3     3      0
                       _glcdTransfer
 ---------------------------------------------------------------------------------
 (1) _glcdSetOrigin                                        1     1      0    4746
                                              6 COMRAM     1     1      0
                       _glcdTransfer
 ---------------------------------------------------------------------------------
 (1) _glcdDrawPixel                                        7     2      5   11131
                                             25 COMRAM     7     2      5
                            ___awmod (ARG)
                  _glcdDrawRectangle
 ---------------------------------------------------------------------------------
 (2) _glcdDrawRectangle                                   19    12      7    9455
                                              6 COMRAM    19    12      7
                             ___wmul
                       _glcdTransfer
                            _spiSend
 ---------------------------------------------------------------------------------
 (2) _glcdTransfer                                         3     2      1    4724
                                              3 COMRAM     3     2      1
                            _spiSend
 ---------------------------------------------------------------------------------
 (3) _spiSend                                              1     1      0      44
                                              2 COMRAM     1     1      0
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (4) _spiTransfer                                          2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     767
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              6     2      4     600
                                              8 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4     452
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___awdiv
   ___awmod
     ___awdiv (ARG)
   ___wmul
   _glcdDrawPixel
     ___awmod (ARG)
       ___awdiv (ARG)
     _glcdDrawRectangle (ARG)
       ___wmul
       _glcdTransfer
         _spiSend
           _spiTransfer
       _spiSend
         _spiTransfer
   _glcdDrawRectangle
     ___wmul
     _glcdTransfer
       _spiSend
         _spiTransfer
     _spiSend
       _spiTransfer
   _glcdSetOrigin
     _glcdTransfer
       _spiSend
         _spiTransfer
   _glcdTransfer
     _spiSend
       _spiTransfer
   _initGLCD
     _glcdDrawRectangle
       ___wmul
       _glcdTransfer
         _spiSend
           _spiTransfer
       _spiSend
         _spiTransfer
     _glcdSetCOLMOD
       _glcdTransfer
         _spiSend
           _spiTransfer
     _glcdTransfer
       _spiSend
         _spiTransfer
     _spiInit
   _machineConfig

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     29      2A       1       33.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      2A      34        0.0%
DATA                 0      0      2A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Tue Apr 17 02:42:16 2018

                       _SSPSTATbits 000FC7                      ??_glcdTransfer 0005  
                                l72 1E60                         __CFG_CPD$ON 000000  
                      ___awdiv@sign 0006                 ___wmul@multiplicand 0003  
                       __CFG_BORV$3 000000                        __CFG_CP0$OFF 000000  
                      __CFG_CP1$OFF 000000                        __CFG_CP2$OFF 000000  
                      __CFG_CP3$OFF 000000                                 l300 1D5A  
                               l280 1CFA                                 l266 1A72  
                               l268 1A86                                 l297 1D46  
                               l298 1D4C                                 l299 1D52  
                      __CFG_CPB$OFF 000000                                 _RED 1019  
                               u450 1EC6                                 u460 1ED2  
                               u452 1EC8                                 u462 1ED4  
                               u470 1E78                                 u488 1E7A  
                               u907 126C                                 u917 1298  
                               u927 12C4                                 u937 1306  
                               u947 1352                                 u957 13A8  
                               u967 13F4                                 u977 1510  
                               u897 10B2                                 u987 16F4  
                               u997 176C                      ?_machineConfig 0001  
                      ___awmod@sign 000E                                 wreg 000FE8  
                      __CFG_LVP$OFF 000000                        __CFG_WDT$OFF 000000  
                              l1500 1E4A                                l1522 1AA4  
                              l1516 1A98                                l1550 1B60  
                              l1518 1A9C                                l1800 1CBC  
                              l1466 1EBE                                l1722 1D62  
                              l1804 1CCA                                l1564 1BBA  
                              l1716 1D1E                                l1724 1D7E  
                              l1572 1DA2                                l1750 1C22  
                              l1742 1C04                                l1574 1DAA  
                              l1582 1DBC                                l1494 1E3C  
                              l1910 1586                                l1822 1062  
                              l1760 1C42                                l1752 1C26  
                              l1736 1BF4                                l1568 1BD0  
                              l1584 1DCE                                l1496 1E40  
                              l1904 157E                                l1578 1DB4  
                              l1498 1E44                                l1748 1C1A  
                              l1764 1C4C                                l1780 1C78  
                              l1940 1618                                l1916 159C  
                              l1932 15FE                                l1908 1582  
                              l1790 1C9A                                l1950 1658  
                              l1934 1602                                l1768 1C5A  
                              l1792 1C9E                                l1784 1C84  
                              l1928 15FA                                l1962 16AE  
                              l1954 165C                                l1882 150A  
                              l1796 1CB2                                l1788 1C92  
                              l1980 1706                                l1964 16B2  
                              l1868 1406                                l1982 170E  
                              l1990 1726                                l1958 16A6  
                              l1894 1536                                l1878 14BA  
                              l1886 151C                                l1984 1716  
                              l1992 1750                                l1976 1702  
                              l1888 1520                                l1986 171E  
                              _BLUE 1009                                u1007 1798  
                              u1017 17C4                                u1027 1A56  
                              _LATA 000F89                                _LATB 000F8A  
                              _LATC 000F8B                                _LATD 000F8C  
                              _LATE 000F8D                                _GREY 1021  
                              _PEIE 007F96                                _main 104E  
                              prodh 000FF4                                prodl 000FF3  
                              start 0000                       __CFG_IESO$OFF 000000  
                     __CFG_MCLRE$ON 000000                        ___param_bank 000000  
                             ?_main 0001                     __end_of___awdiv 1C64  
                             _BLACK 1025                     __end_of___awmod 1CD4  
                  __end_of_INST_NOP 1047                     ___awdiv@divisor 0003  
                             _GREEN 100D                     ___awdiv@counter 0005  
                             _WHITE 101D                               _TRISA 000F92  
                             _TRISB 000F93                               _TRISC 000F94  
                             _TRISD 000F95                               _TRISE 000F96  
                             _SSPIF 007CF3                       __CFG_PWRT$OFF 000000  
                     __CFG_WRT0$OFF 000000                       __CFG_WRT1$OFF 000000  
                     __CFG_WRT2$OFF 000000                       __CFG_WRT3$OFF 000000  
                    __CFG_EBTR0$OFF 000000                      __CFG_FCMEN$OFF 000000  
                    __CFG_EBTR1$OFF 000000                      __CFG_EBTR2$OFF 000000  
                    __CFG_EBTR3$OFF 000000                               _nRBPU 007F8F  
                     __CFG_WRTB$OFF 000000                       __CFG_WRTC$OFF 000000  
                     __CFG_WRTD$OFF 000000                      __CFG_EBTRB$OFF 000000  
                             main@x 0029                               main@y 0028  
                   __end_of_spiInit 1E6A                               tablat 000FF5  
                   __end_of_spiSend 1EF2                        main@rotation 0023  
                             status 000FD8                      __CFG_PBADEN$ON 000000  
                      __end_of_BLUE 100D                        __end_of_GREY 1025  
                   __initialization 1EDC                        __end_of_main 1754  
      glcdSetCOLMOD@numBitsPerPixel 0007                      __CFG_OSC$HSPLL 000000  
                   ??_machineConfig 0001                              ??_main 0021  
                     __activetblptr 000002                              _ADCON0 000FC2  
                            _ADCON1 000FC1                              _ADCON2 000FC0  
                   glcdDrawPixel@XS 0020                     glcdDrawPixel@YS 001A  
                  ___awdiv@dividend 0001                   _glcdDrawRectangle 1A60  
                 __end_of_INST_TEON 1039                              _INDIGO 1005  
                            _INT1IE 007F83                              _CVRCON 000FB5  
              __end_of_glcdTransfer 1E92                              _ORANGE 1015  
                ?_glcdDrawRectangle 0007                              _VIOLET 1001  
                            _YELLOW 1011                              _SSPBUF 000FC9  
                    __CFG_XINST$OFF 000000           glcdDrawRectangle@numLoops 0012  
               ??_glcdDrawRectangle 000E                              ___wmul 1E92  
                  __end_of_initGLCD 1A60                           ??___awdiv 0005  
                    __CFG_STVREN$ON 000000                           ??___awmod 000D  
                  ___awdiv@quotient 0007                     ___awmod@divisor 000B  
                   ___awmod@counter 000D                        ?_spiTransfer 0001  
                      __mediumconst 0000                              tblptrh 000FF7  
                            tblptrl 000FF6                              tblptru 000FF8  
                         ??_spiInit 0001                           ??_spiSend 0003  
         __end_of_glcdDrawRectangle 1BE0                          __accesstop 0080  
           __end_of__initialization 1EDE                       __end_of_BLACK 1029  
                     ___rparam_used 000001                       __end_of_GREEN 1011  
                     __end_of_WHITE 1021                      __pcstackCOMRAM 0001  
               glcdSetOrigin@corner 0007               __end_of_glcdDrawPixel 1D42  
                     _INST_VMOFCTR2 1029               __end_of_glcdSetCOLMOD 1DEE  
             __end_of_glcdSetOrigin 1D9E                             ?___wmul 0001  
                glcdDrawRectangle@i 0014                  __end_of_INST_CASET 103E  
                __end_of_INST_IDMON 1036                  __end_of_INST_INVON 104D  
                __end_of_INST_RASET 103D                  __end_of_INST_RAMWR 103C  
                __end_of_INST_TEOFF 103A                  __end_of_INST_NORON 1042  
                __end_of_INST_PTLAR 103B                  __end_of_INST_SLPIN 1045  
                __end_of_INST_PTLON 1043               __size_of_glcdTransfer 0028  
        __size_of_glcdDrawRectangle 0180           spiTransfer@byteToTransfer 0002  
                           _SSPCON1 000FC6                             _SSPSTAT 000FC7  
                         ?_initGLCD 0001                  glcdDrawPixel@color 001B  
                           __Hparam 0000                      _GLCD_SIZE_HORZ 1048  
                           __Lparam 0000                      _GLCD_SIZE_VERT 1047  
              __end_of_INST_DISPOFF 1040                __end_of_INST_FRMCTR1 1034  
              __end_of_INST_FRMCTR2 1033                __end_of_INST_FRMCTR3 1032  
                           ___awdiv 1BE0                             ___awmod 1C64  
                   __size_of___wmul 0026                           _CMCONbits 000FB4  
                      __psmallconst 1000                             __pcinit 1EDC  
                      _glcdTransfer 1E6A                             __ramtop 1000  
                           __ptext0 104E                             __ptext1 1DEE  
                           __ptext2 1754                             __ptext3 1E32  
                           __ptext4 1D9E                             __ptext5 1D42  
                           __ptext6 1CD4                             __ptext7 1A60  
                           __ptext8 1E6A                             __ptext9 1EE8  
              __end_of_INST_SWRESET 1046                    ___awmod@dividend 0009  
                           _spiInit 1E32                             _spiSend 1EE8  
              __size_of_spiTransfer 0024                end_of_initialization 1EDE  
                        ??_initGLCD 001A                       __Lmediumconst 0000  
            __end_of_GLCD_SIZE_HORZ 1049                           _INST_TEON 1038  
            __end_of_GLCD_SIZE_VERT 1048                    glcdTransfer@byte 0006  
             __end_of_machineConfig 1E32                      spiInit@divider 0001  
                         _TRISCbits 000F94                           _TRISDbits 000F95  
                    __end_of_INDIGO 1009                      __end_of_ORANGE 1019  
                    __end_of_VIOLET 1005                      __end_of_YELLOW 1015  
                    __end_of___wmul 1EB8                 start_initialization 1EDC  
                       __end_of_RED 101D              glcdDrawRectangle@color 000A  
                          ??___wmul 0005                    __CFG_LPT1OSC$OFF 000000  
__end_of_GLCD_ADDRESSABLE_SIZE_HORZ 104B          _GLCD_ADDRESSABLE_SIZE_HORZ 104A  
__end_of_GLCD_ADDRESSABLE_SIZE_VERT 104A          _GLCD_ADDRESSABLE_SIZE_VERT 1049  
                       __pbssCOMRAM 002A                        _INST_DISPOFF 103F  
                      _INST_FRMCTR1 1033                        _INST_FRMCTR2 1032  
                      _INST_FRMCTR3 1031                   __size_of_initGLCD 030C  
                      _INST_SWRESET 1045              __size_of_glcdDrawPixel 006E  
                         _main$1173 0024                   __CFG_CCP2MX$PORTC 000000  
                          ?___awdiv 0001                            ?___awmod 0009  
            __size_of_glcdSetCOLMOD 0050                         __smallconst 1000  
               glcdDrawRectangle@XE 0007                 glcdDrawRectangle@YE 0009  
               glcdDrawRectangle@XS 0019                 glcdDrawRectangle@YS 0008  
               __end_of_INST_GAMSET 1041                            ?_spiInit 0001  
               __end_of_INST_COLMOD 1035                            ?_spiSend 0001  
               __end_of_INST_MADCTL 1038                 __end_of_INST_DISPON 103F  
               __end_of_INST_IDMOFF 1037                 __end_of_INST_INVCTR 1031  
               __end_of_INST_INVOFF 104C              __size_of_glcdSetOrigin 005C  
               __end_of_INST_PWCTR1 1030                 __end_of_INST_PWCTR2 102F  
               __end_of_INST_PWCTR3 102E                 __end_of_INST_PWCTR4 102D  
               __end_of_INST_PWCTR5 102C                 __end_of_INST_VMCTR1 102B  
               __end_of_INST_SLPOUT 1044                      ___wmul@product 0005  
                          _LATDbits 000F8C                            _INST_NOP 1046  
                        spiSend@val 0003                    __CFG_WDTPS$32768 000000  
                   glcdTransfer@cmd 0004                   ___wmul@multiplier 0001  
                     ??_spiTransfer 0001                glcdSetCOLMOD@rawData 0008  
                     _glcdDrawPixel 1CD4                       _glcdSetCOLMOD 1D9E  
                          __Hrparam 0000                            __Lrparam 0000  
                __CFG_BOREN$SBORDIS 000000                       _glcdSetOrigin 1D42  
                  __size_of___awdiv 0084                    __size_of___awmod 0070  
                       _INST_GAMSET 1040                         _INST_COLMOD 1034  
                       _INST_MADCTL 1037                         _INST_DISPON 103E  
                       _INST_IDMOFF 1036                         _INST_INVCTR 1030  
                       _INST_INVOFF 104B                      ?_glcdDrawPixel 001A  
                       _INST_PWCTR1 102F                         _INST_PWCTR2 102E  
                       _INST_PWCTR3 102D                         _INST_PWCTR4 102C  
                       _INST_PWCTR5 102B                         _INST_VMCTR1 102A  
                       _INST_SLPOUT 1043                            __ptext10 1EB8  
                          __ptext11 1E92                            __ptext12 1C64  
                          __ptext13 1BE0                    __size_of_spiInit 0038  
                  __size_of_spiSend 000A               __end_of_INST_VMOFCTR2 102A  
                        _MADCTLbits 002A                 __end_of_spiTransfer 1EDC  
                    ?_glcdSetCOLMOD 0001                            _initGLCD 1754  
                     __size_of_main 0706              __size_of_machineConfig 0044  
                    ?_glcdSetOrigin 0001                          _INTCONbits 000FF2  
                        _INST_CASET 103D                          _INST_IDMON 1035  
                        _INST_INVON 104C                          _INST_RASET 103C  
                        _INST_RAMWR 103B                          _INST_TEOFF 1039  
                        _INST_NORON 1041                          _INST_PTLAR 103A  
                        _INST_SLPIN 1044                          _INST_PTLON 1042  
        glcdDrawRectangle@colorData 0016                       ?_glcdTransfer 0004  
                   ??_glcdDrawPixel 001F                       _machineConfig 1DEE  
                       _spiTransfer 1EB8                         _SSPCON1bits 000FC6  
                   ??_glcdSetCOLMOD 0007                     ??_glcdSetOrigin 0007  
